<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 6.0 动态权限申请与 7.0 适配 File Uri 小记</title>
    <url>/2017/10/16/Android%206.0%20%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E4%B8%8E%207.0%20%E9%80%82%E9%85%8D%20File%20Uri%20%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>看了下上一篇文章的写作日期，转眼之间已经过去了大半个月了……一个国庆小长假下来也是放松了不少，不过学习也不能过于疏忽了。以前偷懒没有看适配6.0 和 7.0的东西，最近在下也是正式的抛弃了大三时买的ip6，入了一台小米mix2。mix2是基于Android 7.1的系统的，自己平时也喜欢用自己的手机调试应用，各种没有适配导致的崩溃自然也是免不了的。以前没看权限适配一是因为6.0以上的系统覆盖率不是很高，二也是因为那时候要看的东西很多，这东西不是很急迫，现在各个厂商的手机出厂系统都是6.0以上的了，也是时候看一下了。本文包括以下内容：</p>
<ul>
<li>Android 6.0 动态权限申请</li>
<li>RxPermission</li>
<li>Android 7.0 File Uri 导致的崩溃以及如何适配</li>
</ul>
<h2 id="Android-6-0-动态权限申请"><a href="#Android-6-0-动态权限申请" class="headerlink" title="Android 6.0 动态权限申请"></a>Android 6.0 动态权限申请</h2><p>这里先推荐一波官方的文档：<a href="https://developer.android.com/training/permissions/requesting.html#perm-request%EF%BC%8C%E6%96%87%E6%A1%A3%E8%AE%B2%E7%9A%84%E8%BF%98%E6%98%AF%E6%AF%94%E8%BE%83%E8%AF%A6%E5%B0%BD%E7%9A%84%EF%BC%8C%E7%88%B1%E8%87%AA%E5%B7%B1%E6%8A%98%E8%85%BE%E7%9A%84%E5%90%8C%E5%AD%A6%EF%BC%88%E6%AF%94%E5%A6%82%E6%88%91%EF%BC%89%E7%9C%8B%E5%88%B0%E8%BF%99%E5%BA%94%E8%AF%A5say">https://developer.android.com/training/permissions/requesting.html#perm-request，文档讲的还是比较详尽的，爱自己折腾的同学（比如我）看到这应该say</a> goodbye了</p>
<span id="more"></span>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-de1a49a1b001ba83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="再见"></p>
<p>扯犊子时间到此为止，继续正文。系统权限分为几个保护级别，这里需要了解的是两个保护级别是正常权限和危险权限。正常权限只要应用声明了，系统就会自动给应用该权限。而危险权限在Android 6.0 及以上时，则需要通过动态申请来获取权限。当然，考虑到一些兼容性问题，项目的 targetSdkVersion &lt;= 22 时，并不需要动态申请权限。但适配是早晚要去适配的。。。躲也躲不掉，还是先了解下为妙。任何权限都可以属于一个权限组，危险权限也有自己的组别，当你请求了某组权限中的某个权限成功，那么该组的其他权限系统也将授予。比如申请了 STORAGE 权限组的 READ_EXTERNAL_STORAGE 权限，那么该组的 WRITE_EXTERNAL_STORAGE 权限在使用时就无需申请了。接下来放一张危险权限组及危险权限的 <code>截图</code> ，markdown 制表还是挺麻烦的……偷个懒</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d8300fc8e98aa5ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="危险权限组及危险权限"></p>
<h3 id="动态权限申请实操"><a href="#动态权限申请实操" class="headerlink" title="动态权限申请实操"></a>动态权限申请实操</h3><p>前面简介写完了，下面开始实操，申请权限主要分为以下几个步骤：</p>
<ul>
<li>检查是否拥有权限</li>
<li>如果以前用户拒绝过，提示</li>
<li>申请权限</li>
<li>在回调中查看是否申请成功</li>
</ul>
<p>首先是检查和申请权限，虽然步骤是以上所述，但是代码比较简单，就不一一拆开了，代码中的注释都比较详细。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> permission = ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">        Manifest.permission.CAMERA);</span><br><span class="line">            <span class="keyword">if</span> (permission == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">    <span class="comment">// 有此权限</span></span><br><span class="line">    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;已经具有该权限，无需再申请&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 无此权限,申请权限</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">            Manifest.permission.CAMERA)) &#123;</span><br><span class="line">        <span class="comment">// 如果之前请求过权限但用户拒绝了请求</span></span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;请求相机权限，将用于拍照&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                        <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 请求权限</span></span><br><span class="line">        ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> REQUEST_CAMERA:</span><br><span class="line">            <span class="comment">// 如果请求被取消了，result数组将是空的</span></span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="comment">// 成功申请该权限</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;成功申请相机权限&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;您已拒绝该权限，无法使用相机功能 GG，请手动打开该权限&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的 <code>shouldShowRequestPermissionRationale</code> 方法会返回一个布尔值，这个方法返回值的规则如下：</p>
<ul>
<li>如果之前请求过此权限但用户拒绝了请求，将返回 true</li>
<li>如果用户在过去拒绝了请求，并在权限请求系统对话框中选择了Don’t ask again，此方法将返回false。</li>
<li>如果设备规范禁止应用具有该权限，返回false</li>
</ul>
<p>我这个代码的基本流程和文档中是一致的，后来在测试的时候发现第一次请求也会走false那个选项，如果我拒绝了这个权限，后续就不会再有权限申请弹窗了，在申请权限的时候系统会自动拒绝。所以我觉得正确的做法应该是在回调中判断权限被拒绝时使用<code>shouldShowRequestPermissionRationale</code>方法，如果返回false则打开设置界面让用户去打开权限。当然，由于国产手机的各种系统定制。。。打开权限设置界面可能并不是一个非常轻松的过程……需要适配……这里就不做这件事了。</p>
<h2 id="RxPermission"><a href="#RxPermission" class="headerlink" title="RxPermission"></a>RxPermission</h2><p>上面的权限申请相对来说还是比较繁琐的，接下来介绍一下三方RxPermission，从Rx这俩字你应该可以看出来，这玩意是需要依赖RxJava的。不过对于现在的应用开发来说，RxJava，Okhttp几乎都是标配了，所以说我觉得问题不大，依赖如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rxpermission</span></span><br><span class="line">compile <span class="string">&#x27;com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar&#x27;</span></span><br><span class="line"><span class="comment">// rxjava</span></span><br><span class="line">compile <span class="string">&#x27;io.reactivex.rxjava2:rxjava:2.1.2&#x27;</span></span><br><span class="line"><span class="comment">// rxandroid</span></span><br><span class="line">compile <span class="string">&#x27;io.reactivex.rxjava2:rxandroid:2.0.1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>申请权限代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RxPermissions rxPermissions = <span class="keyword">new</span> RxPermissions(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">            rxPermissions.request(Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Boolean&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(<span class="meta">@io</span>.reactivex.annotations.NonNull Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(<span class="meta">@io</span>.reactivex.annotations.NonNull Boolean isGranted)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isGranted) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;权限申请成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;权限申请失败，用户拒绝了此权限&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="meta">@io</span>.reactivex.annotations.NonNull Throwable e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;权限申请失败，代码异常&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然了，如果你希望在权限被拒绝时进行进一步的操作，可以使用如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rxPermissions</span><br><span class="line">    .requestEach(Manifest.permission.CAMERA,</span><br><span class="line">             Manifest.permission.READ_PHONE_STATE)</span><br><span class="line">    .subscribe(permission -&gt; &#123; <span class="comment">// will emit 2 Permission objects</span></span><br><span class="line">        <span class="keyword">if</span> (permission.granted) &#123;</span><br><span class="line">           <span class="comment">// `permission.name` is granted !</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permission.shouldShowRequestPermissionRationale)</span><br><span class="line">           <span class="comment">// Denied permission without ask never again</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// Denied permission with ask never again</span></span><br><span class="line">           <span class="comment">// Need to go to the settings</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>恩，是的，下面一段代码是从仓库上复制来的。。。好了，不要在意这些细节，接着看一下关于File uri 在 Android N 上引发异常的适配。</p>
<h2 id="7-0-适配-File-Uri"><a href="#7-0-适配-File-Uri" class="headerlink" title="7.0 适配 File Uri"></a>7.0 适配 File Uri</h2><p>这里拿拍照作为例子，平时我们调用系统相机实现拍照功能代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;SD卡状态异常&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> dateTaken = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 图像名称</span></span><br><span class="line">    CharSequence fileName = DateFormat.format(<span class="string">&quot;yyyy-MM-dd kk.mm.ss&quot;</span>, dateTaken);</span><br><span class="line">    <span class="comment">// 图像路径</span></span><br><span class="line">    String path = Environment.getExternalStorageDirectory().toString() +</span><br><span class="line">            File.separator + <span class="string">&quot;forpermission&quot;</span> + File.separator + fileName + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    File imageFile = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!imageFile.getParentFile().exists()) &#123;</span><br><span class="line">        imageFile.getParentFile().mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!imageFile.exists()) <span class="keyword">try</span> &#123;</span><br><span class="line">        imageFile.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据文件解析出文件对应的Uri</span></span><br><span class="line">    Uri uri = Uri.fromFile(imageFile);</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</span><br><span class="line">    <span class="comment">// 判断是否有 Activity 能处理 intent</span></span><br><span class="line">    <span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        startActivityForResult(intent, REQUEST_TAKE_PHOTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(resultCode == RESULT_OK)&#123;</span><br><span class="line">        <span class="keyword">if</span>(requestCode == REQUEST_TAKE_PHOTO)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;拍照成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 7.0 以前运行这段代码是没问题的，那么在 7.0 之后呢？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-44da28d33d0f727d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异常"></p>
<p>抛出了 FileUriExposedException 异常，恩，直接crash，心里相想必有一万头草泥马奔腾而过吧。解释<a href="https://developer.android.com/about/versions/nougat/android-7.0-changes.html">官网</a>上也有，Android 7.0 行为变更，中这段话描述了原因：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d7e16bd796341ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原因"></p>
<p>行，你说用什么就用什么。接下来先详细的记录一下操作过程，之后再解释一下细节。首先在清单文件中声明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;android.support.v4.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;com.xiasuhuei321.studyforpermission.takePhotoN&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">&quot;@xml/file_paths&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>接下来新建xml包并新建file_paths xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">&quot;.&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-files-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;camera_photo&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">&quot;/storage/emulated/0/forpermission/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>拍照代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;SD卡状态异常&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> dateTaken = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 图像名称</span></span><br><span class="line">CharSequence fileName = DateFormat.format(<span class="string">&quot;yyyy-MM-dd kk.mm.ss&quot;</span>, dateTaken);</span><br><span class="line"><span class="comment">// 图像路径</span></span><br><span class="line">String path = Environment.getExternalStorageDirectory().toString() +</span><br><span class="line">        File.separator + <span class="string">&quot;forpermission&quot;</span> + File.separator + fileName + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">File imageFile = <span class="keyword">new</span> File(path);</span><br><span class="line"><span class="keyword">if</span> (!imageFile.getParentFile().exists()) &#123;</span><br><span class="line">    imageFile.getParentFile().mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!imageFile.exists()) <span class="keyword">try</span> &#123;</span><br><span class="line">    imageFile.createNewFile();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据文件解析出文件对应的Uri</span></span><br><span class="line">Uri uri = FileProvider.getUriForFile(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">        <span class="string">&quot;com.xiasuhuei321.studyforpermission.takePhotoN&quot;</span>, imageFile);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</span><br><span class="line"><span class="comment">// 判断是否有 Activity 能处理 intent</span></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    startActivityForResult(intent, REQUEST_TAKE_PHOTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>恩，留个小坑，操作流程写了，余下的具体解析待填。<br>好了，决定不填了，就是这么任性，哈哈哈哈哈哈哈。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>权限适配</tag>
        <tag>Uri适配</tag>
        <tag>实际需求</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio卡顿</title>
    <url>/2017/07/24/Android%20Studio%E5%8D%A1%E9%A1%BF/</url>
    <content><![CDATA[<p>最近一段时间公司项目越来越大，编译运行很久不说，写代码的时候也会经常性的发生卡顿。讲道理不应该的，内存16G+ssd怎么说也不该这么卡的。于是抱着试一试的心态搜了一下，在知乎看到了解决方法：<a href="https://www.zhihu.com/question/32282404">https://www.zhihu.com/question/32282404</a></p>
<p>解释就是虽然内存16G，但是默认设置不会用到那么多内存的，我看了一下我的配置，默认只会用1G。于是在项目越来越大之后，可能会频繁的触发GC（话说idea也是java开发的吧），自然就会卡顿。于是将之设置为4G。卡顿情况明显好转。</p>
<p>说一下配置的方法吧，我是Mac，首先找到Android Studio的目录，我是在Application中的，进入如下目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Applications/Android Studio.app/Contents/bin</span><br></pre></td></tr></table></figure>
<p>当然，这是我用pwd输出的目录，你直接用这个是不行的，因为空格需要转义。你可以自己输加上tab自动补全，非常方便。</p>
<span id="more"></span>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c76775cab546fabe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图"></p>
<p>图上标红的就是我们需要修改的文件，可以用vim来修改，我设置的参数如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-0e8ccca3643bfa7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置"><br>最后一行我猜想是用户接口，可以从外部配置，不过，恩我这里就不管了。修改之后，记得点击as的File -&gt; Invalidate Caches / Restart 听说不点这个可能会导致as打不开。。。</p>
<p>之后就没那么卡了，nice。</p>
<p>刚收到小伙伴的重要通知：这文件注释里写了，说不要直接改。我看这玩意也没啥内容，就直接改了……可以在as的Help -&gt; Edit Custom VM Options来修改，可以安全的修改。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>填坑</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 增量更新（使用CMake编译）</title>
    <url>/2018/09/03/Android%20%E5%A2%9E%E9%87%8F%E6%9B%B4%E6%96%B0%EF%BC%88%E4%BD%BF%E7%94%A8CMake%E7%BC%96%E8%AF%91%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期公司的 App 版本迭代比较快，经常发新版本，但实际上就我自己来说，手机里的 App 不到不能用的时候我是不会更新的，我们前期的解决方案就是强制更新，不更新不让用，以前我们用户少的时候还能这么干，用户量上去还这么干，基本等于劝退那些不怎么愿意更新的用户。所以近期研究的技术点是 热修复 与 增量更新。热修复可以不用因为更改 Bug 而专门发布新版本，增量更新可以让用户在不得不更新的时候可以少花一些流量。热更新最近的接入测试流程都过的差不多了，比我想象的要顺利一些，不过我接入的是 Tinker，操作起来还是挺麻烦的，同事去看 Sophix 了，Sophix 是无侵入的接入，感觉打包什么的操作应该会简单很多。回归正题，本文是参考了很多文章最后经过实践得出的，因为一些文章的时间比较久远，我在实践的时候也碰到了很多问题，查资料也不太好查，最后想了想还是用 CMake 去编译，最后跑通了整个流程。</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>增量更新实际上就是使用工具比对新老 apk，得出一个补丁，用户的是老版本的 apk，在下载完增量包之后与自身 apk 合成一个新的apk，然后再次安装（是的，需要重新安装，所以不是热修复，做不到无感）。整个过程实际上我们都是使用的现成的轮子，客户端需要做的就是：</p>
<ul>
<li>获得用户当前应用的 apk</li>
<li>获取增量包</li>
<li>将老 apk 与增量包合并生成新 apk</li>
<li>合并完成后安装</li>
</ul>
<p>其中生成增量包与合并是难点，但是并不需要我们自己去实现，已经有工具替我们实现了。就是 bsdiff 和 bzip，当然我在看 <a href="https://blog.csdn.net/lmj623565791/article/details/52761658">鸿洋大神</a> 的这篇文章的时候，bzip 下载已经凉了，那个页面我也实在没看懂在哪下，最后是在鸿洋大神的代码仓库里复制出来的。</p>
<h2 id="生成增量包"><a href="#生成增量包" class="headerlink" title="生成增量包"></a>生成增量包</h2><p>首先去下载工具：</p>
<ul>
<li><a href="http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz">http://www.daemonology.net/bsdiff/bsdiff-4.3.tar.gz</a></li>
</ul>
<p>下载完之后解压，使用终端（我是 Mac）进入解压后的文件夹，执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure>

<p>make 命令会读入所有的 Makefile 并执行，但是在执行目录下的 Makefile 会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Makefile:13: *** missing separator.  Stop.</span><br></pre></td></tr></table></figure>

<p>我搜到的解决方法是在倒数第一行和第三行加 TAB，我在网上搜到的资料说没有缩进会识别成条件判断符，有缩进会认为他是一个普通的 shell 脚本，当然到底是为什么，我这里并没有深追下去了。</p>
<p>继续执行 make 命令，会生成一个 bsdiff 的文件，之后会报错，我们这里只需要这个，没有生成的那个是合并老版本与增量包的东西。我们这里并不需要，因为合成新包的步骤是在客户端完成的。这里生成 bsdiff 就暂时告一段落，之后我们会利用这个工具来生成增量包，接下来在项目中引入 bzip，用于合成新的 apk。</p>
<h2 id="集成合并工具"><a href="#集成合并工具" class="headerlink" title="集成合并工具"></a>集成合并工具</h2><p>首先新建一个项目，勾上支持 Kotlin 和 C++，之后都选默认的，创建好项目之后是这样的：</p>
<p><img src="http://xiasuhuei321.com/images/blog/zengliang_project.png" alt="目录"></p>
<p>之前说了 bzip 这玩意我没弄懂怎么下源码，于是去鸿洋大神的 demo 里 copy 了一下，当然，这里我会放上我的 <a href="https://github.com/ForgetAll/IncrementApk/tree/master">demo</a> 地址，毕竟你是在看我的文，用我的 demo 不过分。将之前下载 bsdiff 中的 bspatch.c 拷贝到项目的 cpp 文件夹中，再将整个 bzip 拷贝到 cpp 文件夹中，由于我们这里是使用 CMake 来编译，所以需要在自动生成的 CMakeLists.txt 中加入我们的配置，这里把我写的配置直接整个的放上来：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For more information about using CMake with Android Studio, read the</span></span><br><span class="line"><span class="comment"># documentation: https://d.android.com/studio/projects/add-native-code.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets the minimum version of CMake required to build the native library.</span></span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line">include_directories(src/main/cpp/bzip2/bzlib.h</span><br><span class="line">src/main/cpp/bzip2/bzlib_private.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates and names a library, sets it as either STATIC</span></span><br><span class="line"><span class="comment"># or SHARED, and provides the relative paths to its source code.</span></span><br><span class="line"><span class="comment"># You can define multiple libraries, and CMake builds them for you.</span></span><br><span class="line"><span class="comment"># Gradle automatically packages shared libraries with your APK.</span></span><br><span class="line"></span><br><span class="line">add_library( <span class="comment"># Sets the name of the library.</span></span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             <span class="comment"># Sets the library as a shared library.</span></span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             <span class="comment"># Provides a relative path to your source file(s).</span></span><br><span class="line">             src/main/cpp/native-lib.cpp</span><br><span class="line">             src/main/cpp/bspatch.c</span><br><span class="line">             src/main/cpp/bzip2/blocksort.c</span><br><span class="line">             src/main/cpp/bzip2/bzip2.c</span><br><span class="line">             src/main/cpp/bzip2/bzip2recover.c</span><br><span class="line">             src/main/cpp/bzip2/bzlib.c</span><br><span class="line">             src/main/cpp/bzip2/compress.c</span><br><span class="line">             src/main/cpp/bzip2/crctable.c</span><br><span class="line">             src/main/cpp/bzip2/decompress.c</span><br><span class="line">             src/main/cpp/bzip2/dlltest.c</span><br><span class="line">             src/main/cpp/bzip2/huffman.c</span><br><span class="line">             src/main/cpp/bzip2/mk251.c</span><br><span class="line">             src/main/cpp/bzip2/randtable.c</span><br><span class="line">             src/main/cpp/bzip2/spewG.c</span><br><span class="line">             src/main/cpp/bzip2/unzcrash.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Searches for a specified prebuilt library and stores the path as a</span></span><br><span class="line"><span class="comment"># variable. Because CMake includes system libraries in the search path by</span></span><br><span class="line"><span class="comment"># default, you only need to specify the name of the public NDK library</span></span><br><span class="line"><span class="comment"># you want to add. CMake verifies that the library exists before</span></span><br><span class="line"><span class="comment"># completing its build.</span></span><br><span class="line"></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies libraries CMake should link to your target library. You</span></span><br><span class="line"><span class="comment"># can link multiple libraries, such as libraries you define in this</span></span><br><span class="line"><span class="comment"># build script, prebuilt third-party libraries, or system libraries.</span></span><br><span class="line"></span><br><span class="line">target_link_libraries( <span class="comment"># Specifies the target library.</span></span><br><span class="line">                       native-lib</span><br><span class="line"></span><br><span class="line">                       <span class="comment"># Links the target library to the log library</span></span><br><span class="line">                       <span class="comment"># included in the NDK.</span></span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>

<p>这里需要在 bspatch.c 中加入我们的一些东西：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jint</span></span><br><span class="line"><span class="function">JNICALL <span class="title">Java_com_xiasuhuei321_incrementapk2_MainActivity_bspatch</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *env, jclass cls,</span></span></span><br><span class="line"><span class="params"><span class="function">         jstring old, jstring <span class="keyword">new</span>, jstring patch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span> *argv[argc];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">&quot;bspatch&quot;</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = (<span class="keyword">char</span> *) ((*env)-&gt;GetStringUTFChars(env, old, <span class="number">0</span>));</span><br><span class="line">    argv[<span class="number">2</span>] = (<span class="keyword">char</span> *) ((*env)-&gt;GetStringUTFChars(env, <span class="keyword">new</span>, <span class="number">0</span>));</span><br><span class="line">    argv[<span class="number">3</span>] = (<span class="keyword">char</span> *) ((*env)-&gt;GetStringUTFChars(env, patch, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = patchMethod(argc, argv);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, old, argv[<span class="number">1</span>]);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, <span class="keyword">new</span>, argv[<span class="number">2</span>]);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, patch, argv[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里的 Java_com_xiasuhuei321_incrementapk2_MainActivity_bspatch 是有一定命名规律的，用过 jni 的同学应该知道这玩意可以通过 javah -d 的命令来为带有 native 的 class 文件生成 .h 的头文件。这里不深究，总是就是我在这个包底下的 MainActivity 里写了一个 native（kotin 中是 extern）方法叫 bspatch，方法里拿到了传入的三个参数，调用了 bspatch 的 patchMethod，最后释放了字符串资源。这里的方法名一定要写对，不然运行的时候会报错，大意是没有人实现你的 native 方法。接下来看 MainActivity 代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.incrementapk2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.net.Uri</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.os.Environment</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.FileProvider</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> com.tbruyelle.rxpermissions2.RxPermissions</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        RxPermissions(<span class="keyword">this</span>).request(Manifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">                .subscribe&#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> destApk = File(Environment.getExternalStorageDirectory(), <span class="string">&quot;dest.apk&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> patch = File(Environment.getExternalStorageDirectory(), <span class="string">&quot;xxx/PATCH.patch&quot;</span>)</span><br><span class="line"></span><br><span class="line">        patchApkBtn.setOnClickListener &#123;</span><br><span class="line">            Thread &#123;</span><br><span class="line">                bspatch(applicationInfo.sourceDir, destApk.absolutePath, patch.absolutePath)</span><br><span class="line">                runOnUiThread &#123; installApk(destApk) &#125;</span><br><span class="line">            &#125;.start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the &#x27;native-lib&#x27; native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">external</span> <span class="function"><span class="keyword">fun</span> <span class="title">stringFromJNI</span><span class="params">()</span></span>: String</span><br><span class="line"></span><br><span class="line">    <span class="keyword">external</span> <span class="function"><span class="keyword">fun</span> <span class="title">bspatch</span><span class="params">(oldPth: <span class="type">String</span>, newPath: <span class="type">String</span>, path: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Used to load the &#x27;native-lib&#x27; library on application startup.</span></span><br><span class="line">        <span class="keyword">init</span> &#123;</span><br><span class="line">            System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">installApk</span><span class="params">(file: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> f = file</span><br><span class="line"><span class="comment">//            val f = File(&quot;sdcard/remeet/apk/remeet.apk&quot;)</span></span><br><span class="line">            <span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                <span class="keyword">val</span> apkUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">&quot;<span class="subst">$&#123;applicationInfo.packageName&#125;</span>.installapk.provider&quot;</span>, f)</span><br><span class="line">                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class="line">                intent.setDataAndType(apkUri, <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                intent.setDataAndType(Uri.fromFile(f), <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            startActivity(intent)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比较简单，界面一共就一个按钮和一个文字，文字显示版本（我自己乱填的），按钮点击会触发合并补丁的事件。当然，因为我自己的手机是8.0的，我要看效果是能简单适配一下了，各位如果代码跑不起来可以看看我的清单文件申请的权限，和对于7.0的适配。然后自己这里打两个不同的包，一个是 old 一个是 new ，之后进入 bsdiff 的目录，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./bsdiff old.apk new.apk PATCH.patch</span></span><br></pre></td></tr></table></figure>

<p>之后将这个 PATCH.patch 用 adb push 命令推到自己在代码中指定的目录，就可以开始尝试合成补丁了~</p>
<p>最后是跑起来了：</p>
<p><img src="http://xiasuhuei321.com/images/blog/zengilang_screen.png" alt="跑起来了"></p>
<p>当然，这只是一个 Demo，需要你自己去完善整个流程，我这里只是演示了合成补丁包并重新安装的部分。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android CMake 不生成头文件报错</title>
    <url>/2017/08/26/Android%20CMake%20%E4%B8%8D%E7%94%9F%E6%88%90%E5%A4%B4%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>以前尝试Android中调用C/C++代码，都是自己写一个带native方法的类，然后自己通过命令生成一个头文件，然后再用一个C/C++文件include这个头文件。就一直都很疑惑为毛现在Android Studio点了include c++之后没有生成头文件的操作。最近动手尝试了一波，把原来项目里的native-lib.cpp删掉，将CMake.txt中的native-lib.cpp全部换成了自己的hello.cpp。最后运行的时候却报错了，很奇怪，为毛呢？自己生成了一个头文件放到cpp目录底下，又不报错了……</p>
<p>当时真是感觉日了狗了，为毛他不需要头文件，偏偏我要？后来网上搜了一下，看到这么一句话：</p>
<blockquote>
<p>在Java中调用JNI接口时，出现异常，察看日志，发现有如下错误：<br>WARN/dalvikvm(422): No implementation found for native Lcom/whty/wcity/HelixPlayer;.setDllPath (Ljava/lang/String;)V<br>检查了几遍代码，Cpp中确实定义了这个接口，而且仔细对照了Java的包名、类名，确实没有错误，那为什么会出现这种问题呢。后来突然想到，JNI接口 都是以C的方式定义的，现在使用C++实现，函数定义前是否需要加上extern “C”呢？</p>
</blockquote>
<p>看完就感觉不对头了，果然我自己的cpp中没有extern “C”这句话，而生成的头文件都是有的。我重新建了一个include c++的项目，比对了一下，果然也是有这句话的。于是加了这句话，可以不生成头文件了。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>JNI</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-NDK学习（2）</title>
    <url>/2017/08/26/Android-NDK%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文需要一些<code>CMake</code> 和 <code>JNI</code>的基础知识，对于CMake的使用推荐Android官网的<a href="https://developer.android.com/ndk/guides/index.html?hl=zh-cn">NDK入门</a>。CMake是Android Studio 2.2以上新增的支持原生编程的工具，CMake是一个跨平台的编译工具，可以用简单的语句描述所有平台的编译过程。恩，暂时先记一下吧，本文现处于自嗨状态，不适合作为各位将之作为NDK的学习资料。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>在创建项目时勾选include c++，在项目创建完毕，文件目录如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-16587b93a2ceca12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>可以看到，可以看到app目录下有一个CMakeLists.txt，我在这个txt里加了一些注释</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For more information about using CMake with Android Studio, read the</span><br><span class="line"># documentation: https://d.android.com/studio/projects/add-native-code.html</span><br><span class="line"></span><br><span class="line"># Sets the minimum version of CMake required to build the native library.</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"># Creates and names a library, sets it as either STATIC</span><br><span class="line"># or SHARED, and provides the relative paths to its source code.</span><br><span class="line"># You can define multiple libraries, and CMake builds them for you.</span><br><span class="line"># Gradle automatically packages shared libraries with your APK.</span><br><span class="line"># 增加cpp动态共享库</span><br><span class="line">add_library( # Sets the name of the library.</span><br><span class="line">             hello</span><br><span class="line"></span><br><span class="line">             # Sets the library as a shared library.</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             # Provides a relative path to your source file(s).</span><br><span class="line">             src/main/cpp/hello.cpp )</span><br><span class="line"></span><br><span class="line"># Searches for a specified prebuilt library and stores the path as a</span><br><span class="line"># variable. Because CMake includes system libraries in the search path by</span><br><span class="line"># default, you only need to specify the name of the public NDK library</span><br><span class="line"># you want to add. CMake verifies that the library exists before</span><br><span class="line"># completing its build.</span><br><span class="line"></span><br><span class="line">find_library( # Sets the name of the path variable.</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # Specifies the name of the NDK library that</span><br><span class="line">              # you want CMake to locate.</span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"># Specifies libraries CMake should link to your target library. You</span><br><span class="line"># can link multiple libraries, such as libraries you define in this</span><br><span class="line"># build script, prebuilt third-party libraries, or system libraries.</span><br><span class="line"></span><br><span class="line"># 生成链接动态库</span><br><span class="line">target_link_libraries( # Specifies the target library.</span><br><span class="line">                       hello</span><br><span class="line"></span><br><span class="line">                       # Links the target library to the log library</span><br><span class="line">                       # included in the NDK.</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>
<p>如果你有多个cpp动态共享库，可以再添加一个add_library。在app的build.gradle中也有相关的配置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;</span><br><span class="line">        path <span class="string">&quot;CMakeLists.txt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于CMake更详细的配置参见：<a href="https://developer.android.com/ndk/guides/cmake.html?hl=zh-cn">https://developer.android.com/ndk/guides/cmake.html?hl=zh-cn</a></p>
<p>可以看到我的CMake文件中添加的动态库为hello，这里在Java文件中创建一个JNI入口类，叫做JNIEntry：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.forjni.entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/8/26.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIEntry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例域</span></span><br><span class="line">    <span class="keyword">public</span> String TAG1 = <span class="string">&quot;JNIEntry_INSTANCE&quot;</span>;</span><br><span class="line">    <span class="comment">// 静态域</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG2 = <span class="string">&quot;JNIEntry_STATIC&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;JNIEntry&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStaticMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.e(TAG,<span class="string">&quot;静态测试方法被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testInstanceMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.e(TAG,<span class="string">&quot;实例测试方法被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从C++获取字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将大写字符串转成小写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 小写字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">toLowCase</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">changeArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessField</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessMethod</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hello-cpp完整代码"><a href="#hello-cpp完整代码" class="headerlink" title="hello.cpp完整代码"></a>hello.cpp完整代码</h2><p>这里再记一下c++源码，方便以后自己查阅<br>cpp源码：hello.cpp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xiasuhuei321 on 2017/8/25.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_forjni_entry_JNIEntry_stringFromJNI</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用c字符串创建Java字符串</span></span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;jni&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="comment">// 在内存溢出的情况下，返回NULL</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_forjni_entry_JNIEntry_toLowCase</span><span class="params">(JNIEnv *env, jclass type, jstring str_)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为了在原生代码中使用Java字符串，需要先将Java字符串转换成C字符串</span></span><br><span class="line">    <span class="comment">// 这个函数可以将Unicode格式的Java字符串转换成C字符串</span></span><br><span class="line">    <span class="comment">// 第二个参数指定了是指向堆内原有对象还是拷贝一份新的对象</span></span><br><span class="line">    <span class="comment">// 这种获取的字符串只读</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = env-&gt;GetStringUTFChars(str_, JNI_FALSE);</span><br><span class="line">    <span class="comment">// 获取字符串长度</span></span><br><span class="line">    jint length = env-&gt;GetStringLength(str_);</span><br><span class="line">    <span class="keyword">char</span> strs[length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里必须要这么复制，自己手动改会有一个特殊字符（猜测是结尾的符号），</span></span><br><span class="line">    <span class="comment">// 在生成UTF字符串的时候会报错</span></span><br><span class="line">    <span class="built_in">strcpy</span>(strs, str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = str[i];</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            strs[i] = (<span class="keyword">char</span>) (c + <span class="number">32</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strs[i] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;jni&quot;</span>, <span class="string">&quot;%s&quot;</span>, strs);</span><br><span class="line">    <span class="comment">// 释放JNI函数返回的C字符串</span></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(str_, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(strs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_forjni_entry_JNIEntry_changeArray</span><span class="params">(JNIEnv *env, jclass type,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                        jintArray array_)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将Java数组复制到C数组中</span></span><br><span class="line"><span class="comment">//    env-&gt;GetIntArrayRegion()</span></span><br><span class="line">    <span class="comment">// 从C数组向Java数组提交所做的修改</span></span><br><span class="line"><span class="comment">//    env-&gt;SetIntArrayRegion()</span></span><br><span class="line">    <span class="comment">// 获取指向数组元素的直接指针</span></span><br><span class="line">    jint *value = env-&gt;GetIntArrayElements(array_, <span class="literal">NULL</span>);</span><br><span class="line">    jint length = env-&gt;GetArrayLength(array_);</span><br><span class="line">    <span class="comment">// 这里对每个元素做+1操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        value[i] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;ReleaseIntArrayElements(array_, value, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_forjni_entry_JNIEntry_accessField</span><span class="params">(JNIEnv *env, jclass type,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                        jobject instance)</span> </span>&#123;</span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">// JNI提供了用域ID访问两类域的方法，可以通过给定实例的class对象获取域ID</span></span><br><span class="line">    <span class="comment">// 用GetObjectClass函数可以获得class对象</span></span><br><span class="line">    <span class="comment">// 获取id</span></span><br><span class="line">    jfieldID instanceFieldId = env-&gt;GetFieldID(clazz, <span class="string">&quot;TAG1&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取属性值</span></span><br><span class="line">    jstring jstr_value = (jstring) env-&gt;GetObjectField(instance, instanceFieldId);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ch_value = env-&gt;GetStringUTFChars(jstr_value, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;jni&quot;</span>, <span class="string">&quot;%s&quot;</span>, ch_value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取id</span></span><br><span class="line">    jfieldID staticFieldId = env-&gt;GetStaticFieldID(clazz, <span class="string">&quot;TAG2&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取属性值</span></span><br><span class="line">    jstring static_value = (jstring) env-&gt;GetStaticObjectField(clazz, staticFieldId);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *st_value = env-&gt;GetStringUTFChars(static_value, <span class="literal">NULL</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;jni&quot;</span>, <span class="string">&quot;%s&quot;</span>, st_value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_forjni_entry_JNIEntry_accessMethod</span><span class="params">(JNIEnv *env, jclass type,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                         jobject obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取class对象</span></span><br><span class="line">    jclass clazz = env-&gt;GetObjectClass(obj);</span><br><span class="line">    <span class="comment">// 获取方法id</span></span><br><span class="line">    jmethodID i_id = env-&gt;GetMethodID(clazz, <span class="string">&quot;testInstanceMethod&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    jmethodID s_id = env-&gt;GetStaticMethodID(clazz, <span class="string">&quot;testStaticMethod&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用实例方法</span></span><br><span class="line">    env-&gt;CallVoidMethod(obj, i_id);</span><br><span class="line">    <span class="comment">// 调用静态方法</span></span><br><span class="line">    env-&gt;CallStaticVoidMethod(clazz,s_id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>凑个字数</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>NDK学习</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-NDK学习（1）</title>
    <url>/2017/07/06/Android-NDK%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近这两天非常烦躁，移植A项目的功能到B项目里，中间牵扯到的种种资源什么的就不说了，有耐心慢慢剥离就行。中间有一个so库一直加载失败，我真的是日了狗了，尝试了各种办法还是不行。最后用了他的sample里的东西作为module导入才解决，但是我觉得这并不算特别完美的解决办法，唉，没办法，对ndk了解的还是太少，从现在开始做相应的了解。</p>
<h2 id="第一个总是Hello-World"><a href="#第一个总是Hello-World" class="headerlink" title="第一个总是Hello World"></a>第一个总是Hello World</h2><p>Android Studio在现在的版本可以非常方便的生成一个带jni的项目，只要在创建的时候勾选一个include c++ 那玩意就行了。不过对于我这种刚接触的人来说，还是要自己折腾一下。</p>
<p>首先是配置ndk开发环境，其实也没什么要配置的，一顿下载就ok了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f19b7033fc33b0ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ndk"></p>
<span id="more"></span>

<p>这俩玩意勾选上，等他慢慢下吧。下完之后设置一下ndk的路径：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-77e362c2ceb263a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="路径"></p>
<p>配置好了路径之后，我们创建一个普通的android项目，恩，不勾选c++那个选项，自己慢慢折腾。项目创建完毕之后，正确的项目目录是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-7a277db33a2acb3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录"></p>
<p>当然你并没有jni这个目录，可以自己创建一个：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9987bcf6c0b51819.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建jni目录"></p>
<p>创建完之后在MainActivity中声明一个native方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getHelloWorldStr</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>选中这个函数按alt+enter(mac为option + return，即android studio自动提示），点击第一个选项：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-0d4594169209d291.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建源文件"></p>
<p>生成.c文件源码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_studyforndk2_MainActivity_getHelloWorldStr</span><span class="params">(JNIEnv *env, jclass type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中”Hello World!”字符串是我自己根据需要改成那样的，现在不去深究c语言代码的意思，只管走通整个流程。用过jni的人应该知道，用jni需要根据用户自己的class文件生成一个.h头文件，在Android中也是需要这个头文件的。在android studio中怎么生成这个头文件我也是头疼了一会，因为也没去了解过as把class文件输出到哪个目录了，好在后来找到了一个生成的方法。首先打开android studio中自带的Terminal，打开就已经在项目根目录中了，省的自己一个一个的去切换了。windows用户可以用dir查看目录下有哪些文件和文件夹，mac、Linux用户可以用ls查看。进入项目的/src/main/java 目录下，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javah -d ../jni com.xiasuhuei321.studyforndk2.MainActivity</span><br></pre></td></tr></table></figure>
<p>这样就在jni目录下生成了一个.h头文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-e5ae99b014577c01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="头文件"></p>
<p>在c文件中加入这个头文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;com_xiasuhuei321_studyforndk2_MainActivity.h&gt;</span><br></pre></td></tr></table></figure>
<p>接着在MainActivity中加载我们的库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">        System.loadLibrary(&quot;JNI_ANDROID_TEST&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>static代码块可以保证我们的代码在实例创建之前就被执行。在Android中生成的so一般都是有lib前缀的，比如我上面用的这个名字，生成的so就会是libJNI_ANDROID_TEST.so这个名字。最后在项目app的build.gradle中的defaultConfig中加入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndk&#123;</span><br><span class="line">    moduleName &quot;JNI_ANDROID_TEST&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这句话指定编译生成so的名字，至于通过这种方式生成的so目录位置，我找了一下，在这个位置：/app/build/intermediates/ndk/debug/lib/</p>
<p>lib中有七个abi目录，可以根据自己的需求指定abiFilter，不用生成那么多so。如果你对Android中的CPU架构和ABI不是非常清楚，可以自行去查阅资料。</p>
<p>java调用native方法代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tv_text = (TextView) findViewById(R.id.tv_text);</span><br><span class="line">tv_text.setText(getHelloWorldStr());</span><br></pre></td></tr></table></figure>

<p>最后免不了看一下结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-da652b503b3a0e4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"><br>textview默认文字是C语言调用失败，这么一来便足以证明此次流程通了。</p>
<p>这里我感觉这头文件是不是也可以通过gradle配置来生成，毕竟每次都这么来一遭也挺麻烦的，后续如果我发现可以，就回来补充一下，没有就算了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>NDK学习</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中跨模块传递数据</title>
    <url>/2018/06/19/Android%E4%B8%AD%E8%B7%A8%E6%A8%A1%E5%9D%97%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="一个小问题"><a href="#一个小问题" class="headerlink" title="一个小问题"></a>一个小问题</h2><p>最近碰到一个有趣的情况，在做一个功能时，考虑到从零开始开发需要花费大量的时间和精力，所以选用了一个有 UI 的库，并在这个库的基础之上进行二次开发。于是在项目中引入了这个库，当然，当时已经有大部分功能开发完成了，所以 UI 有一部分在 app 这个主模块中，而一部分则依赖这个库。Android Studio 中 app 模块是可以依赖其他引入项目的库的，而库则不可以依赖 app 模块，那这就引发了一个问题：主要功能已经在 app 中开发完毕，比如用户信息模块，而这个 UI 库的一些 UI 更新和功能也需要当前的用户信息，这该怎么办呢？</p>
<h2 id="仔细分析"><a href="#仔细分析" class="headerlink" title="仔细分析"></a>仔细分析</h2><p>首先弄清楚这个问题的本质，<code>这个问题的本质上是模块依赖引发的问题</code>，仅仅是库依赖不了 app 模块的问题，所以不要用过于复杂的方法去解决，比如通过文件读写（sp文件）或者 socket 之类的。在刚开始时我第一个想到的是用 EventBus，但是想了想觉得不合适。EventBus 是一个事件发布订阅的模型，你可以想象一下这个情况：</p>
<span id="more"></span>

<ul>
<li>UI 库发送<code>请求用户信息事件</code></li>
<li>app 模块订阅了 <code>请求用户信息事件</code> </li>
<li>app 模块在收到请求后，发送 <code>返回用户信息事件</code> </li>
<li>UI 库订阅了 <code>返回用户信息事件</code> ，收到事件后解析获取相应的信息</li>
</ul>
<p>本来一来一回的操作，竟然需要四步操作，实在是有点麻烦，那有没有简单一些的方法呢？肯定是有的（废话，不然我也不会写这篇文章），再来分析一下该怎么实现：</p>
<ul>
<li>app 中引入了 UI 库，所以 app 中可以直接使用 UI 库中的代码</li>
<li>可以在 UI 库中定义一个用户接口，定义一系列自己所需要的用户信息的方法</li>
<li>在 app 模块中实现这个接口，这很容易理解，app 可以直接使用 UI 库中的代码，而且 app 模块中也可以很轻易的访问到所需要的用户信息（毕竟原有的功能就是在 app 中开发的）</li>
<li>做完上面几步，最后就是把 app 中的这个实现类注入到 UI 库中，这一步利用 Java 的多态来做到，这里放一下简单的代码</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getNickName</span><span class="params">()</span></span>: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> UserProxy &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> userImpl: UserInterface</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">injectUserImpl</span><span class="params">(userInterface: <span class="type">UserInterface</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.userImpl = userInterface</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getNickName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> userImpl.getNickName()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 UserProxy 中定义一个接口类型的属性，之后 app 调用这个注入方法，注入一个实现对象，整个流程就轻松愉快的完成了。</p>
<h2 id="所有的实现代码（不包括视图代码-Kotlin-实现）"><a href="#所有的实现代码（不包括视图代码-Kotlin-实现）" class="headerlink" title="所有的实现代码（不包括视图代码 Kotlin 实现）"></a>所有的实现代码（不包括视图代码 Kotlin 实现）</h2><p>库的接口等代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getNickName</span><span class="params">()</span></span>: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> UserProxy &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> userImpl: UserInterface</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">injectUserImpl</span><span class="params">(userInterface: <span class="type">UserInterface</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.userImpl = userInterface</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getNickName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> userImpl.getNickName()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app 中注入以及接口实现（简单实现。。。非生产代码）</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> : <span class="type">UserInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNickName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;xiasuhuei321&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> : <span class="type">Application</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        UserProxy.injectUserImpl(UserImpl())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，稍微想了想，如果从刚开始就采用组件化来进行开发的话，也许就不会存在这个问题了，在组件化开发中，app 模块只是一个壳，其他的一个个模块既是单独可运行的 app 又是一个个库，只需要通过改变配置即可实现切换。不过这也是有空的时候再去折腾了，而且这种开发模式……暂时对我来说也没什么意义，项目也没大到那种程度，编译运行的速度也还可以，完全没到忍受不了的程度，而且我觉得这种模式可能更适合开发人员比较多的情况。</p>
]]></content>
  </entry>
  <entry>
    <title>Android之回调函数</title>
    <url>/2016/05/12/Android%E4%B9%8B%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>最近对Android中的回调产生了一些疑问，看了不少博文才算是明白了一点，接下来分享一下我的收获。</p>
<p><strong>写在正文之前，大神可以跳过：</strong><br>　　1.接口不可以实例化，但可以创建一个接口对象。*注1:<br>　　2.你可能见过这样的语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button bt_add = (Button) findViewById(R.id.bt_add);</span><br><span class="line">bt_add.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>　　我们都知道OnClickListener()是一个接口，但是上文中  new OnClickListener()并非是实例化接口，而是表示一个匿名内部类实现该接口。</p>
<p>*注1：“创建一个接口对象”这样的描述并不合适，在阅读《thinking in java》的过程中，我找到了一个更合适的词——引用(reference)。当然如果你有更好的看法可以在评论中指出，我们一起来讨论。</p>
<hr>
<p>####1.回调函数定义<br>　　回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。<br>　　当然，看了这么正式的定义，其实对我来说并没有多大的帮助，毕竟对指针直接接触比较少，对于这个定义也没有多深的感受。还是直接看回调机制吧！</p>
<hr>
<p>####2.回调机制<br>⑴定义一个回调函数；<br>⑵提供函数实现的一方在初始化的时候，将回调函数的函数指针注册给调用者；<br>⑶当特定的事件或条件发生的时候，调用者使用函数指针调用回调函数对事件进行处理。</p>
<p>　　对于百度百科上的这个说法，有一股扑面而来的熟悉感，就算是“函数指针”这么个陌生的名词都挡不住。这不就是上文代码吗？onClick()方法就是回调方法，在Button被点击这个事件发生时，我们使用onClick()回调方法对事件进行处理。不同的时我们不能提供指针，而是提供了一个接口。事实上在java中正是通过接口来实现回调方法。</p>
<hr>
<p>####3.模拟自定义控件实现回调方法<br>　　网上很多用打电话的例子来说明，而我最近刚看了一点自定义控件，有点感觉，就用控件来说明。<br>　　假设我现在自定义了一个继承于View的开关控件，什么onMeasure()，onDraw()之类的都写好了，不用关心了，而且这个开关需要我关心的就是他是开还是关的状态。这时候我们就需要一个回调方法，将开关的“开”和“关”状态传递出来。好，你大概了解了功能和需求，以下是模拟控件的代码，并非可以部署到真机上的代码：</p>
<p><strong>接口代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态变化监听</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StateChangeListener</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 回调方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">StateChange</span><span class="params">(<span class="keyword">boolean</span> State)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>开关控件代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义开关--!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenClose</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 持有一个接口对象</span></span><br><span class="line">	StateChangeListener stateChangeListener;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 提供注册事件监听的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnChangeListener</span><span class="params">(StateChangeListener stateChangeListener)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.stateChangeListener = stateChangeListener;</span><br><span class="line">        <span class="comment">//因为是模拟，所以需要在此将控件状态传出</span></span><br><span class="line">		IsClick(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//是否被点击</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsClick</span><span class="params">(<span class="keyword">boolean</span> isClick)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 通过接口对象传控件状态</span></span><br><span class="line">		stateChangeListener.StateChange(isClick);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBackTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		OpenClose oc = <span class="keyword">new</span> OpenClose();</span><br><span class="line">		oc.setOnChangeListener(<span class="keyword">new</span> StateChangeListener() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StateChange</span><span class="params">(<span class="keyword">boolean</span> State)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (State) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;开&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;关&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我这还可以提供一张图，你可以很直观的感受到这是个什么样的控件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c1a657e7ad78d465.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="别打我……"></p>
<p>以上就是我的收获，如果错误或者不同的看法和见解欢迎指出。</p>
<hr>
<blockquote>
<p><strong>回调函数定义和机制来自：</strong><a href="http://baike.baidu.com/link?url=95tuwFdMDbPr5IDqLrJoXKDaEcyv9c85ALl6o_GW_Y9-GF_GdHDswxHG-HcZEeuEiWMGHhtTENqokP9f6gpz3a">百度百科</a></p>
</blockquote>
<p><strong>推荐阅读:</strong></p>
<blockquote>
<p><strong>这篇文章不错:</strong>  <a href="http://blog.csdn.net/maximus_chan/article/details/40381157">java回调机制</a><br><strong>文中提到的控件的实现:</strong><a href="http://www.jianshu.com/p/7b5bbc96ad1b">Android：初识自定义控件</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Service入门到崩溃</title>
    <url>/2017/01/13/Android-Service%E5%85%A5%E9%97%A8%E5%88%B0%E5%B4%A9%E6%BA%83/</url>
    <content><![CDATA[<p>最近项目搞完了，有点空正好查漏补缺<del>关于服务这一块，一直都没怎么用过，趁着这个时机学习一下</del>至于为啥起这名呢……因为本来就想着稍微看一下Service，结果发现要看的东西越来越多……越来越多……所以就有崩了的意思……本文代码比较多，请边看边敲，碰到不懂去搜一下。</p>
<p>首先梳理一下我想要写的东西：</p>
<ul>
<li>Service基础</li>
<li>AIDL</li>
</ul>
<h2 id="什么是Service"><a href="#什么是Service" class="headerlink" title="什么是Service"></a>什么是Service</h2><p>Service是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。服务并不是一个单独的进程，除非有特殊指明，否则Service是作为application的一部分运行在相同的进程中的。服务没有分离于主线程工作，所以当你要在服务中进行耗时操作最好开启一个新的线程来执行这种操作，避免ANR。</p>
<span id="more"></span>
<h2 id="启动Service的两种方式"><a href="#启动Service的两种方式" class="headerlink" title="启动Service的两种方式"></a>启动Service的两种方式</h2><p>有两种方式启动service，一种是startService，一种是bindService，暂时从service的生命周期上来看一下这两种有何异同，先贴代码：<br>Service：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/1/11.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;TestService&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onBind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onCreate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onStartCommand&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRebind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onRebind&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onDestroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onUnbind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Activity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Intent startIntent;</span><br><span class="line">    <span class="keyword">private</span> Intent bindIntent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.bt_bind_service).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.bt_start_service).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.bt_stop_service).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.bt_unbind_service).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.bt_bind_service:</span><br><span class="line">                bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestService.class);</span><br><span class="line">                bindService(bindIntent, connection, BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.id.bt_start_service:</span><br><span class="line">                startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestService.class);</span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.id.bt_stop_service:</span><br><span class="line">                <span class="keyword">if</span> (startIntent != <span class="keyword">null</span>)</span><br><span class="line">                    stopService(startIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.id.bt_unbind_service:</span><br><span class="line">                <span class="keyword">if</span>(bindIntent != <span class="keyword">null</span>)</span><br><span class="line">                    unbindService(connection);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;onServiceConnected&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;onServiceDisconnected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml文件就不贴了，就是四个按钮，从上到下分别是bindService、startService、unbindService、stopService两两对应，样子如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-76c7ebd486f7c48a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>最后别忘了在清单文件中注册一下，android四大组件都需要注册的。</p>
<p>使用bindService方法启动时service的生命周期：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-226a453a59c8e402.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="service"></p>
<p>点击unbind按钮时service的生命周期：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-640bbee4e9c39f6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="service"></p>
<p>点击startService</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-49c77846a3147887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="service"></p>
<p>点击stopService</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-67427398a2972d92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="service"></p>
<p>通过以上的生命周期我们会发现，通过bindService和startService启动的服务生命周期会有所不同，其实bindService还有另外的东西，不过因为我在onBind()方法里返回了null所以没有体现出来。那么我返回一个他要的试试看，修改的代码只有TestService和ServiceConnection，只放修改的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/1/11.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;TestService&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onBind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBinder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onCreate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onStartCommand&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRebind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onRebind&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onDestroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onUnbind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.e(<span class="string">&quot;MyBinder&quot;</span>, <span class="string">&quot;play music&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 在MainActivity中</span></span><br><span class="line">    ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;onServiceConnected&quot;</span>);</span><br><span class="line">            TestService.MyBinder mb = (TestService.MyBinder) iBinder;</span><br><span class="line">            mb.playMusic();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;onServiceDisconnected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>那么让咱点下BIND_SERVICE按钮看看有啥反应：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-e584ce486d91519e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="service"></p>
<p>可以看到，通过ServiceConnection中有两个回调方法，其中一个带有IBinder类型的对象，而我强转成我自己继承自Binder的MyBinder也没有错。可以猜测这里的IBinder就是我在onBind()里返回的MyBinder，而我可以在这个类里写一个方法，再通过拿到的IBinder来调用这个方法。</p>
<p>小结：</p>
<p>onCreate方法只在首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用 onStartCommand()或onBind()之前）。如果服务已在运行，则不会调用此方法。点击BIND_SERVIC和START_SERVICE（即bindService和startService都调用），再点击UNBIND_SERVICE或STOP_SERVICE实际上都不会调用onDestroy方法。因为service可以和多个客户端绑定（不过只在第一次和客户端绑定的时候调用onBind方法，随后即可将同一IBinder传递给其他绑定的客户端），除非所有的客户端均取消绑定（如果通过startService也启动了这个服务，那么还得stopService才会停止），否则stopService或stopSelf不会实际停止服务。</p>
<p>在阅读鸿洋大神的一篇AIDL文章时，我尝试了下他的代码，发现使用隐式Intent启动服务会报错，后来搜索发现说是Android 5.0以上只能显示启动服务了，解决方案后文和网上都有。</p>
<h2 id="创建绑定服务的三种方式"><a href="#创建绑定服务的三种方式" class="headerlink" title="创建绑定服务的三种方式"></a>创建绑定服务的三种方式</h2><p>创建绑定服务时必须提供IBinder，提供客户端和服务交互的“接口”。这里的接口并非java语言中的interface，可以理解为提供客户端调用的方法之类的。android提供三种方式：</p>
<ul>
<li>扩展（继承）Binder类</li>
<li>使用Messenger</li>
<li>使用AIDL</li>
</ul>
<p>第一种扩展Binder类在Android API指南中描述如下：如果服务是供你的自由应用专用，并且在客户端相同的进程中运行（常见情况），则应通过扩展Binder类并从onBind()返回它的一个实例来创建接口。客户端收到Binder后，可利用它直接访问Binder实现中乃至Service中可用的公共方法。</p>
<p>如果服务只是您的自有应用的后台工作线程，则优先采用这种方法。不以这种方式创建接口的唯一原因是，您的服务被其他应用或不同的进程占用。</p>
<p>也就是说如果不是为了跨进程而用其他两种方式你就是在耍流氓~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4ae5e9006f5a99d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="耍流氓"></p>
<h3 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h3><p>在正式了解AIDL之前，我觉得有必要先弄明白线程和进程的概念。首先看一下他们正式的定义：</p>
<ul>
<li><p>线程（Thread）是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</p>
</li>
<li><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础</p>
</li>
</ul>
<p>从我们平时的开发中可以这么阐述进程与线程：进程是程序的一次运行，线程是其中一段代码的执行。而我们平时写的Android程序一般都是在一个进程中运行的，进程名即包名。Android系统内核是Linux内核，而每一个应用程序都运行在一个虚拟机上，每个应用程序都是一个进程。在Android中一个应用程序也是可以使用多进程的，其方式非常简单，只要在清单文件中指定对应的组件属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:process=&quot;:remote&quot;</span><br></pre></td></tr></table></figure>
<p>这样就可以了，但是本来一个问题你可以用多进程来解决，然后你用了，之后你就会有两个问题了。说笑，多进程会带来的问题就是内存不共享，因为每个进程都独享自己的一块内存，没办法直接互相访问内存。一个进程中已经存在对象另外一个进程中不能直接使用，不过好在Android提供了很多方式给我们“跨进程”，AIDL便是我们首先要探究的一种方式。</p>
<h3 id="AIDL小例子"><a href="#AIDL小例子" class="headerlink" title="AIDL小例子"></a>AIDL小例子</h3><p>我看了几篇文的例子，《Android开发艺术探索》、鸿洋大神和网上其他人写的，感觉还是先用鸿洋大神的例子好一点，鸿洋大神的例子是简单的计算两个整型数值的相加和相减的结果。我们首先新建一个AIDL文件：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-ae626cb6c50a7ab1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建AIDL"></p>
<p>AIDL文件代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Calc.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.xiasuhuei321.forjianshu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CalcManage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后点击Android Studio的make project</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-45c831d37ed90d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="make pro"></p>
<p>完成之后会在项目的app/build/generated/source/aidl/debug下生成一个java文件，这里和鸿洋大神一样，具体的解释放到之后再说，我们先走完这个流程。</p>
<p>接着新建一个CalcService的Java类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.forjianshu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/1/13.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CalcManage.Stub binder = <span class="keyword">new</span> CalcManage.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我这里只是返回了一个binder，不过这个binder是我们通过AIDL生成的java文件中的一个类，恩，下文再解释。</p>
<p>接着是主界面的布局，和MainActivity的代码，恩因为能直接用鸿洋大神的。。直接copy过来的。。。各位不要学我。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-cb0bfbd9fedea47a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不要学"></p>
<p>布局：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.xiasuhuei321.forjianshu.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;bindService&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;BindService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;unbindService&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;UnbindService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;addInvoked&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;12+12&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;minInvoked&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;50-12&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MainActivity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.forjianshu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.ResolveInfo;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CalcManage mCalcAidl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端主要通过ServiceConnected与服务端连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mServiceConn = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            Log.e(<span class="string">&quot;client&quot;</span>, <span class="string">&quot;onServiceConnected&quot;</span>);</span><br><span class="line">            mCalcAidl = CalcManage.Stub.asInterface(service);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            Log.e(<span class="string">&quot;client&quot;</span>, <span class="string">&quot;onServiceDisconnected&quot;</span>);</span><br><span class="line">            mCalcAidl = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击BindService按钮时调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindService</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setAction(<span class="string">&quot;com.xiasuhuei321.forjianshu.calc&quot;</span>);</span><br><span class="line">        <span class="comment">// 在5.0以上隐式启动绑定service会抛异常</span></span><br><span class="line">        <span class="keyword">final</span> Intent i = <span class="keyword">new</span> Intent(createExplicitFromImplicitIntent(<span class="keyword">this</span>,intent));</span><br><span class="line">        bindService(i, mServiceConn, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击unBindService按钮时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbindService</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        unbindService(mServiceConn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击12 + 12按钮时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInvoked</span><span class="params">(View v)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCalcAidl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> addRes = mCalcAidl.plus(<span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, addRes + <span class="string">&quot;&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;服务器被异常杀死，请重新绑定服务端&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击50 - 12按钮时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">minInvoked</span><span class="params">(View v)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCalcAidl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> addRes = mCalcAidl.min(<span class="number">50</span>, <span class="number">12</span>);</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, addRes + <span class="string">&quot;&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;服务端未绑定或被异常杀死，请重新绑定服务端&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * Android L (lollipop, API 21) introduced a new problem when trying to invoke implicit intent,</span></span><br><span class="line"><span class="comment">     * &quot;java.lang.IllegalArgumentException: Service Intent must be explicit&quot;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If you are using an implicit intent, and know only 1 target would answer this intent,</span></span><br><span class="line"><span class="comment">     * This method will help you turn the implicit intent into the explicit form.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Inspired from SO answer: http://stackoverflow.com/a/26318757/1446466</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> implicitIntent - The original implicit intent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Explicit Intent created from the implicit original intent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">createExplicitFromImplicitIntent</span><span class="params">(Context context, Intent implicitIntent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Retrieve all services that can match the given intent</span></span><br><span class="line">        PackageManager pm = context.getPackageManager();</span><br><span class="line">        List&lt;ResolveInfo&gt; resolveInfo = pm.queryIntentServices(implicitIntent, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only one match was found</span></span><br><span class="line">        <span class="keyword">if</span> (resolveInfo == <span class="keyword">null</span> || resolveInfo.size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get component info and create ComponentName</span></span><br><span class="line">        ResolveInfo serviceInfo = resolveInfo.get(<span class="number">0</span>);</span><br><span class="line">        String packageName = serviceInfo.serviceInfo.packageName;</span><br><span class="line">        String className = serviceInfo.serviceInfo.name;</span><br><span class="line">        ComponentName component = <span class="keyword">new</span> ComponentName(packageName, className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new intent. Use the old one for extras and such reuse</span></span><br><span class="line">        Intent explicitIntent = <span class="keyword">new</span> Intent(implicitIntent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the component to be explicit</span></span><br><span class="line">        explicitIntent.setComponent(component);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> explicitIntent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后不要忘了在清单文件中注册这个service：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.CalcService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.xiasuhuei321.forjianshu.calc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后来看一下结果如何：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-dceee8022a3d8e5f.gif?imageMogr2/auto-orient/strip" alt="结果"></p>
<p>一些值得注意的地方已经在代码中注释了，看结果很明显是对的，但是我这里还没有体现出来AIDL跨进程跨在哪了，接下来就给这个service指定一个进程，看一下还能跑不。</p>
<p>修改一下清单文件中service的属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.CalcService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">&quot;:calc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.xiasuhuei321.forjianshu.calc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动之后点击第一个按钮绑定服务，再查看果然多了:calc进程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-ce6f6a46593db5a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两个进程"></p>
<p>还能跑不？<br><img src="http://upload-images.jianshu.io/upload_images/1976147-db5718cc94e4d80a.gif?imageMogr2/auto-orient/strip" alt="结果"></p>
<p>结果是一样的，正常运行，这说明了AIDL的确能实现“跨进程”。这种方式也可以用于不同app间的通信，只不过可能会麻烦一点。接下来就新建一个client module：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-fa95c53340653723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建一个module"></p>
<p>现在我们新建的这个module将之称为client，而之前的项目将之称为server。现在我们将在server通过AIDL文件生成的java文件复制过来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-71e8e3c9ade2b030.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制"><br>当然了，因为包更改了，肯定一堆问题，改过来就好了，将该文件内的包名全部修改对了就可以了。然后，恩，把之前的布局和能用到的都复制过来……布局不怎么需要改，MainActivity的代码也先不该，复制过来跑起来看看咋样。</p>
<p>结果肯定是闪退了~别问我咋知道，如果你报的错是以下这种：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f6cc3650f88e18d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误"></p>
<p>那说明CalcMange代码里的DESCRIPTOR错了，毕竟直接拷贝过来的。。。各种错不稀奇。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">&quot;com.xiasuhuei321.client.CalcManage&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>因为刚全局修改了包名，所以这里也改了，但是这不能改，不然就会抛这个异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">&quot;com.xiasuhuei321.forjianshu.CalcManage&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>好了，改成这样再来一遍，看一下结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-168027012463256e.gif?imageMogr2/auto-orient/strip" alt="结果"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>正确的得出了结果，恩，试也试完了，接下来研究一下AIDL为啥能做到跨进程。前面一直拖着说道后面解释的玩意，现在再来看看，系统为我们生成的java文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file is auto-generated.  DO NOT MODIFY.</span></span><br><span class="line"><span class="comment"> * Original file: /Users/luojun/Desktop/ForJianShu/app/src/main/aidl/com/xiasuhuei321/forjianshu/CalcManage.aidl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.xiasuhuei321.forjianshu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="comment">// 继承了IInterface，同时自己也是也是一个接口，所有可以再Binder中传输的接口都需要继承IIterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CalcManage</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Local-side IPC implementation stub class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// Binder类，当客户端和服务端都位于同一个进程的时候，方法调用不会走跨进程的transact过程，</span></span><br><span class="line">    <span class="comment">// 而当两者位于不同进程时，方法调用需要走transact过程。逻辑由Stub的内部代理类Proxy来完成</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">xiasuhuei321</span>.<span class="title">forjianshu</span>.<span class="title">CalcManage</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Binder的唯一标识，一般用当前Binder的类名标识</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">&quot;com.xiasuhuei321.forjianshu.CalcManage&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Construct the stub at attach it to the interface.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.attachInterface(<span class="keyword">this</span>, DESCRIPTOR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Cast an IBinder object into an com.xiasuhuei321.forjianshu.CalcManage interface,</span></span><br><span class="line"><span class="comment">         * generating a proxy if needed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 用于将服务端的Binder对象转换成客户端所需的AIDL接口类型的对象，这种转换过程是区分进程的，如果</span></span><br><span class="line">        <span class="comment">// 客户端和服务端位于同一进程，那么此方法返回的就是服务端的Stub对象本身，否则返回的就是系统</span></span><br><span class="line">        <span class="comment">// 封装后的Stub.proxy</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.xiasuhuei321.forjianshu.<span class="function">CalcManage <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.xiasuhuei321.forjianshu.CalcManage))) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((com.xiasuhuei321.forjianshu.CalcManage) iin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> com.xiasuhuei321.forjianshu.CalcManage.Stub.Proxy(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回当前Binder对象</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个方法运行在客户端，当客户端远程调用此方法时，它的内部实现是这样的：创建该方法所需要的输入类型</span></span><br><span class="line">        <span class="comment">// Parcel对象_data、输出型Parcel对象_reply和返回值对象List;然后把该方法的参数信息写入_data中</span></span><br><span class="line">        <span class="comment">// （如果有参数的话）；接着调用transact方法来发起RPC（远程过程调用）请求，同事当前线程挂起；然后</span></span><br><span class="line">        <span class="comment">// 服务端的onTransact方法会被调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程</span></span><br><span class="line">        <span class="comment">// 的返回结果；返回_reply中的数据。</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (code) &#123;<span class="comment">// 唯一标识，区分执行哪个方法</span></span><br><span class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                    reply.writeString(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_plus: &#123;</span><br><span class="line">                    <span class="comment">// 与客户端的writeInterfaceToken对用，标识远程服务的名称</span></span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    <span class="comment">// 读取客户端传入的两个参数</span></span><br><span class="line">                    <span class="keyword">int</span> _arg0;</span><br><span class="line">                    _arg0 = data.readInt();</span><br><span class="line">                    <span class="keyword">int</span> _arg1;</span><br><span class="line">                    _arg1 = data.readInt();</span><br><span class="line">                    <span class="comment">// 这里涉及到java多态，是一个基本的概念，这里最终调用的是我们在</span></span><br><span class="line">                    <span class="comment">// Service中创建的实现类中的方法。</span></span><br><span class="line">                    <span class="keyword">int</span> _result = <span class="keyword">this</span>.plus(_arg0, _arg1);</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    reply.writeInt(_result);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_min: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">int</span> _arg0;</span><br><span class="line">                    _arg0 = data.readInt();</span><br><span class="line">                    <span class="keyword">int</span> _arg1;</span><br><span class="line">                    _arg1 = data.readInt();</span><br><span class="line">                    <span class="keyword">int</span> _result = <span class="keyword">this</span>.min(_arg0, _arg1);</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    reply.writeInt(_result);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">xiasuhuei321</span>.<span class="title">forjianshu</span>.<span class="title">CalcManage</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                mRemote = remote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// CalcManage.aidl中声明的方法。这个方法运行在客户端，当客户端远程调用此方法时，它的内部</span></span><br><span class="line">            <span class="comment">// 实现是这样的：创建该方法所需要的输入型Parcel对象_data、输出型Parcel对象_reply和返回值</span></span><br><span class="line">            <span class="comment">// 对象</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">                <span class="comment">// 创建输入对象</span></span><br><span class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">                <span class="comment">// 创建输出对象</span></span><br><span class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">                <span class="comment">// 返回值</span></span><br><span class="line">                <span class="keyword">int</span> _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    <span class="comment">// 将参数写入_data</span></span><br><span class="line">                    _data.writeInt(a);</span><br><span class="line">                    _data.writeInt(b);</span><br><span class="line">                    <span class="comment">// 发起RPC（远程郭恒调用）请求，当前线程挂起。服务端的onTransact方法会被</span></span><br><span class="line">                    <span class="comment">// 调用，直到RPC过程返回后，当前线程继续执行，并从_reply中取出RPC过程中的</span></span><br><span class="line">                    <span class="comment">// 返回结果；</span></span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_plus, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    _result = _reply.readInt();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">                <span class="keyword">int</span> _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    _data.writeInt(a);</span><br><span class="line">                    _data.writeInt(b);</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_min, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    _result = _reply.readInt();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于标识plus和min方法</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_plus = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_min = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写到这，我觉得有必要再重新审视一下Binder了，因为通过以上的代码和注释，你一定发现老提到Binder。Binder是Android中的一个类，它实现了IBinder接口。从IPC（Inter-Process Communication,进程间通信）角度来说，Binder是Android中的一种跨进程通信方式。从Android应用层来说，Binder是客户端和服务端调用的Binder对象，通过这个Binder对象，客户端就可以获取服务端提供的服务或者数据，这里的服务端包括普通服务和基于AIDL的服务。</p>
<p>本来还想分个服务端，客户端继续吹吹牛，但是写着写着觉得我注释够详细了。。。不吹了不吹了，各位自己看上面我带注释的代码吧。</p>
<p>写到这感觉篇幅有点小长了，关于Binder、Messenger和IPC还是留待下一篇吧~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-7a3d9a36bc3cb570.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下一篇"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="http://blog.csdn.net/l2show/article/details/47421961">Android 5.0之后隐式声明Intent 启动Service引发的问题 </a></p>
</li>
<li><p> <a href="http://blog.csdn.net/lmj623565791/article/details/38461079">Android aidl Binder框架浅析</a></p>
</li>
<li><p><a href="https://developer.android.google.cn/guide/components/services.html?hl=zh-cn">Android API指南</a></p>
</li>
<li><p>Android开发艺术探索</p>
</li>
<li><p><a href="http://www.open-open.com/lib/view/open1469493649028.html#articleHeader8">Android：学习AIDL，这一篇文章就够了</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android之MVP初尝试</title>
    <url>/2016/08/19/Android%E4%B9%8BMVP%E5%88%9D%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p>##写在前面##<br>又到了周末了，本来这周准备总结一下透明状态栏之类的东西……但是突然群里就吹起了MVP的牛，这让我这个MVC都只有小半桶水的人都不敢说话。但是程序员不会吹牛跟条咸鱼又有什么区别？<br><img src="http://upload-images.jianshu.io/upload_images/1976147-bc51e70906298050.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>所以我毅然决然的打开了搜索引擎，利用我科学上网的本领搜集了一些MVP相关的文章，不过看完也没啥感觉是真的，果然对于coder来说talk is cheap果断撸code才是正道。好了，日常吹牛、唠嗑(1/1)。</p>
<p>##1、MVC与MVP##<br>对于Android开发者来说，MVC应该是比较熟悉的。首先我自制一副极简风格的MVC图来做说明。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-55cd71d2d9c94227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<span id="more"></span>

<p>MVC是一种软件设计典范，用一种业务逻辑、数据、界面分离的方法组织代码。但是在Android中用MVC有一点明显的不足：View层与Controller层难以明确的划分出去。因为在Android中各种布局文件是View层没错，但是各个Activity和Fragment呢？这些东西既像View又像Controller，但我们一般会将其划分为Controller层，对于View层的更新一般都会放在对应的Activity或者Fragment(或者其他)中，而我们所需要做的仅仅是抽取出一个Model来实现MVC。</p>
<p>可以，这很Android。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-caf2f50caf5e6f8e.gif?imageMogr2/auto-orient/strip"></p>
<p>MVC在Android中看上去不是很标准，那么MVP的出现之后与MVC一对比，相信各个Android开发者都会觉得：</p>
<p>这玩意还不错诶~靠谱！<br><img src="http://upload-images.jianshu.io/upload_images/1976147-bacc810e832c9537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算了不自己画了……"></p>
<p>从图中可以很明显的看出View层不再和Model层互知，View层和Model层通过Presenter层交互。在这了借用hongyang大神的那句话：之所以MVP会让人感觉耳目一新，是因为这次的跳跃是从并不标准的MVC到MVP的一个转变，减少了Activity的职责，简化了Activity中的代码，将复杂的逻辑代码提取到了Presenter中进行处理。与之对应的好处就是，耦合度更低，更方便的进行测试。</p>
<p>##2、MVP小DEMO演练<br>这个小demo花了我不少时间去想通，让我错过了林丹与杨宗纬的大战！郁闷！</p>
<p>国际惯例先上目录：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9ef8b104bd80f7be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录.png"></p>
<p>我的demo是图片加载的小demo，adapter里的适配器是recyclerview的适配器，ImageBean是图片数据，里面包含了一个Url和一个图片相关的描述。utils里是以前自己以前封装的解析这个接口的工具，Urls里保存的是接口。先把非重点在前面讲了，后面开始介绍一下我写的mvp。</p>
<p>###2.1、Model与View层###<br>我上来是先写Model层与View层的，因为这俩货在MVP里是解耦的，不能互相感知，所以我可以在设计者两层的时候只考虑需求与实现，不考虑在Presenter里干的事。</p>
<p>首先是Model层：<br>我要加载图片，我这加载图片用的是Glide，如果你不了解这个强大的开源库，你可以先去百度一下。所以需要我在Model中做的事情就是获取图片信息的集合。首先定义一个Model层的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageModel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LoadImageList</span><span class="params">(ImageModelImp.OnLoadImageListListener listener,<span class="keyword">int</span> pageIndex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图片比较多，采用分页加载，至于这个listener是一个获取数据成功和失败的回调，可以在回调中进行相应的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageModelImp</span> <span class="keyword">implements</span> <span class="title">ImageModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadImageList</span><span class="params">(<span class="keyword">final</span> OnLoadImageListListener listener,<span class="keyword">int</span> pageIndex)</span> </span>&#123;</span><br><span class="line">        OkHttpUtils.get().url(Urls.IMAGE_URL+pageIndex).build().execute(<span class="keyword">new</span> StringCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                listener.onFailure(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                List&lt;ImageBean&gt; imageBeen = JsonUtils.readJsonImageBean(response);</span><br><span class="line">                listener.onSuccess(imageBeen);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadImageListListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;ImageBean&gt; list)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取数据的代码量不是非常的多，因为我用的都是封装的工具进行请求和解析json。这个Model层的类实现了我刚刚定义的接口，执行具体的逻辑。</p>
<p>以上是Model层的代码，接下来分析一下View层需要什么东西。我这个demo只是加载图片而已，我所采用的是recyclerview，那么我需要的仅仅是一个集合，然后将这个集合传入adapter中，剩下的事情adapter都会帮我处理好的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageLoadView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(List&lt;ImageBean&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让MainActivity实现这个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ImageLoadView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView image_list;</span><br><span class="line">    <span class="keyword">private</span> ImagePresenter imagePresenter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ImageBean&gt; imageList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ImageListAdapter adapter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> GridLayoutManager staggeredGridLayoutManager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">        adapter = <span class="keyword">new</span> ImageListAdapter(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getImageList</span><span class="params">(List&lt;ImageBean&gt; list)</span> </span>&#123;</span><br><span class="line">        adapter.setisShow(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (imageList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            imageList = <span class="keyword">new</span> ArrayList&lt;ImageBean&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        imageList.addAll(list);</span><br><span class="line">        <span class="keyword">if</span> (pageIndex == <span class="number">1</span>) &#123;</span><br><span class="line">            adapter.setData(list);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果没有更多数据则隐藏脚布局</span></span><br><span class="line">                adapter.setisShow(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//setData方法中含有刷新，无需刷新了。</span></span><br><span class="line">        adapter.setData(imageList);</span><br><span class="line">        pageIndex += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中间还有很多代码，我这里只是抽取出来一部分代码。可以看出在我这个demo里V层和M层的定义简直不废吹灰之力，但是……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-b0f7e456225181b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并没有什么卵用"></p>
<p>###2.2、Presenter###<br>Presenter层的逻辑着实让我烧了一会脑子，有些东西就是这样，想通了就很简单，想不通就会很痛苦。如何让M层与V层交互？首先我们需要明确的一点是：获取数据的逻辑在Model层那个实现类里面</p>
<p>你可能说这不废话吗……的确是废话，既然在那个实现类里，那我们肯定需要一个这个类的实例对象，不然怎么去执行那段代码？加载图片需要我们在presenter里做的事情也非常的少，只有获取图片集合这一件事可干而已。所以定义如下接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImagePresenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadList</span><span class="params">(<span class="keyword">int</span> pageIndex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>接下来看一下Presenter层的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImagePresenterImp</span> <span class="keyword">implements</span> <span class="title">ImagePresenter</span>,<span class="title">ImageModelImp</span>.<span class="title">OnLoadImageListListener</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ImageLoadView imageLoadView;</span><br><span class="line">    <span class="keyword">private</span> ImageModel imageModel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImagePresenterImp</span><span class="params">(ImageLoadView imageLoadView)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imageModel = <span class="keyword">new</span> ImageModelImp();</span><br><span class="line">        <span class="keyword">this</span>.imageLoadView = imageLoadView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;ImageBean&gt; list)</span> </span>&#123;</span><br><span class="line">        imageLoadView.getImageList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我这里就不做处理了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadList</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</span><br><span class="line">        imageModel.LoadImageList(<span class="keyword">this</span>,pageIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在这个实现类里，持有了一个M层实现类的对象，持有了一个V层的接口。这个类实现了P层接口和M层请求失败成功的接口。可以看到在loadList()方法中用了M层对象去执行具体的获取数据的代码，而在请求成功的回调方法中用持有的V层接口对象将此list传出。所以在MainActivity实现了V层接口后就可以获取list数据了。</p>
<p>说了那么多你可能会有点被绕糊涂了，很简单，用我极简的作图风格来帮你理解，当然了，如果你对于回调还不十分了解的话建议去看我的这篇文章<a href="http://www.jianshu.com/p/7ac60e182449">Android之回调函数</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b45145935c21b820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终图"></p>
<p>可能看了以上的图你也不是很明白，没关系，网上资料很多，同时别忘了自己动手！<br>对了，放个最终跑起来的样子吧……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-5a13d3cdc368a479.gif?imageMogr2/auto-orient/strip" alt="效果图"></p>
<p>对了项目名字写错了，写了MVC……你们懂就好……</p>
<p>最后挂上demo获取方式</p>
<blockquote>
<p>github:<a href="https://github.com/ForgetAll/StudyForMVC">https://github.com/ForgetAll/StudyForMVC</a></p>
</blockquote>
<hr>
<p>↑以上是更新的分割线，更新时间：16.8.29</p>
<p>说实话刚写完这个代码我就感觉有点不对劲，但是没深入考虑。后来实在是有点担心会发生内存泄露，毕竟我实现的这种MVP模式P层是需要持有一个V层接口引用的，而实现V层接口的是Activity，这样要是发生了内存泄露可不是小事，所以还需要我们将MVP和Activity的生命周期关联起来。</p>
<p>首先简单分析一下这种内存泄露可能发生的场景：Presenter经常性的通过Model执行一些耗时的代码，而Presenter持有Activity的引用，如果在耗时操作完成之前Activity就被销毁了，那么因为Presenter持有Activity强引用而导致Activity对象无法被回收，此时就发生了内存泄露。</p>
<p>关于这玩意的讨论在：<a href="http://www.jianshu.com/p/96149e01486f">Android内存泄漏浅析</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Android之观察者模式</title>
    <url>/2016/10/15/Android%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以前听说过一句话，说是** 自己写过代码总量没有超过10w行谈设计模式那都是耍流氓 **。我信了，所以一直没怎么系统的看已经买了的《Android源码设计模式》。最近有个小伙伴在群里问recyclerview怎么刷新数据，以前大概也做过，流程也就是那么两步：1.更新Adapter里数据集的引用，让他指向最新的数据集。2.调用Adapter的notifyDataSetChanged()来更新ui。之后小伙伴又问了notifyDataSetChanged()到底如何更新ui的，当时只是看出了一个观察者模式，还有一些细节没想明白。而且讲真的观察者模式的应用还是非常多的，无论是Android还是最近很火的RxJava，其中都可以看到观察者模式的身影，所以决定这周把观察者模式撸一遍。</p>
<h3 id="1、什么是观察者模式"><a href="#1、什么是观察者模式" class="headerlink" title="1、什么是观察者模式"></a>1、什么是观察者模式</h3><p>观察者模式(Observer Pattern)定义了对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新，观察者模式又叫做发布-订阅(Publish/Subscribe)模式。</p>
<p>定义总是这么精准而抽象，让我们结合一些Android中的场景来简单的理解一下：在Android最常用的点击事件，我们会通过设置控件的OnClickListener并传入一个OnClickListener的实现类来回调点击事件。这种我们便可以将之看做一个观察者模式。我们的OnClickListener是观察者，被观察者是控件，当有点击事件的时候控件发布点击事件，观察者OnClickListener就会接收到点击事件。当然了，说到底，就是回调。</p>
<span id="more"></span>
<h3 id="2、用回调写一个简单的观察者模式"><a href="#2、用回调写一个简单的观察者模式" class="headerlink" title="2、用回调写一个简单的观察者模式"></a>2、用回调写一个简单的观察者模式</h3><p>首先我们想一个生活中的场景，来凑个观察者模式出来。平时我们要烧水吧，总要派个人看着，水烧开的时候把电源拔了装水。在这个场景里水壶就是被观察者(Observable)，观察者(Observer)就是人。首先我们用以上我说的，那玩意就是回调，用回调来写一个看看。那我们先写一个被观察者“水壶”来看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kettle</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    Observer&lt;T&gt; o;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;you must regist Observer first!&quot;</span>);</span><br><span class="line">        notifyData(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyData</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        o.receiverEvent(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registObserver</span><span class="params">(Observer&lt;T&gt; o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o = o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在你需要的时候调用这个方法，防止内存泄露</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregistObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.o = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们这个水壶是被观察者，内部肯定要维护一个观察者的引用，或者一个观察者队列的引用，方便我们进行回调，当然更多的事我们尽量不要通过Observer这个东西来做，在这个观察者模式中我希望Observer仅仅作为一个纯粹的回调。因为观察模式本身的特性之一就是解耦，如果你要通过Observer干更多的事无疑会加重Observable和Observer之间的耦合。更多信息可以看代码，我注释已经写得很详细了。</p>
<p>接下来看看上面提到的那个Observer我是咋写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receiverEvent</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很简单的一个接口，写上泛型，嗯，顺便练习一下泛型…只有一个方法，用来回调。有接口那我们肯定要有实现类，我这个场景里说了，人是观察者，于是我写了一个Observer的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverEvent</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        dealWithEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交给用户去处理事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dealWithEvent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我把这个People设计为一个抽象类，这样我可以在接收到这个事件的时候做一些简单的处理(把他打印出来……)，然后再把具体的逻辑交给这个抽象类的子类来做，我这逻辑比较简单，就没传什么参数进去了。最后免不了跑起来看看了~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//水壶</span></span><br><span class="line">        Kettle&lt;String&gt; kettle = <span class="keyword">new</span> Kettle&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        People people = <span class="keyword">new</span> People() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dealWithEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;People:拔电源装水了~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册观察者</span></span><br><span class="line">        kettle.registObserver(people);</span><br><span class="line">        <span class="comment">//在一定条件下调用此方法发布事件</span></span><br><span class="line">        kettle.publishEvent(<span class="string">&quot;Kettle:水烧开了！再不拔电源我要炸了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f165f4942daf1e20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<p>这里实现了一个加单的观察者模式，观察者也只能注册一个，不过例子么，简单的才容易看懂嘛<del>接下来看一下Java util里自带的Observable和Observer，看一下别人的套路</del></p>
<h3 id="3、Java中的观察者模式"><a href="#3、Java中的观察者模式" class="headerlink" title="3、Java中的观察者模式"></a>3、Java中的观察者模式</h3><p>在Java的util包里也有Observable和Observer那么这俩兄弟跟我们上面自己实现的有啥不同呢？首先还是那个水壶的例子，有了上面的基础，我就直接把所有的类和测试代码甩上来了，相信以各位看官的实力都是小case:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//被观察者</span></span><br><span class="line">        Kettle kettle = <span class="keyword">new</span> Kettle();</span><br><span class="line">        <span class="comment">//观察者</span></span><br><span class="line">        PeopleLookKettle people = <span class="keyword">new</span> PeopleLookKettle();</span><br><span class="line"></span><br><span class="line">        kettle.addObserver(people);</span><br><span class="line">        kettle.notifyPeople(<span class="string">&quot;kettle:水烧开了!再不拔电源我要炸了!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kettle</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyPeople</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;kettle:我是水壶~&quot;</span>);</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleLookKettle</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println((String) arg);</span><br><span class="line">        System.out.println(<span class="string">&quot;People:拔电源装水~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后还是看一下运行结果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3d3869c1f0cf6b29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<p>代码上完了，那么这里实现的观察模式又是个什么套路呢？不比比直接看源码，先从简单的Observer看起：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is called whenever the observed object is changed. An</span></span><br><span class="line"><span class="comment">     * application calls an &lt;tt&gt;Observable&lt;/tt&gt; object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;notifyObservers&lt;/code&gt; method to have all the object&#x27;s</span></span><br><span class="line"><span class="comment">     * observers notified of the change.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   o     the observable object.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   arg   an argument passed to the &lt;code&gt;notifyObservers&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *                 method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我去，这跟我上面的设计不符啊…这货怎么把Observable传过来了…这只是设计类和接口的一些设计理念不一样，作为jdk他需要考虑各种兼容性和安全性的问题，所以不可能像我们客户端程序员一样，很多时候写的都非常任性。先不扯那么多，我们要看的是套路~这玩意是个接口，就像我说的那样，做个回调就行了，剩下的都交给实现类来操心。</p>
<p>看完了Observer我们再来看看Observable：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Construct an Observable with zero Observers. */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds an observer to the set of observers for this object, provided</span></span><br><span class="line"><span class="comment">     * that it is not the same as some observer already in the set.</span></span><br><span class="line"><span class="comment">     * The order in which notifications will be delivered to multiple</span></span><br><span class="line"><span class="comment">     * observers is not specified. See the class comment.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   o   an observer to be added.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException   if the parameter o is null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</span><br><span class="line">            obs.addElement(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Deletes an observer from the set of observers of this object.</span></span><br><span class="line"><span class="comment">     * Passing &lt;CODE&gt;null&lt;/CODE&gt; to this method will have no effect.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   o   the observer to be deleted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        obs.removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If this object has changed, as indicated by the</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers</span></span><br><span class="line"><span class="comment">     * and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to</span></span><br><span class="line"><span class="comment">     * indicate that this object has no longer changed.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Each observer has its &lt;code&gt;update&lt;/code&gt; method called with two</span></span><br><span class="line"><span class="comment">     * arguments: this observable object and &lt;code&gt;null&lt;/code&gt;. In other</span></span><br><span class="line"><span class="comment">     * words, this method is equivalent to:</span></span><br><span class="line"><span class="comment">     * &lt;blockquote&gt;&lt;tt&gt;</span></span><br><span class="line"><span class="comment">     * notifyObservers(null)&lt;/tt&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#clearChanged()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#hasChanged()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observer#update(java.util.Observable, java.lang.Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If this object has changed, as indicated by the</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers</span></span><br><span class="line"><span class="comment">     * and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to indicate</span></span><br><span class="line"><span class="comment">     * that this object has no longer changed.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Each observer has its &lt;code&gt;update&lt;/code&gt; method called with two</span></span><br><span class="line"><span class="comment">     * arguments: this observable object and the &lt;code&gt;arg&lt;/code&gt; argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   arg   any object.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#clearChanged()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#hasChanged()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observer#update(java.util.Observable, java.lang.Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * a temporary array buffer, used as a snapshot of the state of</span></span><br><span class="line"><span class="comment">         * current Observers.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">/* We don&#x27;t want the Observer doing callbacks into</span></span><br><span class="line"><span class="comment">             * arbitrary code while holding its own Monitor.</span></span><br><span class="line"><span class="comment">             * The code where we extract each Observable from</span></span><br><span class="line"><span class="comment">             * the Vector and store the state of the Observer</span></span><br><span class="line"><span class="comment">             * needs synchronization, but notifying observers</span></span><br><span class="line"><span class="comment">             * does not (should not).  The worst result of any</span></span><br><span class="line"><span class="comment">             * potential race-condition here is that:</span></span><br><span class="line"><span class="comment">             * 1) a newly-added Observer will miss a</span></span><br><span class="line"><span class="comment">             *   notification in progress</span></span><br><span class="line"><span class="comment">             * 2) a recently unregistered Observer will be</span></span><br><span class="line"><span class="comment">             *   wrongly notified when it doesn&#x27;t care</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (!changed)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            arrLocal = obs.toArray();</span><br><span class="line">            clearChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears the observer list so that this object no longer has any observers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs.removeAllElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Marks this &lt;tt&gt;Observable&lt;/tt&gt; object as having been changed; the</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;hasChanged&lt;/tt&gt; method will now return &lt;tt&gt;true&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates that this object has no longer changed, or that it has</span></span><br><span class="line"><span class="comment">     * already notified all of its observers of its most recent change,</span></span><br><span class="line"><span class="comment">     * so that the &lt;tt&gt;hasChanged&lt;/tt&gt; method will now return &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * This method is called automatically by the</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;notifyObservers&lt;/code&gt; methods.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#notifyObservers()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#notifyObservers(java.lang.Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tests if this object has changed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if and only if the &lt;code&gt;setChanged&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     *          method has been called more recently than the</span></span><br><span class="line"><span class="comment">     *          &lt;code&gt;clearChanged&lt;/code&gt; method on this object;</span></span><br><span class="line"><span class="comment">     *          &lt;code&gt;false&lt;/code&gt; otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#clearChanged()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.util.Observable#setChanged()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of observers of this &lt;tt&gt;Observable&lt;/tt&gt; object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the number of observers of this object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obs.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出Observable内部使用了一个Vector来维护订阅的Observer，关于Vector这里不做更多的了解，在这就把他当做一个普通的Observer容器就行了。让我们看看和这个容器有关的套路，为了防止各位产生代码疲劳，我特意贴心的给各位截了个图23333333：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-88f8f5242cd252c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="套路"></p>
<p>添加和删除Observer就是在容器obs里做增删操作，这套路很简单，不过为了线程安全加了个synchronized。之后看一下重点，通知Observers时调用的notifyObservers()，notifyObservers()最终会调用他自身带参的重载方法，看下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * a temporary array buffer, used as a snapshot of the state of</span></span><br><span class="line"><span class="comment">     * current Observers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">/* We don&#x27;t want the Observer doing callbacks into</span></span><br><span class="line"><span class="comment">         * arbitrary code while holding its own Monitor.</span></span><br><span class="line"><span class="comment">         * The code where we extract each Observable from</span></span><br><span class="line"><span class="comment">         * the Vector and store the state of the Observer</span></span><br><span class="line"><span class="comment">         * needs synchronization, but notifying observers</span></span><br><span class="line"><span class="comment">         * does not (should not).  The worst result of any</span></span><br><span class="line"><span class="comment">         * potential race-condition here is that:</span></span><br><span class="line"><span class="comment">         * 1) a newly-added Observer will miss a</span></span><br><span class="line"><span class="comment">         *   notification in progress</span></span><br><span class="line"><span class="comment">         * 2) a recently unregistered Observer will be</span></span><br><span class="line"><span class="comment">         *   wrongly notified when it doesn&#x27;t care</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!changed)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        arrLocal = obs.toArray();</span><br><span class="line">        clearChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先除去那大段的注释不看，这里就是拿到Observable内部维护的Observer容器，然后遍历回调这些Observer的update方法以实现让所有Observer收到通知。但是后面那段代码被执行是有条件的，就是Observable内部的changed字段为true才会执行，而这个字段只有通过setChanged()方法来将其值置为true。但是在上面的源码中我们可以发现这个方法是protected修饰的，所以不通过特殊手段的话，我们只有通过继承才能来调用这个方法了。所以在我以上的实现代码中是有一个继承于Observable的类的。</p>
<p>回头再看看那段注释（自己的烂翻译…有错请指出…）：<br>我们不想让Observer在持有他自己的监听时在回调任意代码。抽取这段代码存储存储Observer需要同步的状态，但是并不通知这些Observer。任何潜在的竞争条件可能会导致的最坏情况是：</p>
<ul>
<li>新添加的Observer将会错过一个正在进行的通知</li>
<li>最近被解除注册的Observer可能会错误的同步一个他不关心的玩意</li>
</ul>
<p>这些东西说实话，我只是有一点点想法，并不能说的很清楚。我觉得是多线程情况下这段代码需要加上一个同步锁，不然可能会引发他注释里写的那两点糟糕的情况。我接触的多线程还是有点少的，所以这段我就先这么翻着，而且这对我们理解观察者模式的套路并没有非常大的影响。</p>
<p>分析完了Java中的观察者模式，接下来回到文章最前面提到的那个问题，RecyclerView中的ui更新到底是咋回事。</p>
<h3 id="4、RecyclerView中的ui更新"><a href="#4、RecyclerView中的ui更新" class="headerlink" title="4、RecyclerView中的ui更新"></a>4、RecyclerView中的ui更新</h3><p>其实要弄清楚这个首先得看Adapter，因为Adapter才是掌控数据集的那个。那么让我们来看一下RecyclerView.Adapter的nonotifyDataSetChanged()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyDataSetChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mObservable.notifyChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续追踪这个源码，看看咋回事</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObservable</span> <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">AdapterDataObserver</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !mObservers.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// since onChanged() is implemented by the app, it could do anything, including</span></span><br><span class="line">        <span class="comment">// removing itself from &#123;@link mObservers&#125; - and that could cause problems if</span></span><br><span class="line">        <span class="comment">// an iterator is used on the ArrayList &#123;@link mObservers&#125;.</span></span><br><span class="line">        <span class="comment">// to avoid such problems, just march thru the list in the reverse order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mObservers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            mObservers.get(i).onChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其余方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到notifyChanged()这个方法里就两行代码，经过上面的一番学习，我闭着眼睛也能猜到mObservers是一个Observer的集合，通过遍历的去调用onChanged，然后这个onChanged是回调。既然知道这一点，那么我们就需要在RecyclerView中找到Observer的具体实现类，不过在此之前我们找孩子之前得先找他爸~很简单，追踪onChanged()的源码，看看到底是谁的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDataObserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeChanged</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeChanged</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount, Object payload)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fallback to onItemRangeChanged(positionStart, itemCount) if app</span></span><br><span class="line">        <span class="comment">// does not override this method.</span></span><br><span class="line">        onItemRangeChanged(positionStart, itemCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeInserted</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeRemoved</span><span class="params">(<span class="keyword">int</span> positionStart, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRangeMoved</span><span class="params">(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition, <span class="keyword">int</span> itemCount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>找到了，都是空方法，你可能回说这还不是接口，没事，接口能做的抽象类也能做，我们只要找这个抽象类的孩子就行了。鸡贼的我果断ctrl+f输入了我的查找：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-5cab20489c6396e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="嘿嘿嘿，我好鸡贼"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b65388e49f35a1b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="说了我很鸡贼"></p>
<p>看一下他的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewDataObserver</span> <span class="keyword">extends</span> <span class="title">AdapterDataObserver</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           assertNotInLayoutOrScroll(<span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">               <span class="comment">// TODO Determine what actually changed.</span></span><br><span class="line">               <span class="comment">// This is more important to implement now since this callback will disable all</span></span><br><span class="line">               <span class="comment">// animations because we cannot rely on positions.</span></span><br><span class="line">               mState.mStructureChanged = <span class="keyword">true</span>;</span><br><span class="line">               setDataSetChangedAfterLayout();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               mState.mStructureChanged = <span class="keyword">true</span>;</span><br><span class="line">               setDataSetChangedAfterLayout();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!mAdapterHelper.hasPendingUpdates()) &#123;</span><br><span class="line">               requestLayout();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略部分代码...</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">triggerUpdateProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (mPostUpdatesOnAnimation &amp;&amp; mHasFixedSize &amp;&amp; mIsAttached) &#123;</span><br><span class="line">               ViewCompat.postOnAnimation(RecyclerView.<span class="keyword">this</span>, mUpdateChildViewsRunnable);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               mAdapterUpdateDuringMeasure = <span class="keyword">true</span>;</span><br><span class="line">               requestLayout();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里简单的看一下第一行代码是检查recyclerview，如果有错就会抛异常。之后第一个if，不看了，默认是false，那么就看第二个条件内的代码。第一个是存储一个状态，第二个是我们要看到的东西了，点进去看下源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setDataSetChangedAfterLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    mDataSetHasChangedAfterLayout = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = mChildHelper.getUnfilteredChildCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewHolder holder = getChildViewHolderInt(mChildHelper.getUnfilteredChildAt(i));</span><br><span class="line">        <span class="keyword">if</span> (holder != <span class="keyword">null</span> &amp;&amp; !holder.shouldIgnore()) &#123;</span><br><span class="line">            holder.addFlags(ViewHolder.FLAG_ADAPTER_POSITION_UNKNOWN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mRecycler.setAdapterPositionsAsUnknown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到它会遍历ViewHolder，然后给holder添加flag:** FLAG_ADAPTER_POSITION_UNKNOWN**这个flag会让viewholder重新绑定到recyclerview上以确定自己的position，最后一个方法会让缓存的viewholder也打上上面提到的flag。</p>
<p>最后再回顾一下（如果有纰漏敬请指出，因为我这源码也没非常仔细的阅读）：</p>
<ul>
<li><p>在想要更新RecyclerView的界面时，我们通常会先更新数据源（List之类的），然后调用Adapter的notifyDataSetChanged()方法</p>
</li>
<li><p>在RecyclerView内部notifyDataSetChanged()方法调用了mObservable.notifyChanged();而mObservable是一个被观察者。</p>
</li>
<li><p>在RecyclerView内部找到mObservable的真实类型，发现是RecyclerViewDataObserver，寻找notifyChanged()时会调用的onChanged()方法。</p>
</li>
<li><p>发现onChanged()方法最终会给viewholder设置flag，让他们重新绑定到RecyclerView上，在重新绑定的过程中无疑是会在onBindViewHolder里重新设置数据的，而数据源我们已经更新过了，新的数据就会被显示到界面上，以上就是这整个流程了。</p>
</li>
</ul>
<h3 id="5、最后的一点思考"><a href="#5、最后的一点思考" class="headerlink" title="5、最后的一点思考"></a>5、最后的一点思考</h3><p>说实话最近在写东西的时候经常用回调，因为一些工具类或者dialog、window之类的，在自己自定义的时候通常需要回调把点击事件传出来，不然感觉传view设置点击什么的感觉也挺麻烦的，不如我里面逻辑处理好，就把点击事件传出来就好了。但是写到后面我这又是用的MVP，activity里各种回调满天飞，不过怎么说呢，我自己写的，我看起来逻辑还是很清晰的。如果是后面来人接手呢？虽然我注释写的都很清晰了，但是他在阅读代码的时候不得不深入我的工具类或者dialog window里去看我这个回调到底干了什么，所以这种方便自己麻烦别人的东西，我现在在想到底是算好的代码风格还是差的，有点糊涂。</p>
<p>好了，也挺久没发文了，而且干了七天，相信大家都很累了，休息休息了，祝各位有一个好的周末。</p>
<p>最后安利一下这个主播，<a href="!https://www.douyu.com/196">小缘</a>，安静听歌的感觉不错</p>
<p>参考资料：<br>《Android源码设计模式》</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android全文关键字高亮与关键字点击</title>
    <url>/2017/10/26/Android%E5%85%A8%E6%96%87%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%97%E7%82%B9%E5%87%BB/</url>
    <content><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为自己看过很多杂七杂八的东西，所以知道 TextView 本身可以解析一些 html 的标签，而且 Span String 可以花式实现各种样式。这里采用 Span String 的方式实现。实现这个需求的难点在哪呢？刚开始在我看来就是实现关键字匹配，刚开始想用 spilt<br> 方法直接分割自己添加 keyword 取巧，后来细想不行，不是所有的输入都能完成，多个关键字这种方式太复杂。没办法，想起以前学过的 kmp 算法，打开了个网页准备开撸了，忽然想到搜一下全文关键字匹配，很容易的就搜到了 Java 中对应的 API ，搜索也是需要技巧的……不能太过于想当然了。效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-eb799e1d50bd9fbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图"></p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现过程还算顺利，不多 BB 直接放代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.forspanstring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.text.SpannableString;</span><br><span class="line"><span class="keyword">import</span> android.text.SpannableStringBuilder;</span><br><span class="line"><span class="keyword">import</span> android.text.Spanned;</span><br><span class="line"><span class="keyword">import</span> android.text.TextPaint;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.text.style.ClickableSpan;</span><br><span class="line"><span class="keyword">import</span> android.text.style.ForegroundColorSpan;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/10/26.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * desc:本类提供了几种给字符串添加颜色、点击事件的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RichTextUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取带颜色的文本，设定关键字颜色，这里只接受一个关键字，并且没有点击事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originText 原始文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword    需要颜色的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color      颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> CharSequence 处理后的文字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CharSequence <span class="title">getColorString</span><span class="params">(String originText, String keyword, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getColorString(originText, keyword, color, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取带颜色的文本，将给定的元是字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originText 原始文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword    关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color      颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener   点击关键字的监听回调，可空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CharSequence <span class="title">getColorString</span><span class="params">(String originText, String keyword, <span class="keyword">int</span> color,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              <span class="keyword">final</span> View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line">        SpannableString s = <span class="keyword">new</span> SpannableString(originText);</span><br><span class="line">        Pattern p = Pattern.compile(keyword);</span><br><span class="line">        Matcher m = p.matcher(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = m.start();</span><br><span class="line">            <span class="keyword">int</span> end = m.end();</span><br><span class="line">            s.setSpan(<span class="keyword">new</span> ForegroundColorSpan(color), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                s.setSpan(<span class="keyword">new</span> ClickableSpan() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">                        listener.onClick(widget);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</span><br><span class="line">                        ds.setColor(color);</span><br><span class="line">                        ds.setUnderlineText(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CharSequence <span class="title">getColorString</span><span class="params">(String originText, List&lt;String&gt; keywords,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              Map&lt;String, Integer&gt; colorMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getColorString(originText, keywords, colorMap, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CharSequence <span class="title">getColorString</span><span class="params">(String originText, List&lt;String&gt; keywords,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              <span class="keyword">final</span> Map&lt;String, Integer&gt; colorMap, Map&lt;String, View.OnClickListener&gt; listenerMap)</span> </span>&#123;</span><br><span class="line">        SpannableString s = <span class="keyword">new</span> SpannableString(originText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keywords.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> String keyword = keywords.get(i);</span><br><span class="line">            Pattern p = Pattern.compile(keyword);</span><br><span class="line">            Matcher m = p.matcher(s);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">                <span class="keyword">int</span> start = m.start();</span><br><span class="line">                <span class="keyword">int</span> end = m.end();</span><br><span class="line"></span><br><span class="line">                s.setSpan(<span class="keyword">new</span> ForegroundColorSpan(colorMap.get(keyword)), start, end,</span><br><span class="line">                        Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (listenerMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> View.OnClickListener listener = listenerMap.get(keyword);</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        s.setSpan(<span class="keyword">new</span> ClickableSpan() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">                                listener.onClick(widget);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</span><br><span class="line">                                ds.setColor(colorMap.get(keyword));</span><br><span class="line">                                ds.setUnderlineText(<span class="keyword">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpannableStringBuilder builder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接出特殊的文字，可以选择加入颜色和点击事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str      加入的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RichTextUtil <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> append(str, -<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接出特殊的文字，可以选择加入颜色和点击事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str      加入的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color    颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RichTextUtil <span class="title">append</span><span class="params">(String str, <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> append(str, color, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接出特殊的文字，可以选择加入颜色和点击事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str      加入的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> color    颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 点击事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RichTextUtil <span class="title">append</span><span class="params">(String str, <span class="keyword">int</span> color, View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(builder)) &#123;</span><br><span class="line">            builder = <span class="keyword">new</span> SpannableStringBuilder();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class="line">            BlackgagaLogger.debug(<span class="string">&quot;传入的str为 null！请检查！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == -<span class="number">1</span>) &#123;</span><br><span class="line">            builder.append(str);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SpannableString span = <span class="keyword">new</span> SpannableString(str);</span><br><span class="line">        span.setSpan(<span class="keyword">new</span> ForegroundColorSpan(color), <span class="number">0</span>, str.length(),</span><br><span class="line">                Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            span.setSpan(<span class="keyword">new</span> ClickableSpan() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">                    listener.onClick(widget);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</span><br><span class="line">                    ds.setColor(color);</span><br><span class="line">                    ds.setUnderlineText(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, str.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        builder.append(span);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpannableStringBuilder <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面用了 View.OnClickListener 来传递事件，因为我发现同一个 ClickableSpan 给多个 Span 设置的时候只有第一个点击事件是有效的。又不想自己多加一个接口，就用了 Android 里现成的接口了。最后要注意一下，一定要设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">textView.setMovementMethod(LinkMovementMethod.getInstance()); </span><br></pre></td></tr></table></figure>
<p>不然无法响应点击事件。</p>
<p>主要提供了两大类 api，一类是直接传入全文和所有的关键字，以及关键字对应的点击事件和颜色值。这类使用起来的构造也是比较麻烦的，而且如果碰到指定部分关键字高亮，而另外一些匹配的不高亮（比如匹配数字，很有可能一些数字中包含了你的数字关键字，但问题是你不想让这部分高亮），实现起来就更麻烦了。所以又添加了一类 api 类似 StringBuilder 的方法，自己从零开始构造一个 SpannableStringBuilder，而这个类是 CharSequence 的子类，TextView 可以直接设置。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>实际需求</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android内存泄露浅析</title>
    <url>/2016/10/02/Android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间写了一篇<a href="http://www.jianshu.com/p/6d42bf4efe16">MVP初尝试</a>，由于当时只是刚接触，只是简单的实现，还有很多问题没想明白。关于内存泄露这事是本文着重要谈的一点，同时本文是我在看了很多关于Java和Android内存泄露分析的文章之后的所得。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在了解MVP引起的内存泄露问题之前，我们首先要理解在Android中内存泄露是啥玩意？简单的讲内存泄漏就是** 本该被释放内存的对象没有被释放 *<em>。最近也和同学<a href="http://www.jianshu.com/users/86f25f8b198b/latest_articles">@iamxiarui</a>就内存泄露这个问题进行了一些讨论，最后发现要搞清楚这个东西，还要从Java层上找原因。学习Android的同学都应该知道，Java这门语言有一个垃圾回收器，一般来说我们是无需关心内存回收的问题。但是玩过LOL或者DOTA的同学都知道，一个猪队友和一个神对手究竟哪个威胁更大一些，我们不能当GC的</em>队友，所以多了解一些这玩意吧。</p>
<p>在C++中会有析构函数这个概念，在C++中销毁对象必须用到这个函数，如此说来C++中是可以手动释放内存的。你可能会说Java中不也有finalize()方法吗？是的，是有这东西，让我们来看看这玩意。</p>
<h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><span id="more"></span>
<p>关于这货，在《Thinking in java》里说：</p>
<ul>
<li>不能指望finalize()。</li>
</ul>
<p>在《effective java》里说：</p>
<ul>
<li>避免使用终结方法：终结方法通常是不可预测的，也是很危险的，一般情况下是不必要的。</li>
</ul>
<p>至于为什么那么描述finalize()方法，原因如下：</p>
<blockquote>
<p>终结方法的缺点在于不能保证会被及时的执行。</p>
</blockquote>
<p>你以为这就完了？《effective java》中还有一段描述：</p>
<blockquote>
<p>Java语言规范不仅不保证终结方法会被及时的执行，而且根本就不保证它们会被执行。</p>
</blockquote>
<p>那么在很多由于生命周期所引发的内存泄漏问题上，我们就不能想着手动释放内存了，因为我们需要“及时”的释放内存，但是finalize()并不能满足我们的需求。那么我们应该想一些办法，“告诉”GC：我这是可以回收的，请回收这部分内存吧！</p>
<p>那么问题来了：我们该用怎样的方式告诉GC，并且让GC可以回收这部分内存呢？这是我们今天主要要解决的问题，但是我们首先要弄明白的是Java中关于内存的一些事。</p>
<h2 id="Java内存分配策略"><a href="#Java内存分配策略" class="headerlink" title="Java内存分配策略"></a>Java内存分配策略</h2><p>Java程序运行时的内存分配策略有三种，分别是静态分配，栈式分配和堆式分配。对应的，三种存储策略使用的内存空间主要分别是静态存储区、栈区和堆区。</p>
<ul>
<li>静态存储区：编译时就分配好，在程序整个运行期间都存在。主要存放静态数据和常量。</li>
<li>栈区：当方法执行时，会在栈去内存中创建方法体内部的局部变量，方法结束后自动释放内存。</li>
<li>堆区：通常存放new出来的对象，由Java垃圾回收器管理内存的回收。</li>
</ul>
<p>很明显，本文需要关注的就是堆区了，堆内存用于存放对象实例，至于堆内如何划分，如何存放对象，这些东西都由具体的实现来决定。</p>
<h2 id="Java内存管理"><a href="#Java内存管理" class="headerlink" title="Java内存管理"></a>Java内存管理</h2><p>在我们对Java内存管理作了解之前我们需要抓住这个问题的核心：</p>
<ul>
<li>如何判定可回收对象</li>
<li>采用什么策略</li>
</ul>
<h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>首先介绍一种用于说明垃圾收集工作方式的策略，** 引用计数 **：</p>
<p>每个对象都含有一个引用计数器，当有引用连接至对象时，引用计数加1。当引用离开作用域或者被置为null时，引用计数减1。垃圾回收器在遍历所有对象时发现引用计数为0便释放其内存。这种策略很难处理循环引用的情况。不过我们无需过多的考虑此策略有何优缺点，这仅仅是用来让你了解一些垃圾回收的工作方式。而且现在JVM大多也不用这种策略来进行垃圾回收。</p>
<p>以上我们简单的了解了一下垃圾回收的大致流程，那么接下来我们来了解一下垃圾回收器如何判断一个对象是否可回收。</p>
<h4 id="可达性分析算法（根搜索算法）"><a href="#可达性分析算法（根搜索算法）" class="headerlink" title="可达性分析算法（根搜索算法）"></a>可达性分析算法（根搜索算法）</h4><p>既然引用计数有缺点，那么可以采用其他的策略，Java采用了一种新的算法：可达性分析算法。</p>
<p>对象引用遍历从一组对象开始（GC Roots），沿着整个对象图上的每条链接，递归确定可到达（reachable）对象并生成一棵引用树，树的节点视为可达对象，反之视为不可达。之后垃圾回收器在进行垃圾回收的时候便可以回收那些不可达的对象。</p>
<p>我们以一个经典的例子来说明以上的东西：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">	Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">	o2 = o1;</span><br><span class="line">	<span class="comment">//此为第五行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用一张图来表示到第三行为止时的示意图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b32d9b0150f26875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第三行.png"></p>
<p>而到了第五行时，这个情况发生了变化：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b28be23de6ef74f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第五行.png"></p>
<p>此时Obj2便是不可达对象，垃圾回收器在进行回收时便可以将Obj2的内存回收。以上是垃圾回收如确定可回收对象，接下来简要介绍一下垃圾回收的策略。</p>
<h4 id="内存回收策略"><a href="#内存回收策略" class="headerlink" title="内存回收策略"></a>内存回收策略</h4><ul>
<li>标记——清除（标记回收算法 或 Mark-Sweep）</li>
</ul>
<p>从堆栈和静态存储区出发，遍历所有引用，进而标记出所有存活对象，在整个标记过程中不会有回收工作发生。当标记工作完成时，清理动作才会开始。在清理过程中，没有标记的对象将会被释放。</p>
<p>这种策略的缺点很容易想到，分配内存的时候是连续的堆空间，但是在释放之后内存空间是不连续的，如果要分配较大的内存，这些内存碎片是不行的。如果想要得到连续的内存空间就得提前触发gc整理内存空间。</p>
<p>一种对Mark-Sweep进行优化的便是Mark-Compact（标记整理算法）。该算法标记阶段和Mark-Sweep一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。这样就不会产生特别多的内存碎片了。</p>
<ul>
<li>停止——复制（复制算法）</li>
</ul>
<p>垃圾回收动作发生的同时，程序将会被暂停（gc stop the world）。复制算法将可用内存分为大小相等的两块，在垃圾回收器释放内存之前，这块内存内存活的对象都会被复制到另外一块内存中，之后将已使用的内存空间清理掉。这么做优点是不容易产生内存碎片，缺点也是显而易见的，存活对象非常多的话，其效率会降低。</p>
<ul>
<li>分代回收算法</li>
</ul>
<p>根据对象存活的生命周期将内存划分若干个不同的区域，一般划分为老年代（Old Generation）和新生代（Young Generation）。老年代的特点是每次gc时只有少量对象需要被回收，而新生代的特点是每次gc都有大量的对象需要被回收。这样就可以根据不同代的特点采取合适的策略，对于新生代采用copying算法，对于老年代使用Mark-Compact。</p>
<p>说真的，本来还想简介一下Davik或者ART虚拟机的，资料也找到了，但是从本篇来说不需要介绍那么多了，事实上甚至我觉得关于内存回收策略也不需要介绍……</p>
<h2 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h2><p>根据以上我们对于Java如何判定可回收对象的简介，我们可以对发生内存泄露的对象总结出以下特征：<br>1.在引用树上可达（被引用）<br>2.程序以后不会再使用这些对象了</p>
<h4 id="强引用（Strong-Reference）"><a href="#强引用（Strong-Reference）" class="headerlink" title="强引用（Strong Reference）"></a>强引用（Strong Reference）</h4><p>在第一点中我们说对象被引用，其实指的是被强引用。说的好像很高大上的样子，其实我们平时用的大多都是强引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>
<p>这类对象JVM自己抛OOM也不会通过GC回收这类对象。这是非常容易理解的，因为我们写代码需要一切是“可预料的”，如果我声明以上两个对象，竟然会莫名其妙的被JVM回收，那我只能和JAVA说再见了。当然了，我们也可以“提醒”gc回收该对象，比如将其引用置null—–&gt;p = null;   list = null。这样这两个对象便没有引用指向他了，下一次GC这两个对象便可以被回收了。</p>
<h4 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SoftReference&lt;Bitmap&gt; bm = <span class="keyword">new</span> SoftReference&lt;Bitmap&gt;(bmp);</span><br></pre></td></tr></table></figure>
<p>当一个对象只有软引用存在时，系统内存不足时会回收此对象。听起来还不错，但是在Android2.3以后，gc会很频繁，导致释放软引用的频率也很高，这无疑增加了程序维护的难度和不稳定性。所以如果有可替代的东西，就用别的来实现。</p>
<h4 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h4><p>发现就会被干掉的存在。</p>
<h4 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h4><p>不做介绍。</p>
<h2 id="MVP中的内存泄露"><a href="#MVP中的内存泄露" class="headerlink" title="MVP中的内存泄露"></a>MVP中的内存泄露</h2><p>前面铺垫了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;那么&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>长，终于说到重点了……是不是很激动，很期待？不管你是怎么想的，反正我是激动了~</p>
<p>在本篇中，其他可能引发内存泄露的东西，嗯，不分析。只分析耗时操作所引发的Activity或者其他V层实现类的内存泄露问题。熟悉MVP套路的同学应该会清除这么几点：<br>1.Model层获取数据<br>2.View层实现类执行回调的逻辑<br>3.Presenter层解除M和V的耦合，使M和V通过P层交互。</p>
<p>这么做肯定是有好处的，解除了M和V的耦合，他们俩互不感知，但是P层作为中间交互层不得不持有一个V层的引用和一个M层的实例。而当M层在进行一个耗时的操作时，由于P层是调用M层的逻辑实现一些功能，所以也可以将P层视为是一个耗时的操作。而且前面也说了，P层会持有一个V层的引用，如果在这个时候我们想要销毁这个Activity，那么这个Activity因为仍有P在持有Activity的引用从而导致其不会被回收，也就导致了内存泄露[** 注1 **]。恩，可能你看了我的纯文字描述有点头疼，没事，画张图你就好理解了（关系并不一定是这样的，但是方便理解）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-31151e6a1da05a5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="画张图"></p>
<p>可能你会有点奇怪，中间那个p咋整的啊，三个箭头指的你都晕了，但是MVP就是这么个套路啊~我们现在想要干的是释放activity的内存，那么按照我们之前说过的套路，虽然activity已经去掉了指向a的引用，但是p还没有去掉指向a的引用。那么显而易见的是如果presenter的生命周期长于activity的生命周期，恩，恭喜你内存泄露了。这种内存考虑值得我们更多的考虑[** 注2 **]</p>
<p>先放一个模拟MVP内存泄露的代码<br>首先是Model层的接口和实现类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo on 2016/9/30.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestModel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessageDelayed</span><span class="params">(Handler handler)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">package</span> com.xiasuhuei321.studyforrxjava;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo on 2016/9/30.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestModeImpl</span> <span class="keyword">implements</span> <span class="title">TestModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_DELAY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageDelayed</span><span class="params">(<span class="keyword">final</span> Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                handler.sendEmptyMessageDelayed(MESSAGE_DELAY, <span class="number">200000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>恩，上面我写的200000是我深深的怨念，本来写个2000，结果leakcanary这个检测内存泄露的工具貌似会调gc，结果成功回收了……尼玛我只要个现象啊……嗯，关于这一块回收掉的情况，我会在之后的情况里说明。接下来，放Presenter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo on 2016/9/30.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestView testView;</span><br><span class="line">    TestModel testModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> TestModeImpl.MESSAGE_DELAY:</span><br><span class="line">                    TestPresenter.<span class="keyword">this</span>.testView.getMessage();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestPresenter</span><span class="params">(TestView testView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.testView = testView;</span><br><span class="line">        testModel = <span class="keyword">new</span> TestModeImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        testModel.sendMessageDelayed(handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>View层的接口和Activity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo on 2016/9/30.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//activity</span></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.squareup.leakcanary.RefWatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">TestView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btTest;</span><br><span class="line">    <span class="keyword">private</span> TestPresenter p;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        RefWatcher refWatcher = ExampleApplication.getRefWatcher(<span class="keyword">this</span>);</span><br><span class="line">        refWatcher.watch(<span class="keyword">this</span>);</span><br><span class="line">        p = <span class="keyword">new</span> TestPresenter(<span class="keyword">this</span>);</span><br><span class="line">        refWatcher.watch(p);</span><br><span class="line">        btTest = (Button) findViewById(R.id.bt_test);</span><br><span class="line">        btTest.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                p.getMessage();</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, SecondActivity.class));</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;asdf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>来看一下内存泄露检测的情况</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-ceb78f52493dfb1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内存泄漏"></p>
<p>结合代码我们可以发现的确是因为在presenter中因为持有testView的引用导致了MainActivity的内存泄露。</p>
<p>关于这种内存泄漏，我们利用以上对于Java内存回收、管理的策略的理解，可以这么解决：我们将presenter的生命周期和Activity的生命周期关联起来：</p>
<ul>
<li><p>在presenter中声明一个onDestroy()方法，在这个方法中将testView置为null，然后在presenter中凡是使用到testView的使用的，都判断一下是否为空。</p>
</li>
<li><p>在activity的onDestroy()方法中调用presenter.onDestroy()，同时也将activity持有的presenter置空。</p>
</li>
</ul>
<p>这样就可以解决MVP中由耗时操作和强引用导致的内存泄露的问题，是不是简单而优雅？（才怪）</p>
<p>当然了，以上方法里还有两个内存泄露我么有解决，那就是handler导致的activity内存泄露。handler在建立的时候会拿到当前线程的Looper，如果当前线程没有Looper就会报错，根据这个特性我猜测是因为取到线程这事导致的内存泄露。不过只是猜测，如果各位看官有知道这其中缘故还请告诉我。第二个是非静态内部类Handler所引发的内存泄露，Handler生命周期长于presenter，所以会引发presenter的内存泄露，你说我为啥不搞定？原理我都给你说了，刚好给你个机会去实践~（逃…）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-525112dc21036ec1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内存泄漏"></p>
<p>恩，刚和大佬<a href="http://www.jianshu.com/users/8c4757fd3c5e/latest_articles">越越</a>聊了一下handler这事，他说了一个东西handler.removeCallbacks(null)，我把他放在presenter的onDestroy()里搞定了……</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.testView = <span class="keyword">null</span>;</span><br><span class="line">    handler.removeCallbacks(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种解决的方式使我们根据自己的经验得出的最简单粗暴的解决方式，这样能有效的避免因testView持有activity的引用而导致的内存泄露问题。本来想试一下Rxjava+MVP，然后在对应的生命周期里unsubscribe()来解决内存泄漏的问题，但是用leakcancry检测一直会报和上面一样的内存泄露，而我试了各种方法都没能解决。虽然在leakcancry的android sdk所导致的内存泄露中貌似找到了这个</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c50908147483dc0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sdk内存泄露"></p>
<p>问题是我的手机系统版本是6.0.1，按照他这个来说应该是被修复了的。而且很奇怪的一点是我在startActivty跳转到第二界面并finish自身才会报之前的内存泄露，不然的话直接返回桌面并finish是不会有内存泄露的，暂时没弄懂是什么状况，如果有人知道是为什么请务必告诉我，谢谢！</p>
<p>因为这个问题没解决，暂时不往下写了，但是我以上写的原理肯定是对的。我没能解决的问题那是因为我现在还不是Android系统的好队友，嗯，猪队友吧，先去搞会Android压压惊。关于注1,2我想说的其实是一件事：其实有的时候这种内存泄漏是** 可以接受 <strong>的，比如有时可能这种内存泄露所引发的后果只是</strong> 本次GC **无法回收这块内存，但是下一次呢？下一次耗时操作过了，这块内存没有引用指向他了，是可以被回收的。但是这也取决于你，你要是觉得不能忍受，那就麻溜的修复这些东西。</p>
<p>如果你对我发现的这个问题有兴趣，问题代码已经放在了：<br><a href="https://github.com/ForgetAll/StudyForRxJava">demo地址</a><br>一不小心上传了配置文件……</p>
<hr>
<p>以下为我写文时的参考资料，感谢各位大神无私分享的精神！</p>
<p>** java回收机制： **</p>
<p><a href="http://jayfeng.com/2016/03/11/%E7%90%86%E8%A7%A3Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/">杰风居-理解Java垃圾回收机制</a></p>
<p><a href="http://www.cnblogs.com/laoyangHJ/articles/java_gc.html">老杨HJ-详细介绍Java垃圾回收机制</a></p>
<p>《Thinking in Java》&amp; 《Effective Java》</p>
<p>** Android内存泄露分析： **</p>
<p><a href="http://duanmo.me/2016/04/17/memory-leak-summary/#%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BB%8B%E7%BB%8D">Android内存泄露总结</a></p>
<p><a href="https://yq.aliyun.com/articles/3009">箫鉴哥-Android内存泄漏总结</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=400021278&idx=1&sn=0e971807eb0e9dcc1a81853189a092f3&scene=0&key=b410d3164f5f798eafd870697d352ac86e0e54b9605b5fcd2c6a62268c16080ee291069627f13ed906cc2f39706b6a54&ascene=0&uin=NzY0MTg2ODU=&devicetype=iMac+MacBookPro11,1+OSX+OSX+10.10.5+build(14F27)&version=11000003&pass_ticket=nhSGhYD4LC9FWvUPv26Y7AdIzqEDu8FTImf2AKlyrCk=">QQ空间终端开发团队-Android GC那点事</a></p>
<p><strong>我同学写的关于MVP中P造成的内存泄露的花式解决：</strong></p>
<p><a href="http://www.jianshu.com/p/d9f4c8219a65">iamxiarui-Android：聊聊 MVP 中 Presenter 的生命周期</a></p>
<p><strong>最后还要感谢一下square的开源项目:</strong></p>
<p><a href="https://github.com/square/leakcanary">内存泄漏检测工具</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>内存泄漏</tag>
      </tags>
  </entry>
  <entry>
    <title>Android加载未安装apk中的资源</title>
    <url>/2017/08/07/Android%E5%8A%A0%E8%BD%BD%E6%9C%AA%E5%AE%89%E8%A3%85apk%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><a href="http://www.jianshu.com/p/7c7645d8a8f3">上篇</a>介绍了如何从dex中加载类，这篇尝试了一下从apk中加载资源，用的同样是DexClassLoader。同样还是那个kotlin项目，简单的尝试从另一个apk的drawable中加载一张图片，个人感觉还是挺麻烦的。</p>
<h2 id="先准备另一个项目"><a href="#先准备另一个项目" class="headerlink" title="先准备另一个项目"></a>先准备另一个项目</h2><p>新建另一个项目，这个项目只在drawable下放了一张名为ssm的图片。然后生成一个debug的apk包。将这个apk拷贝到本项目的assets下（只是为了方便，也可以从远程获取这个apk）。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-99ca1e85144280f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="debug apk"></p>
<p>我们的目标就是通过这个debug的apk来加载这张图片，这里我将这个apk的名字改为了plugin1.apk。</p>
<h2 id="简单的代码"><a href="#简单的代码" class="headerlink" title="简单的代码"></a>简单的代码</h2><span id="more"></span>
<p>这里不得不说一下，kotlin对java的兼容做的真的不错，这里的反射本来还有点担心该怎么做，后来发现比较容易的就实现了。只不过语法上有一些小小的不同。在Java中通过类名.class就可以访问该类的Class对象，而在Kotlin中则需要类名::class.java，可以访问到java的Class对象。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dynamicLoadApk</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> pm = packageManager</span><br><span class="line">    <span class="comment">// 在应用安装目录下创建一个名为plugin的文件夹目录</span></span><br><span class="line">    <span class="comment">// 我进了程序目录看了一下，叫app_plugin</span></span><br><span class="line">    <span class="keyword">val</span> optDir = getDir(<span class="string">&quot;plugin&quot;</span>, Context.MODE_PRIVATE)</span><br><span class="line">    <span class="comment">// 生成输出文件</span></span><br><span class="line">    <span class="keyword">val</span> desFile = File(optDir.path + File.separator + <span class="string">&quot;plugin1.apk&quot;</span>)</span><br><span class="line">    println(desFile.path)</span><br><span class="line">    println(desFile.absolutePath)</span><br><span class="line">    <span class="comment">// 如果不存在，将assets下的plugin1.apk复制到输出文件中</span></span><br><span class="line">    <span class="keyword">if</span> (!desFile.exists()) &#123;</span><br><span class="line">        desFile.createNewFile()</span><br><span class="line">        copyFiles(<span class="string">&quot;plugin1.apk&quot;</span>, desFile)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// plugin1.apk 获取包名</span></span><br><span class="line">    <span class="keyword">val</span> pkInfo = pm.getPackageArchiveInfo(desFile.path,</span><br><span class="line">            PackageManager.GET_ACTIVITIES)</span><br><span class="line">    <span class="keyword">val</span> packageName = pkInfo.applicationInfo.packageName</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问AssetManager的Class对象，生成AssetManager实例对象</span></span><br><span class="line">    <span class="keyword">val</span> assetManager = AssetManager::<span class="keyword">class</span>.java.newInstance()</span><br><span class="line">    <span class="comment">// 通过反射拿到隐藏方法</span></span><br><span class="line">    <span class="keyword">val</span> addAssetPath = assetManager.javaClass.getMethod(<span class="string">&quot;addAssetPath&quot;</span>, String::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> loader = DexClassLoader(optDir.path + File.separator +</span><br><span class="line">            <span class="string">&quot;plugin1.apk&quot;</span>, optDir.path, <span class="literal">null</span>,</span><br><span class="line">            ClassLoader.getSystemClassLoader())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addAssetPath.invoke(assetManager, desFile.path)</span><br><span class="line">    <span class="keyword">val</span> superRes = resources</span><br><span class="line">    <span class="keyword">val</span> mResources = Resources(assetManager, superRes.displayMetrics, superRes.configuration)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> clz = loader.loadClass(<span class="string">&quot;<span class="variable">$packageName</span>.R\$drawable&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> field = clz.getDeclaredField(<span class="string">&quot;ssm&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> resId = field.getInt(R.id::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    println(<span class="string">&quot;resId: <span class="variable">$resId</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> iv_img = findViewById(R.id.iv_img) <span class="keyword">as</span> ImageView</span><br><span class="line">    iv_img.setImageDrawable(mResources.getDrawable(resId))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-1df150408617dffb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="少司命"></p>
<p>的确可以加载成功。但是到这，这两篇只能算是hello world，比起普通的资源加载，更令人向往的是启动各个未安装的apk中的Activity和各种Service。不过比起到现在为止的直接反射暴力新建对象，Activity作为系统的组件，需要系统来初始化，来调用各个生命周期方法。后续就是就是要关注一下如何调用这些资源了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>动态加载apk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android属性动画学习笔记（一）——基本使用</title>
    <url>/2017/08/19/Android%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>动画啊，相机啊，RxJava2啊，还有很多其他的东西，平时都有在看，当时看的时候感觉自己似乎已经明白了，但是过了一时间到需要用的时候还是难免要去翻一下别人的博客。翻别人的不如我记录一下然后翻自己的好了，好记性不如烂简书~</p>
<p>我开始学Android的时候就没有碰到过需要适配4.0以下的情况了，现在手机也普遍在5.0以上了，所以当初学的时候我就直接看的RecyclerView和属性动画，话不多说，直接进入属性动画的学习（API的使用）。对了，首先放上郭霖大神关于属性动画的介绍， <a href="http://blog.csdn.net/guolin_blog/article/details/43536355">Android属性动画完全解析(上)，初识属性动画的基本用法</a>，上中下三篇写的都非常不错。只不过属性动画的应用场景非常多，三篇文章不可能提到所有场景，还需要我们根据场景去应用。本篇所有例子都是用kotlin写的，不过都比较简单，而且我也会解释下大概的意思，没看过kotlin的读者也完全可以看懂。</p>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>在放代码之前先放一些个前置：</p>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> ROTATE = <span class="string">&quot;rotation&quot;</span></span><br><span class="line">    <span class="keyword">val</span> ALPHA = <span class="string">&quot;alpha&quot;</span></span><br><span class="line">    <span class="keyword">val</span> TRANSLATIONX = <span class="string">&quot;translationX&quot;</span></span><br><span class="line">    <span class="keyword">val</span> TRANSLATIONY = <span class="string">&quot;translationY&quot;</span></span><br><span class="line">    <span class="keyword">val</span> SCALEX = <span class="string">&quot;scaleX&quot;</span></span><br><span class="line">    <span class="keyword">val</span> SCALEY = <span class="string">&quot;scaleY&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的写法类似于Java中的static，这里就是怕写多了自己拼错，所以先把这些属性都写好。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : View&gt;</span> Activity.<span class="title">find</span><span class="params">(id: <span class="type">Int</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">return</span> findViewById(id) <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Activity&gt;</span> Context.<span class="title">start</span><span class="params">()</span></span></span><br><span class="line">        = startActivity(Intent(<span class="keyword">this</span>, T::<span class="keyword">class</span>.java))</span><br></pre></td></tr></table></figure>
<p>这里是kotlin的一个特性，扩展，可以给已经有的类扩展方法。这里给Activity扩展了一个find方法，比原来的findViewById稍微方便了点，不再需要强转在使用的时候将类型填入即可，inline表示内联函数。给context扩展了start方法，比startActivity也稍微方便了那么一点。如果你对kotlin也有那么一些感兴趣，可以看一下我关于<a href="http://www.jianshu.com/p/297ae6c69984">kotlin委托、高阶函数、扩展</a>的介绍。</p>
<p>先大致的介绍一下Android中的属性动画，Android中的属性动画继承结构如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-daf19e571bc9911e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="继承图"></p>
<p>其中的关键类是：ValueAnimator，ValueAnimator的功能就是根据你提供的值实现一个平滑的过渡。看一下效果。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Handler().postDelayed(&#123;</span><br><span class="line">    <span class="keyword">val</span> anim = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">    anim.duration = <span class="number">300</span></span><br><span class="line">    anim.addUpdateListener &#123;</span><br><span class="line">        animation -&gt;</span><br><span class="line">        <span class="keyword">val</span> value = animation.animatedValue <span class="keyword">as</span> <span class="built_in">Float</span></span><br><span class="line">        println(<span class="string">&quot;current value is: <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    anim.start()</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure>
<p>稍微解释下代码，kotlin中不需要用new来创建对象，创建对象只需要用其构造函数创建就可以了。这里创建了一个Handler对象发送一个延迟事件，主要是因为我在onCreate中就直接开始这个动画会跳过一些东西，所以小小的延时了一下。而val anim则表示定义一个变量（引用），kotlin仍然是静态语言，需要明确的类型，但是kotlin可以根据后面的函数做到类型推倒，还是比较方便的。创建了一个ValueAnimator对象后设置300ms持续时间，之后设置一个更新监听，用来打印变化值。如果没用过lambda和kotlin一定会对我设置监听那个操作有所疑惑，那是个什么鬼？kotlin支持lambda，如果函数中是一个接口参数，而且只有一个方法（其实这个时候可以视为接收一个函数作为参数）的时候，可以写成这样：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">setOnClickListener(&#123;v -&gt; &#125;)</span><br></pre></td></tr></table></figure>
<p>如果碰巧，这个接口参数还是最后一个参数，那么你可以写成这样:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">setOnClickListener()&#123;v -&gt; &#125;</span><br></pre></td></tr></table></figure>
<p>如果更巧的是他只有一个接口参数，那么还可以写成这样：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">setOnClickListener&#123;v -&gt; &#125;</span><br></pre></td></tr></table></figure>
<p>如果你还没用到接口参数方法中的函数，你还可以这样写：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">setOnClickListener&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>所以就有了我上面的写法，暂时介绍到这，看一下打印的结果：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-ec0242ffa8d3af3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<p>看到这你应该知道了，所谓动画，不就是从一个状态平滑的过渡到另一个状态。事实上就是如此，我们能做的就是改变他过渡的方式、频率、次数等等。下面开始介绍各种动画的实现，都是使用ObjectAnimator实现的。</p>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旋转动画</span></span><br><span class="line"><span class="keyword">val</span> rotate = find&lt;Button&gt;(R.id.bt_rotate)</span><br><span class="line">rotate.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> animator = ObjectAnimator.ofFloat(it, ROTATE, <span class="number">0f</span>, <span class="number">360f</span>)</span><br><span class="line">    animator.duration = <span class="number">3000</span></span><br><span class="line">    animator.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一行代码等于findViewById，找到这个控件，第二行设置点击事件，点击事件就是创建动画并开始。其中it就是这个view本身，ROTATE在前文介绍过，就是一个字符串”rotation”。这里ObjectAnimator为啥需要这个字符串呢？因为其实他是通过你传入的对象，通过反射调用setRotation方法。这么一来，ObjectAnimator就做到了可以对任何对象起效。当然了，如果他没有实现，你得给他实现对应的方法。话不多说，看一下效果：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-d5720a502713ace1.gif?imageMogr2/auto-orient/strip" alt="rotate.gif"></p>
<p>接下来接着介绍，但是代码都差不多就不这么详细了。</p>
<h3 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 透明动画</span></span><br><span class="line"><span class="keyword">val</span> alpha = find&lt;Button&gt;(R.id.bt_alpha)</span><br><span class="line">alpha.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> animator = ObjectAnimator.ofFloat(it, ALPHA, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">    animator.duration = <span class="number">3000</span></span><br><span class="line">    animator.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-6f6f24a0445c2f50.gif?imageMogr2/auto-orient/strip" alt="alpha.gif"></p>
<h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 平移动画</span></span><br><span class="line"><span class="keyword">val</span> move = find&lt;Button&gt;(R.id.bt_move)</span><br><span class="line">move.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> animator = ObjectAnimator.ofFloat(it, TRANSLATIONX,</span><br><span class="line">            it.translationX, -<span class="number">500f</span>, it.translationX)</span><br><span class="line">    animator.duration = <span class="number">3000</span></span><br><span class="line">    animator.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f4e8f8af056b2072.gif?imageMogr2/auto-orient/strip" alt="translate.gif"></p>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>缩放x：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缩放x方向动画</span></span><br><span class="line"><span class="keyword">val</span> scaleX = find&lt;Button&gt;(R.id.bt_scaleX)</span><br><span class="line">scaleX.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> animator = ObjectAnimator.ofFloat(it, SCALEX, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    animator.duration = <span class="number">3000</span></span><br><span class="line">    animator.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-e466d4e2f435a8c8.gif?imageMogr2/auto-orient/strip" alt="scaleX.gif"></p>
<p>缩放y：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缩放y方向动画</span></span><br><span class="line"><span class="keyword">val</span> scaleY = find&lt;Button&gt;(R.id.bt_scaleY)</span><br><span class="line">scaleY.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> animator = ObjectAnimator.ofFloat(it, SCALEY, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    animator.duration = <span class="number">3000</span></span><br><span class="line">    animator.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d1faad6d676204d8.gif?imageMogr2/auto-orient/strip" alt="scaleY.gif"></p>
<p>缩放xy：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缩放xy动画</span></span><br><span class="line"><span class="keyword">val</span> scaleXY = find&lt;Button&gt;(R.id.bt_scaleXY)</span><br><span class="line">scaleXY.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> animatorX = ObjectAnimator.ofFloat(it, SCALEX, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    <span class="keyword">val</span> animatorY = ObjectAnimator.ofFloat(it, SCALEY, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    animatorX.duration = <span class="number">3000</span></span><br><span class="line">    animatorY.duration = <span class="number">3000</span></span><br><span class="line">    animatorX.start()</span><br><span class="line">    animatorY.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-14560a1df427bdf4.gif?imageMogr2/auto-orient/strip" alt="scaleXY.gif"></p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>所谓组合，就是将几个动画组合在一起实现一些效果。组合可以利用一些动画的一些特性来实现，因为每个动画的时长都是确定的，我们可以通过手动指定动画播放的时机来达到组合的目的。而Android中也提供了AnimatorSet来帮助我们实现这个效果，当然了设置监听，监听动画完毕然后开始执行下一个动画也是可行的。下面看一下三种方式实现的代码，效果都一样，就只放一张图了：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 平移 + 旋转 + 透明 + 缩放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合动画实现方式1</span></span><br><span class="line"><span class="keyword">val</span> bt_combine1 = find&lt;Button&gt;(R.id.bt_combine1)</span><br><span class="line">bt_combine1.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> translate = ObjectAnimator.ofFloat(bt_combine1, TRANSLATIONX,</span><br><span class="line">            it.translationX, -<span class="number">500f</span>, it.translationX)</span><br><span class="line">    translate.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> rotate = ObjectAnimator.ofFloat(bt_combine1, ROTATE, <span class="number">0f</span>, <span class="number">360f</span>);</span><br><span class="line">    rotate.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> alpha = ObjectAnimator.ofFloat(bt_combine1, ALPHA, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">    alpha.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> scaleX = ObjectAnimator.ofFloat(bt_combine1, SCALEX, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    scaleX.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> scaleY = ObjectAnimator.ofFloat(bt_combine1, SCALEY, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    scaleY.duration = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">    translate.start()</span><br><span class="line">    Handler().postDelayed(&#123;</span><br><span class="line">        rotate.start()</span><br><span class="line">        alpha.start()</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">    Handler().postDelayed(&#123;</span><br><span class="line">        scaleX.start()</span><br><span class="line">        scaleY.start()</span><br><span class="line">    &#125;, <span class="number">6000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合动画实现方式2</span></span><br><span class="line"><span class="keyword">val</span> bt_combine2 = find&lt;Button&gt;(R.id.bt_combine2)</span><br><span class="line">bt_combine2.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> translate = ObjectAnimator.ofFloat(bt_combine2, TRANSLATIONX,</span><br><span class="line">            it.translationX, -<span class="number">500f</span>, it.translationX)</span><br><span class="line">    translate.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> rotate = ObjectAnimator.ofFloat(bt_combine2, ROTATE, <span class="number">0f</span>, <span class="number">360f</span>);</span><br><span class="line">    rotate.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> alpha = ObjectAnimator.ofFloat(bt_combine2, ALPHA, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">    alpha.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> scaleX = ObjectAnimator.ofFloat(bt_combine2, SCALEX, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    scaleX.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> scaleY = ObjectAnimator.ofFloat(bt_combine2, SCALEY, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    scaleY.duration = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">    translate.addListener(<span class="keyword">object</span> : Animator.AnimatorListener &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line">            rotate.start()</span><br><span class="line">            alpha.start()</span><br><span class="line">            rotate.addListener(<span class="keyword">object</span> : Animator.AnimatorListener &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line">                    scaleX.start()</span><br><span class="line">                    scaleY.start()</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationCancel</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationCancel</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    translate.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合实现方式3</span></span><br><span class="line"><span class="keyword">val</span> bt_combine3 = find&lt;Button&gt;(R.id.bt_combine3)</span><br><span class="line">bt_combine3.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> translate = ObjectAnimator.ofFloat(bt_combine3, TRANSLATIONX,</span><br><span class="line">            it.translationX, <span class="number">500f</span>, it.translationX)</span><br><span class="line">    translate.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> rotate = ObjectAnimator.ofFloat(bt_combine3, ROTATE, <span class="number">0f</span>, <span class="number">360f</span>);</span><br><span class="line">    rotate.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> alpha = ObjectAnimator.ofFloat(bt_combine3, ALPHA, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">    alpha.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> scaleX = ObjectAnimator.ofFloat(bt_combine3, SCALEX, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    scaleX.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> scaleY = ObjectAnimator.ofFloat(bt_combine3, SCALEY, <span class="number">1f</span>, <span class="number">2f</span>, <span class="number">1f</span>)</span><br><span class="line">    scaleY.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">set</span> = AnimatorSet()</span><br><span class="line">    <span class="keyword">set</span>.play(scaleX).with(scaleY).after(rotate)</span><br><span class="line">    <span class="keyword">set</span>.play(translate).before(rotate)</span><br><span class="line">    <span class="keyword">set</span>.play(rotate).with(alpha)</span><br><span class="line">    <span class="keyword">set</span>.duration = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">set</span>.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="http://upload-images.jianshu.io/upload_images/1976147-94485bddf821bf8d.gif?imageMogr2/auto-orient/strip" alt="combine.gif"></p>
<p>本篇暂时到这里。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
        <tag>属性动画</tag>
      </tags>
  </entry>
  <entry>
    <title>Android动态加载dex初试</title>
    <url>/2017/08/06/Android%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDdex%E5%88%9D%E8%AF%95/</url>
    <content><![CDATA[<p>最近想研究一波插件化，在简书上看到<a href="http://www.jianshu.com/p/353514d315a7">这个</a>感觉还不错，就按照这个顺序看下去了。不过得小记一下，省的以后我还得去上面提到的文里去找链接。我这里记得就是自己操作的一遍流程。。其实我也是根据他的文来操作的，属于HelloWorld级别吧。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>本来还想介绍一下概念，想了想，算了，不误人子弟了。感兴趣自己搜。</p>
<h3 id="1-新建工程"><a href="#1-新建工程" class="headerlink" title="1.新建工程"></a>1.新建工程</h3><p>没什么好说的，打开Android Studio新建一个工程都会吧。我这里新建了一个名为fordex的项目，包名为com.xiasuhuei321.firstpro。</p>
<h3 id="2-新建一个接口和一个类"><a href="#2-新建一个接口和一个类" class="headerlink" title="2.新建一个接口和一个类"></a>2.新建一个接口和一个类</h3><span id="more"></span>
<p>接口和类非常简单，类是接口的实现类，主要功能就是弹一个Toast。接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IShowToast</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">showToast</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowToastImpl</span> <span class="keyword">implements</span> <span class="title">IShowToast</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToast</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我来自另一个dex文件&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="3-利用Android-Studio的build-gradle生成jar包"><a href="#3-利用Android-Studio的build-gradle生成jar包" class="headerlink" title="3.利用Android Studio的build.gradle生成jar包"></a>3.利用Android Studio的build.gradle生成jar包</h3><p>eclipse生成jar包是非常简单的，在Android Studio里面可以利用build.gradle生成jar包，记得在app下的build.gradle中输入下面的代码：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task clearJar(<span class="attr">type:</span> Delete)&#123;</span><br><span class="line">    delete(<span class="string">&#x27;libs/dynamic.jar&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打包任务</span></span><br><span class="line">task makeJar(<span class="attr">type:</span>org.gradle.api.tasks.bundling.Jar) &#123;</span><br><span class="line">    <span class="comment">//指定生成的jar名</span></span><br><span class="line">    baseName <span class="string">&#x27;dynamic&#x27;</span></span><br><span class="line">    <span class="comment">//从哪里打包class文件</span></span><br><span class="line">    from(<span class="string">&#x27;build/intermediates/classes/debug/com/xiasuhuei321/firstpro/&#x27;</span>)</span><br><span class="line">    <span class="comment">//打包到jar后的目录结构</span></span><br><span class="line"><span class="comment">//    into(&#x27;src/main/java/com/xiasuhuei/firstpro/&#x27;)</span></span><br><span class="line">    into(<span class="string">&#x27;com/xiasuhuei321/firstpro/&#x27;</span>)</span><br><span class="line">    <span class="comment">//去掉不需要打包的目录和文件</span></span><br><span class="line">    exclude(<span class="string">&#x27;test/&#x27;</span>, <span class="string">&#x27;IShowToast.class&#x27;</span>, <span class="string">&#x27;BuildConfig.class&#x27;</span>, <span class="string">&#x27;R.class&#x27;</span>)</span><br><span class="line">    <span class="comment">//去掉R$开头的文件</span></span><br><span class="line">    exclude&#123; it.name.startsWith(<span class="string">&#x27;R$&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line">makeJar.dependsOn(clearJar, build)</span><br></pre></td></tr></table></figure>
<p>生成的jar包在app/build/libs中</p>
<h3 id="4-利用dx工具生成dex"><a href="#4-利用dx工具生成dex" class="headerlink" title="4.利用dx工具生成dex"></a>4.利用dx工具生成dex</h3><p>dx工具在sdk下的build-tools中，我这里将dx的目录配置到.bash.profile中了，可以直接用dx命令。windows可以像我一样配置系统变量即可，也可以切换到build-tools目录中执行dx命令。mac或者linux也可以切换到该目录，然后./dx执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dx --dex --output=/Users/lj/Desktop/duijie/dynamic_dex.jar /Users/lj/Desktop/duijie/dynamic.jar </span><br></pre></td></tr></table></figure>
<p>前一个是dex输出位置，后一个是当前jar包位置（我这里把jar拷贝出来了）。生成新的jar之后解压看一下里面有啥：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-aef471d904e8105e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有啥"><br>原来dex就在这个jar里面。</p>
<h3 id="5-通过生成dex加载实现类"><a href="#5-通过生成dex加载实现类" class="headerlink" title="5.通过生成dex加载实现类"></a>5.通过生成dex加载实现类</h3><p>因为这个3.0的预览版点了个支持kotlin，就用kotlin写了一小段，不过个人觉得并不影响阅读，毕竟没什么难的代码。首先将生成的jar拷贝到项目的assets目录中。首先是文件拷贝操作：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Context.<span class="title">copyFiles</span><span class="params">(fileName: <span class="type">String</span>, desFile: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> input = assets.<span class="keyword">open</span>(fileName)</span><br><span class="line">    <span class="keyword">val</span> output = FileOutputStream(desFile.absoluteFile)</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: ByteArray = kotlin.ByteArray(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">var</span> i: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        i = input.read(<span class="keyword">data</span>)</span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>) <span class="keyword">break</span></span><br><span class="line">        output.write(<span class="keyword">data</span>, <span class="number">0</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input.close()</span><br><span class="line">    output.close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给Context简单的扩展一个复制文件的方法，kotlin的特性，挺好使。</p>
<p>当然原项目中的接口实现类可以删了，目前目录底下是这些东西：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-ef25936dd973afc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录"></p>
<p>MainActivity：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        loadDexClass()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadDexClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cacheFile = externalCacheDir</span><br><span class="line">        <span class="keyword">var</span> internalPath = cacheFile.absolutePath+ File.separator+<span class="string">&quot;dynamic_dex.jar&quot;</span></span><br><span class="line">        <span class="keyword">var</span> desFile = File(internalPath)</span><br><span class="line">        <span class="keyword">if</span>(!desFile.exists())&#123;</span><br><span class="line">            desFile.createNewFile()</span><br><span class="line">            copyFiles(<span class="string">&quot;dynamic_dex.jar&quot;</span>,desFile)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始加载dex class</span></span><br><span class="line">        <span class="keyword">val</span> dexClassLoader = DexClassLoader(internalPath,cacheFile.absolutePath,<span class="literal">null</span>,classLoader)</span><br><span class="line">        <span class="keyword">val</span> libClazz = dexClassLoader.loadClass(<span class="string">&quot;com.xiasuhuei321.firstpro.ShowToastImpl&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> impl = libClazz.newInstance() <span class="keyword">as</span> IShowToast</span><br><span class="line">        impl.showToast(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后的执行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-968fd01f98ee0da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<p>整个流程比较简单，不需要赘述了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>动态加载dex</tag>
      </tags>
  </entry>
  <entry>
    <title>Android消息机制浅析</title>
    <url>/2016/05/29/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>如果你在看本文之前没有对Android消息机制作过了解，可能会比较吃力，关于源码，不需要全部看懂，能看懂其中关键的几句代码就行了。如果在阅读过程中感到吃力，请直接跳到结尾部分看概述。</p>
<p>最近在看《Android开发艺术探索》，感觉真的是一本好书，恩，让我非常有读完欲望的一本书。话不多说，分享一下我的读书收获。</p>
<p>Android中的耗时操作需要在子线程中完成，当这些操作完成后可能会需要对UI进行相应的更新。但是Android中的UI不是线程安全的，在多线程中并发访问可能会导致UI控件处于不可预期的状态。Google没有用上锁机制来解决这个问题，而是让开发者通过Handler切换线程来达到更新UI的目的。<strong>Handler</strong>是Android消息机制的上层接口，想要解析Android消息机制还需要了解<strong>Looper</strong>和**消息队列(MessageQueue)**。</p>
<p>在具体的了解Handler、Looper和MessageQueue之前，先让我们把我们平时切换线程的流程过一遍。首先我们在主线程中创建Handler，然后在子线程中通过handler的sendMessage方法将携带子线程操作结果的数据传出，通过handler的handleMessage方法进行UI的更新，代码如下：</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    //注1</span><br><span class="line">    private Handler handler = new Handler()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            tvContent.setText((String)msg.obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    private TextView tvContent;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tvContent = (TextView) findViewById(R.id.tv_content);</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                //...一些耗时操作</span><br><span class="line"></span><br><span class="line">                //耗时操作的结果</span><br><span class="line">                String result = &quot;我是结果&quot;;</span><br><span class="line"></span><br><span class="line">                Message msg = Message.obtain();</span><br><span class="line">                msg.obj = result;</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 注1：这篇算是挺久之前的文了吧，现在看来有一个比较致命的东西，private Handler handler;这个东西是一个内部类，在Java中内部类都会隐含的持有一个外部类的引用，一般来说这个外部类的引用就是Activity。如果因为Handler持有了Activity的引用而导致Activity无法被销毁，则会导致内存泄露，解决方法就是用static修饰，static修饰的内部类不会持有外部类的引用。但是很快你就会发现因为他是静态的，所以无法使用外部类的成员了，这对我们更新UI又是个阻碍，你可以考虑采用SoftReference的技术，在Handler内部持有一个activity的软引用，在软引用不为空的情况下通过这个弱引用去访问外部类的成员。</p>
<p>因为代码比较简单，就不上结果图了。接下来解析一下以上简单的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private Handler handler = new Handler()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(Message msg) &#123;</span><br><span class="line">        tvContent.setText((String)msg.obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>首先是构造一个Handler对象，用的是默认的构造方法，看一下源码是如何实例化的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Handler() &#123;</span><br><span class="line">    this(null, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再追踪一下源码，发现最终是用的如下的构造方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Handler(Callback callback, boolean async) &#123;</span><br><span class="line">    if (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">        final Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == 0) &#123;</span><br><span class="line">            Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +</span><br><span class="line">                klass.getCanonicalName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mLooper = Looper.myLooper();</span><br><span class="line">    if (mLooper == null) &#123;</span><br><span class="line">        throw new RuntimeException(</span><br><span class="line">            &quot;Can&#x27;t create handler inside thread that has not called Looper.prepare()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    mQueue = mLooper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说实话大部分代码我也是看不懂的，但是mLooper = Looper.myLooper()和mQueue = mLooper.mQueue，可以看出Handler得到了一个Looper和一个“队列”。查看myLooper方法的注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Return the Looper object associated with the current thread.  Returns </span></span><br><span class="line"><span class="comment">* null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>返回的是当前线程的Looper，如果当前线程没有Looper就返回null。所以在Handler的构造方法中，会有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">        <span class="string">&quot;Can&#x27;t create handler inside thread that has not called Looper.prepare()&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以在没有Looper的线程中创建Handler对象会抛以上异常。我们可以为没有Looper的线程创建一个Looper不过这里先不谈。看完了如何创建Handler之后，继续我们的流程，在子线程中我们使用handler的sendMessage()方法发送了一个Message对象，让我们看看这背后隐藏了怎样的py交……，不，怎样的操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final boolean sendMessage(Message msg)</span><br><span class="line">&#123;</span><br><span class="line">    return sendMessageDelayed(msg, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过追踪源码发现最终执行了如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean sendMessageAtTime(Message msg, long uptimeMillis) &#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    if (queue == null) &#123;</span><br><span class="line">        RuntimeException e = new RuntimeException(</span><br><span class="line">                this + &quot; sendMessageAtTime() called with no mQueue&quot;);</span><br><span class="line">        Log.w(&quot;Looper&quot;, e.getMessage(), e);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后一句代码是向queue中插入msg的意思，也就是说handler.sendMessage()这个方法所执行的操作就是向消息队列插入了一条message，那么这条消息又是经历了怎样的辗转才切换到了当前线程呢？显然这其中有Looper的参与,不过在了解Looper之前，需要先了解一下MessageQueue。</p>
<hr>
<p>#MessageQueue#<br>MessageQueue虽然叫消息队列，但实际上他是通过一个单链表的数据结构来维护消息列表。至于为什么采用单链表的数据结构，因为MessageQueue主要操作是插入和读取，而读取包含着删除操作，而单链表在插入和删除上比较有优势。关于MessageQueue还需要知道enqueueMessage()是插入操作，next()是读取并且删除的操作。需要了解的暂时就这么多了。</p>
<hr>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>Looper会不停地从MessageQueue中查看是否有新消息，如果有新消息就会立刻处理，否则就一直阻塞在那里。Looper最重要的方法便是loop()方法，让我们看一下loop()方法是怎样的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">    Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        Printer logging = me.mLogging;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span> +</span><br><span class="line">                    msg.callback + <span class="string">&quot;: &quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">        <span class="comment">// identity of the thread wasn&#x27;t corrupted.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">&quot;Thread identity changed from 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(ident) + <span class="string">&quot; to 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(newIdent) + <span class="string">&quot; while dispatching to &quot;</span></span><br><span class="line">                    + msg.target.getClass().getName() + <span class="string">&quot; &quot;</span></span><br><span class="line">                    + msg.callback + <span class="string">&quot; what=&quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果MessageQueue的next方法返回了新的消息，Looper就会处理这条消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msg.target.dispatchMessage(msg);</span><br></pre></td></tr></table></figure>

<p>msg.target就是发送这条消息的Handler对象，这样Handler发送的消息最终又交给它的dispatchMessage方法来处理了。查看dispatchMessage方法源码会发现，我们之前使用的Handler的构造方法和得到Message对象的方法，最终会导致dispatchMessage方法调用handleMessage方法。</p>
<hr>
<h2 id="总结与拓展"><a href="#总结与拓展" class="headerlink" title="总结与拓展"></a>总结与拓展</h2><p>总的来说，我们平常使用Handler所经历的流程就是：<br>１.使用当前线程的Looper对象创建Handler。<br>２.handler.sendMessage()向Looper中的消息队列插入消息。<br>３.Looper通过loop方法获取消息队列的新消息，通过msg.target(发送消息的Handler)调用dispatchMessage方法处理消息。而该方法在loop方法中被调用，loop被当前线程Looper调用，所以该消息被切换到当前线程中执行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-51727507a12e18e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程.png"></p>
<p>　　在了解了Android的消息机制之后，我们可以尝试使用Handler和Looper实现两个子线程之间的消息传递。通过new Thread()创建的线程并没有Looper，为他创建一个Looper就可以使用Handler了。Looper可以通过prepare方法来创建，好了说明就到这，直接上代码！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Handler mhandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        thread1.setName(<span class="string">&quot;Thread#1&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        mhandler = thread1.getHandler();</span><br><span class="line">        <span class="keyword">while</span>(mhandler == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mhandler = thread1.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    Message msg = Message.obtain();</span><br><span class="line">                    msg.obj = System.currentTimeMillis();</span><br><span class="line">                    mhandler.sendMessage(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Thread#2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Handler mhandler;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mhandler;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//为该线程创建Looper</span></span><br><span class="line">            Looper.prepare();</span><br><span class="line">            <span class="comment">//初始化handler</span></span><br><span class="line">            mhandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    Log.i(TAG, Thread.currentThread().getName() + <span class="string">&quot; the message is:&quot;</span> + msg.obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Looper.loop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-e2562d08f3400709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果.png"></p>
<p>很明显,Thread#2成功地将消息传递到了Thread#1的handler中。其实关于Looper.prepare()也值得深究，涉及到了ThreadLocal，不过我这里就不管了。<br>　　<br>最后再安排一下今后一段时间内要做的事，从第一篇简书文章到这第二篇，中间隔了很久了。倒是没有偷懒，一直在敲代码，不过最近算是把一直想做的东西做了，是时候来一波学习总结了。</p>
<blockquote>
<p>资料来源：《Android开发艺术探索》</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android测试</title>
    <url>/2017/02/05/Android%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我开发经验比较少，这公司也不算太靠谱，由于经验尚浅，很多代码有的时候也有不少毛毛糙糙的地方，没测试，那就自己撸起袖管上吧。本文小记一下我看别人的文所得和一些翻译。</p>
<h2 id="创建有效的单元测试"><a href="#创建有效的单元测试" class="headerlink" title="创建有效的单元测试"></a>创建有效的单元测试</h2><p><a href="https://developer.android.com/training/testing/unit-testing/index.html">Building Effective Unit Tests</a> 这个是原文地址，想看原文的可以自己看一下，下面是我自己的翻译= =，比较渣。</p>
<p>单元测试是在你的应用中基本的测试策略。通过创建和运行单元测试检验你的代码，你可以很容易校验个别单元的逻辑是否正确。当你重构代码时，运行单元测试能帮助你快速的修复软件和复原。</p>
<p>单元测试通常是反复测试尽可能小的代码单元（可以是一个方法，类或者组件）。你应该在你的app中的特定代码逻辑需要校验的时候创建单元测试。举个例子来说：如果你正在对一个类进行单元测试，你的测试可能会检查那个类是否处于一个正常的状态。通常被测试的代码单元是孤立的。你的测试仅仅影响和检测那个单元的变化。 <a href="http://en.wikipedia.org/wiki/Mock_object">mocking framework</a>可以被用来使你的单元从他的依赖上隔离。</p>
<span id="more"></span>

<p>注意：单元测试并不适合测试复杂的UI相互作用的事件。取而代之的是，你应该使用UI 测试框架，在 <a href="https://developer.android.com/training/testing/ui-testing/index.html">Automating UI Tests</a> 中有描述。</p>
<p>为了测试Android apps，你通常会创建这些种类的自动化单元测试：</p>
<ul>
<li>Local tests（本地测试）：单元测试只在你本地的机器上运行，这些测试在最短时间内被编译在Java虚拟机上运行。通过这个途径运行单元测试不必依赖Android框架或者和使用摸你对象填充有依赖关系。</li>
<li>Instrumented tests（仪器？测试）：在Android设备或模拟器上运行单元测试。这些测试可使用仪器信息，比如为了app测试使用Context上下文。通过这个途径运行单元测试拥有Android的依赖不可以轻易的使用模拟对象。</li>
</ul>
<p>** <a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests.html">Building Local Unit Tests</a> **<br>学习如何创建运行在你本地机器上的单元测试</p>
<p>** <a href="https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html">Building Instrumented Unit Tests</a> **<br>学习如何创建运行在Android设备或者模拟器上的单元测试</p>
<h2 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h2><p>我在这写的两个小例子都是非常简单的，无法作为应用在项目中的参考，如果有你有这个需求，需要你自己去看这几个测试框架的api文档！</p>
<h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>首先引入测试框架：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile &#x27;junit:junit:4.12&#x27;</span><br><span class="line">    testCompile &#x27;org.mockito:mockito-core:1.10.19&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JUnit是Java里最受欢迎也是应用最广泛的测试框架，而mockito是模拟测试框架。这二者有什么关系呢？我们写代码的时，各种类之间充满了依赖关系。当你测试一个类的时候，可能并不想测试他所依赖的类是否正常，因为你默认它是正常好用的。那么这个时候你就可以用Mockito框架，创建一个模拟对象，JUnit 4比之前好用了不少，只用添加各种注解就能完成简单的测试，看到这你一定很感兴趣了，那么让我们来看一段简单的代码：<br>首先在新建项目，在项目里代码文件夹下新建一个Calculator类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by xiasuhuei321 on 2017/2/4.</span><br><span class="line"> * author:luo</span><br><span class="line"> * e-mail:xiasuhuei321@163.com</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Calculator &#123;</span><br><span class="line"></span><br><span class="line">    public double sum(double a, double b)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double substract(double a, double b)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double divide(double a, double b)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double multiply(double a, double b)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我都是返回0，故意的，看看等会测试能不能测出来，接着在test的代码文件夹下新建CalculatorTest测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xiasuhuei321 on 2017/2/4.</span><br><span class="line"> * author:luo</span><br><span class="line"> * e-mail:xiasuhuei321@163.com</span><br><span class="line"> */</span><br><span class="line">public class CalculatorTest &#123;</span><br><span class="line"></span><br><span class="line">    private Calculator mCalculator;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() throws Exception &#123;</span><br><span class="line">        this.mCalculator = new Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void sum() throws Exception &#123;</span><br><span class="line">        assertEquals(6d, mCalculator.sum(1d, 5d), 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void substract() throws Exception &#123;</span><br><span class="line">        assertEquals(1d, mCalculator.substract(5d, 4d), 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void divide() throws Exception &#123;</span><br><span class="line">        assertEquals(4d, mCalculator.divide(20d, 5d), 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void multiply() throws Exception &#123;</span><br><span class="line">        assertEquals(10d, mCalculator.multiply(2d, 5d), 0);</span><br><span class="line">        assertEquals(0d, mCalculator.multiply(0d, 100d),0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面@Before意思是在 @Test注解的方法之前执行这个方法，可以用来初始化一些类。@Test自然就是测试方法了。</p>
<p>接着右键点击测试类，选择Run：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-08033199247bb704.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"><br>]<br>结果显而易见没通过测试：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-1d39143f79c26f82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没通过测试"><br>整个过程都没有将程序运行到Android设备上，和上面讲的一样，这就是在本地的JVM虚拟机上跑的，很方便。现在我们将Calculator类改为正确的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/2/4.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">substract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次运行刚写好的单元测试，看看结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-6eafe501bcf0313c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过"></p>
<p>这次通过了，可以发现在修改源代码之后，可以通过这个单元测试的代码来校验修改后的代码逻辑。这对于重构代码来说很有帮助。</p>
<p>上面只是一个简单的例子，在实际代码中，可能我们通过构造方法创建一个对象的时候，还需要依赖另外一个对象，但是如果依赖的对象对我这个测试并没有什么影响，那么就可以用Mockito测试框架来创建一个模拟对象。下面的小例子只是为了说明一下创建模拟对象，就不去耗费脑细胞想应用场景了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.mockito.Mock;</span><br><span class="line">import org.mockito.MockitoAnnotations;</span><br><span class="line">import org.mockito.runners.MockitoJUnitRunner;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line">import static org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xiasuhuei321 on 2017/2/4.</span><br><span class="line"> * author:luo</span><br><span class="line"> * e-mail:xiasuhuei321@163.com</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RunWith(MockitoJUnitRunner.class)</span><br><span class="line">public class MockTest &#123;</span><br><span class="line">    @Mock</span><br><span class="line">    Context mContext;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testAppName() &#123;</span><br><span class="line">        when(mContext.getString(R.string.app_name))</span><br><span class="line">                .thenReturn(&quot;JpushDemo&quot;);</span><br><span class="line">        assertEquals(&quot;名字不同！&quot;, &quot;JpushDemo&quot;, mContext.getString(R.string.app_name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我类里有一个@Mock注解的Context类引用，在测试方法里我通过这个Context拿到了一个值，然后对比这两个值是否一致。这里就不贴通过测试的图了，各位感兴趣可以自己去看api文档。</p>
<h2 id="在物理设备上的测试"><a href="#在物理设备上的测试" class="headerlink" title="在物理设备上的测试"></a>在物理设备上的测试</h2><p>原话是Building Instrumented Unit Tests，上面介绍的是在本地JVM虚拟机上运行的检测单元逻辑的测试，这里的可以用来检测UI之类的逻辑，上一个网上看到的例子。</p>
<p>首先是配置环境，我没怎么配置，可能是高版本的as已经自己加入了这个测试框架了，我只在app下的build.gradle里的android下加入了这句话：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br></pre></td></tr></table></figure>
<p>xml布局：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.xiasuhuei321.jpushdemo.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;hello&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/editText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Enter your name here&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/editText&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;sayHello&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Say hello!&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>MainActivity:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.jpushdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        EditText editText = (EditText) findViewById(R.id.editText);</span><br><span class="line">        textView.setText(<span class="string">&quot;Hello,&quot;</span> + editText.getText().toString() + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.jpushdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.test.filters.LargeTest;</span><br><span class="line"><span class="keyword">import</span> android.support.test.rule.ActivityTestRule;</span><br><span class="line"><span class="keyword">import</span> android.support.test.runner.AndroidJUnit4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.Espresso.onView;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.action.ViewActions.click;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.action.ViewActions.closeSoftKeyboard;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.action.ViewActions.typeText;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.assertion.ViewAssertions.matches;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.matcher.ViewMatchers.withId;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.matcher.ViewMatchers.withText;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/2/4.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(AndroidJUnit4.class)</span></span><br><span class="line"><span class="meta">@LargeTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityInstrumentationTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STRING_TO_BE_TYPED = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivityTestRule&lt;MainActivity&gt; mActivityRule = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(MainActivity.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onView(withId(R.id.editText))</span><br><span class="line">                .perform(typeText(STRING_TO_BE_TYPED),</span><br><span class="line">                        closeSoftKeyboard());</span><br><span class="line"></span><br><span class="line">        onView(withText(<span class="string">&quot;Say hello!&quot;</span>)).perform(click());</span><br><span class="line"></span><br><span class="line">        String expectedText = <span class="string">&quot;Hello,&quot;</span> + STRING_TO_BE_TYPED + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">        onView(withId(R.id.textView))</span><br><span class="line">                .check(matches(withText(expectedText)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下运行的效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-8355e7ebd0959845.gif?imageMogr2/auto-orient/strip" alt="6.gif"></p>
<p>最后放下几个测试框架的api文档地址：<br>JUnit：<a href="http://junit.sourceforge.net/javadoc/">http://junit.sourceforge.net/javadoc/</a></p>
<p>Mockito：<a href="http://static.javadoc.io/org.mockito/mockito-core/2.7.1/overview-summary.html">http://static.javadoc.io/org.mockito/mockito-core/2.7.1/overview-summary.html</a></p>
<p>Espresso（UI自动测试框架）：<a href="https://google.github.io/android-testing-support-library/docs/espresso/index.html">https://google.github.io/android-testing-support-library/docs/espresso/index.html</a></p>
<p>这几个例子不是很详细，因为我也是在摸索。。。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>AsyncTask源码阅读笔记</title>
    <url>/2016/10/27/AsyncTask%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>感觉最近自己需要多读书，所以在以后的一段时间里可能都是笔记形式的文了，希望自己能厚积薄发吧。</p>
<h3 id="AsyncTask简介"><a href="#AsyncTask简介" class="headerlink" title="AsyncTask简介"></a>AsyncTask简介</h3><p>AsyncTask是一个轻量级的异步任务类，允许你将一个耗时操作放在后台进行，并且会返回操作的结果给你。那么AsyncTask和Thread-Handler或者线程池有什么异同呢？</p>
<p>在AsyncTask的源码注释里这样描述：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;AsyncTask enables proper and easy use of the UI thread. This class allows to</span></span><br><span class="line"><span class="comment"> * perform background operations and publish results on the UI thread without</span></span><br><span class="line"><span class="comment"> * having to manipulate threads and/or handlers.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>AsyncTask能让更加简便的使用UI线程。这个类允许执行后台操作和将结果发送到UI线程而不必操作线程和handlers。</p>
<span id="more"></span>

<p>读了上面的注释让我们对AsyncTask有了一定的了解，这是个方便我们的类，让我们在后台执行操作结果而不必自己手动的去切换线程，那么这个类是否有其他的限制呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** &lt;p&gt;AsyncTask is designed to be a helper class around &#123;<span class="doctag">@link</span> Thread&#125; and &#123;<span class="doctag">@link</span> Handler&#125;</span></span><br><span class="line"><span class="comment"> * and does not constitute a generic threading framework. AsyncTasks should ideally be</span></span><br><span class="line"><span class="comment"> * used for short operations (a few seconds at the most.) If you need to keep threads</span></span><br><span class="line"><span class="comment"> * running for long periods of time, it is highly recommended you use the various APIs</span></span><br><span class="line"><span class="comment"> * provided by the &lt;code&gt;java.util.concurrent&lt;/code&gt; package such as &#123;<span class="doctag">@link</span> Executor&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ThreadPoolExecutor&#125; and &#123;<span class="doctag">@link</span> FutureTask&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>AsyncTask被设计作为Thread和Handler间的帮助类，并非构建线程框架的通用类。AsyncTask理想情况下应该被用来进行短时间的操作，如果你需要保证线程长期运行，那么强烈推荐你使用java.util.concurrentpackage提供的多种API，例如Executor、ThreadPoolExecutor和FutureTask。</p>
<h3 id="简单的演示"><a href="#简单的演示" class="headerlink" title="简单的演示"></a>简单的演示</h3><p>上面简单的介绍了一下AsyncTask，下面看一下如何使用。AsyncTask提供了4个核心方法：</p>
<ul>
<li><p>onPreExecute()，在主线程中执行，在后台任务执行之前，此方法会被调用</p>
</li>
<li><p>doInBackground(Params… params)，此方法用于执行需要执行的异步任务</p>
</li>
<li><p>onProgressUpdata(Progress… values)，在主线程中执行，当后台任务的执行进度发生改变时此方法会被调用</p>
</li>
<li><p>onPostExecute(Result result)，在主线程中执行，返回操作结果，返回类型是doInBackground的返回值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> AsyncTask&lt;String, Integer, Bean&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;<span class="comment">//做一些准备工作</span></span><br><span class="line">        <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bean <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;<span class="comment">//后台任务</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;<span class="comment">//后台任务执行进度发生变化</span></span><br><span class="line">        <span class="keyword">super</span>.onProgressUpdate(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bean aLong)</span> </span>&#123;<span class="comment">//异步任务执行完成返回结果</span></span><br><span class="line">        <span class="keyword">super</span>.onPostExecute(aLong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.execute(url1,url2);</span><br></pre></td></tr></table></figure>
<p>上面的代码只是一个简单的实例，并非真的演示如何使用。以上代码中的三个参数可以理解为url、进度和自定义的数据类型。带入我们平时的开发中就是根据url拿到数据，然后在界面上更新进度。在方法中这样String… params表示不定数量的参数，是数组型的参数。上面的方法实际上运行的效果是串行执行的，你可能会说AsyncTask内部不是封装了一个线程池吗？为毛会是串行的？这个问题先留着，先把结论摆在这，而且我也在AsyncTask的源码中看到了如下的注释（原文不放了，感兴趣的请自己去看）：</p>
<p>调度任务是用队列单独的调度一个后台线程还是用线程池取决于平台版本。刚发布的时候，AsyncTask是以串行线程的方式执行的。从Android DONUT（1.6）开始允许多任务并发执行。在Android HONEYCOMB（3.0）之后又变成了单任务串行执行，这是为了避免由于并发操作可能带来的错误。如果你真的想要并发执行，你可以使用excuteOnExecutor和THREAD_POOL_EXECUTOR。</p>
<p>好了，读到这，终于对AsyncTask有了一些了解了，带着一些问题去看看源码吧。</p>
<h3 id="源码笔记"><a href="#源码笔记" class="headerlink" title="源码笔记"></a>源码笔记</h3><p>读源码先从AsyncTask的入口execute()开始看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调了一个方法，没啥好说的，跟进去看就行了，这里返回值是AsyncTask，方便我们持有一个AsyncTask的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="params"><span class="function">        Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot execute task:&quot;</span></span><br><span class="line">                        + <span class="string">&quot; the task is already running.&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> FINISHED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot execute task:&quot;</span></span><br><span class="line">                        + <span class="string">&quot; the task has already been executed &quot;</span></span><br><span class="line">                        + <span class="string">&quot;(a task can be executed only once)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mStatus = Status.RUNNING;</span><br><span class="line">    <span class="comment">//调用这个方法，如果你有实现，那么你的代码将在这被执行</span></span><br><span class="line">    onPreExecute();</span><br><span class="line">    <span class="comment">//拿到参数</span></span><br><span class="line">    mWorker.mParams = params;</span><br><span class="line">    <span class="comment">//开始运行</span></span><br><span class="line">    exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里先看mStatus，这东西是个枚举类型，里面仨值分别是：</p>
<ul>
<li>PENDING：任务还没有被执行过，表示可以被执行</li>
<li>RUNNING：任务正在执行</li>
<li>FINISHED：任务已经完成</li>
</ul>
<p>从代码中可以看出来只有这个值是PENDING的时候才会被执行，其他的值都会报异常，这就是AsyncTask对象只能运行一次的由来了，每次执行任务都需要新建一个AsyncTask对象（准确的来说是子类对象）。</p>
<p>在运行之后将mStatus的值改为RUNNING，之后这个对象就不能在其他的地方被执行了。可以看到在任务真正被执行之前调用了onPreExecute()方法，这就是这个方法可以做一些准备工作的原因。</p>
<p>之后先获取参数，再执行。这里先简单的说说，要弄懂最后这句exec.execute(mFuture);代码还需要结合前面的代码来看。</p>
<p>之前在前面说了AsyncTask内部有两个线程池，那么他要干啥为毛要两个线程池呢？因为一个线程池是串行的线程池，一个进程中的所有待执行的任务都会在这个串行的线程池中排队执行。接下来看一下AsyncTask内部的俩线程池在代码里长啥样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以并发执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</span><br><span class="line">        = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</span><br><span class="line">                TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在串行命令下一次执行一个任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br></pre></td></tr></table></figure>
<p>上面那个线程池是真正用来执行任务的，下面的是用来排队等待的。可以清楚的看到这俩是静态的，所以是全局共享这个就不做过多的解释了。那么按顺序来，从下面的线程池的execute()来看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//双端队列</span></span><br><span class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    Runnable mActive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将任务插入到任务队列中</span></span><br><span class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//如果当前没有正在执行的任务，那么执行下一个AsyncTask任务</span></span><br><span class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;<span class="comment">//取出这个任务</span></span><br><span class="line">            <span class="comment">//放入并发线程池中执行</span></span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从上面代码的流程我们可以认识到在我们不指定线程池的情况下，的确，我们的代码是以串行的方式被执行的。关于mFuture其真实类型是FutureTask，对此我们不需要再做更多的了解（其实我了解的也不多…），当然了如果你对Java的并发编程感兴趣可以自己去做更多的了解。在这我们需要知道的就是mFuture的run方法会调用mWorker的call方法，因此mWorker的call方法最终会在线程池中执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//表示当前任务已经被调用过了</span></span><br><span class="line">        mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">        <span class="comment">//执行我们的代码</span></span><br><span class="line">        <span class="comment">//noinspection unchecked</span></span><br><span class="line">        Result result = doInBackground(mParams);</span><br><span class="line">        Binder.flushPendingCommands();</span><br><span class="line">        <span class="comment">//发送操作结果</span></span><br><span class="line">        <span class="keyword">return</span> postResult(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以上可以看到我们希望在后台执行的代码被调用了，并且结果被postResult这个方法发送了，跟进去看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接看这个消息在Handler里面是怎么处理的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Looper.getMainLooper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;RawUseOfParameterizedType&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                <span class="comment">// There is only one result</span></span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这可以看到这个Handler是一个静态类，静态类会在类被加载的时候就被初始化，而Handler的初始化时需要looper()的，所以这就需要你在主线程中使用AsyncTask。否则要么出错，要么AsyncTask就被你废了。好了，继续看，在对应的情况底下调用了AsyncTask的finish方法，看下是啥：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">        onCancelled(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onPostExecute(result);</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.FINISHED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果被取消，就调取消的方法，不然的话就回调这个onPostExecute(result)，由于是经过handler发送的，所以线程已经切换到了AsyncTask调用的线程中去了（关于这个如果你有不明白可以看我的<a href="http://www.jianshu.com/p/e6dec5f39d09">Android消息机制浅析</a>），我们就可以在主线程中开心的使用这个结果去更新UI了。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>AsyncTask用起来比较方便，但是特别耗时的操作并不适合用它来执行。</li>
<li>AsyncTask默认是串行执行，但是你可以通过指定执行的线程池来让他并发执行。</li>
<li>AsyncTask对象只能被执行一次。</li>
<li>AsyncTask使用Handler来切换线程。</li>
<li>AsyncTask一般情况下都是需要在主线程被实现和调用的。</li>
<li>AsyncTask在不同版本的Android上可能会有不同的表现，但是现在用户Android版本普遍在4.0以上，这个就无需考虑了。</li>
</ul>
<p>参考资料：<br>《Android开发艺术探索》<br>源码版本：Android 7.0  api 24</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android自定义View你需要了解的一些东西(巨图预警)</title>
    <url>/2016/08/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF(%E5%B7%A8%E5%9B%BE%E9%A2%84%E8%AD%A6)/</url>
    <content><![CDATA[<p>###写在前面###<br>终于周末了，当我想要松懈一会去浪的时候，脑海中突然闪过了这个东西……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-6d1bda58afc75f85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="学习.jpg"><br>一图胜千言，日常唠嗑（1/1）。</p>
<p>###1 进入正题###<br>Android中自定义控件一直是一个比较难但又不得不面对的东西，虽然<strong>github+google</strong>能解决你的大部分需求，但是说实话，当一些bug发生在第三方控件上时，你仍然需要花费大量的时间去搞定。所以先了解一些和自定义相关的东西绝对是不亏的，话不多说，进入正题。</p>
<p>Android中自定义控件一般分以下三种：</p>
<span id="more"></span>
<ul>
<li>继承已有控件实现，可以理解为对原有控件功能的加强</li>
<li>组合控件，将多个控件结合在一起实现一些功能</li>
<li>完全自定义控件，一般继承于View或者ViewGroup</li>
</ul>
<p>这三类控件在实现方式上有什么异同呢？一般来说第一种控件是对于原有控件功能的增强，比如给ListView增加下拉刷新，上拉加载更多的功能，我们不需要考虑ListView中每个item如何测量如何绘制，我们需要考虑的是如何实现需要增添的功能。第二种组合几种控件，比如轮播图的实现，你可以组合Viewpager+ImageView，这东西说实话也就是功能的实现，但是如果你没有封装好则会让你的代码显得杂乱无章。第三种则是比较难以上手的，因为他需要你了解一些View相关的知识。</p>
<p>View相关的东西很多，多到可以另开一篇文章写了，所以我尽量摘取重点，咳咳，大伙注意听了啊，小本本都可以拿出来了啊，xiasuhuei老师开始划重点了啊。</p>
<p>###2 xiasuhuei321的重点###<br>一个展示在屏幕上的View需要经历measure(测量)，layout(布局)，和draw(绘制)三个过程，其中measure确定View的宽高，layout确定View的最终宽高和四个顶点的位置，而draw则将View绘制到屏幕上。</p>
<p>为了更好的了解这个过程，我们首先需要了解的一个东西就是<strong>MeasureSpec</strong>：<br>MeasureSpec是一个32位的int值，高2位代表SpecMode，低30位代表SpecSize。SpecMode代表测量模式，SpecSize代表的是在前一种测量模式下的测量值。</p>
<p>了解了MeasureSpec后，我们需要了解<strong>SpecMode</strong>：<br>SpecMode有三种，表示三种测量模式：</p>
<p>1)UNSPECIFIED：<br>要多大给多大，父容器不对View有任何限制，这种情况一般不需要我们考虑。</p>
<p>2)EXACTLY<br>从字面上就能看出来，精确模式，包含了你声明控件宽高的数值和match_parent这两种情况。</p>
<p>3)AT_MOST<br>对应于wrap_content，这里需要注意，AT_MOST是父容器制定了一个SpecSize，View的大小不能大于这个值。如果你继承于View的代码没有处理wrap_content的话，那么wrap_content和match_parent的效果是一样的。</p>
<p>以上大概讲了一点View相关的知识，View相关的东西远远不及这些，有兴趣可以查阅其他的资料或者阅读源码了解，我这里便不再赘述了。</p>
<p>###3 自定义控件小案例——验证码###<br>最近在看<a href="http://blog.csdn.net/lmj623565791/article/details/24252901">hongyang</a>大神的博客，刚好翻到了这个小案例，让我通过这个小案例一步一步的为你解析完全自定义控件(继承于View)的神秘面纱。</p>
<p>在上手做之前先分析一下这个验证码需要我们实现的功能：<br>1.生成随机数字或者字符串<br>2.点击要能够更换字符串</p>
<p>一个自定View要能做到以下几点：<br>1)自定义View的属性，要能在xml文件里直接用，方便使用<br>2)重写omMeasure<br>3)重写onDraw<br>第二步并不是必须的，但如果你的东西需要能处理wrap_content的话，那你还是乖乖的重写onMeasure去处理吧。</p>
<p>让我们跟着以上的步骤过一遍：<br>####3.1 自定义View属性<br>在res/values下新建一个attrs.xml文件，在里面定义我们的属性和声明。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleText&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleTextColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleTextSize&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;CustomTitleView&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleText&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleTextColor&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleTextSize&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你用的是eclipse的话，需要你在xml文件里添加</p>
<blockquote>
<p>xmlns:custom=”<a href="http://schemas.android.com/apk/res/+%E5%8C%85%E5%90%8D">http://schemas.android.com/apk/res/+包名</a></p>
</blockquote>
<p>而如果你是Android Studio的话则添加以下：</p>
<blockquote>
<p>xmlns:custom=”<a href="http://schemas.android.com/apk/res-auto&quot;">http://schemas.android.com/apk/res-auto&quot;</a></p>
</blockquote>
<p>自定义属性有以下几种值:</p>
<ul>
<li>color：颜色值</li>
<li>boolean：布尔值</li>
<li>dimesion：尺寸值</li>
<li>float：浮点值</li>
<li>integer：整型值</li>
<li>string：字符串</li>
<li>fraction：百分数</li>
<li>enum：枚举值</li>
<li>reference：引用</li>
</ul>
<p>以上仅仅是说明一下，如果以后有用到碰到不明白的可以google或者百度。</p>
<p>这样就能够在xml文件里使用我们自定义的属性了，之后我们在代码中定义相应的字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String mTitleText;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本的颜色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTitleTextColor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTitleTextSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制时控制文本绘制的范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Rect mBound;    </span><br><span class="line"><span class="keyword">private</span> Paint mPaint;</span><br></pre></td></tr></table></figure>

<p>接下来需要我们做的便是获取这些属性，并且在代码中作出相应的处理。</p>
<p>在代码中获取属性值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomTitleView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取我们所定义的自定义样式属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TypedArray a = context.getTheme()</span><br><span class="line">            .obtainStyledAttributes(attrs, R.styleable.CustomTitleView, defStyleAttr, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = a.getIndexCount();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> attr = a.getIndex(i);</span><br><span class="line">        <span class="keyword">switch</span> (attr) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleText:</span><br><span class="line">                mTitleText = a.getString(attr);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextColor:</span><br><span class="line">                <span class="comment">//默认颜色为黑色</span></span><br><span class="line">                mTitleTextColor = a.getColor(attr, Color.BLACK);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.styleable.CustomTitleView_titleTextSize:</span><br><span class="line">                <span class="comment">//默认设置为16sp,TypeValue也可以把sp转化为px</span></span><br><span class="line">                mTitleTextSize = a.getDimensionPixelSize(attr, (<span class="keyword">int</span>) TypedValue.applyDimension(</span><br><span class="line">                        </span><br><span class="line">                TypedValue.COMPLEX_UNIT_SP, <span class="number">16</span>, getResources().getDisplayMetrics()));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a.recycle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取绘制文本的宽和高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    mPaint.setTextSize(mTitleTextSize);</span><br><span class="line">    mBound = <span class="keyword">new</span> Rect();</span><br><span class="line">    mPaint.getTextBounds(mTitleText, <span class="number">0</span>, mTitleText.length(), mBound);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取随机字符串</span></span><br><span class="line">            mTitleText = randomText();</span><br><span class="line">            postInvalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    a.recycle();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>前面我说如果继承于View的控件在代码中不对wrap_content作出处理，那么这个控件的wrap_content和match_parent的效果将会是一样的，那么就让我们试一试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">       Log.i(TAG,<span class="string">&quot;onDraw&quot;</span>);</span><br><span class="line">       mPaint.setColor(Color.YELLOW);</span><br><span class="line">       canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight(), mPaint);</span><br><span class="line"></span><br><span class="line">       mPaint.setColor(mTitleTextColor);</span><br><span class="line">       canvas.drawText(mTitleText, getWidth() / <span class="number">2f</span> - mBound.width() / <span class="number">2f</span>, getHeight() / <span class="number">2f</span> + mBound.height() / <span class="number">2f</span>, mPaint);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>以上的onMeasure()方法直接继承于View，没有做任何的修改，在xml文件中声明如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.luo_pc.view.CustomView.CustomTitleView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">custom:titleText</span>=<span class="string">&quot;1234&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">custom:titleTextColor</span>=<span class="string">&quot;#ff0000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">custom:titleTextSize</span>=<span class="string">&quot;40sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>看好咯，我声明的是wrap_content对吧？让我们来看下运行的结果<br><img src="http://upload-images.jianshu.io/upload_images/1976147-569099babe8947c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="全屏.png"></p>
<p>黄色并非我设置的背景，而是想要包裹验证码的背景。正如我所说的，如果不处理的话，就是这种效果，很明显这不是我们想要的，那么该如何处理呢？</p>
<p>View的measure()方法是final的，所以这个方法是无法被重写的，但是View提供了onMeasure()方法让我们来处理这些事。onMeasure()方法中带了两个int类型的参数</p>
<blockquote>
<p>onMeasure(int widthMeasureSpec, int heightMeasureSpec)</p>
</blockquote>
<p>看着这两个东西有没有回想起什么，前面我们了解过MeasureSpec。而这两个正是系统测量出的View的宽和高的MeasureSpec，所以我们便可以在onMeasure()中处理wrap_content的问题。</p>
<p>首先处理宽度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Log.i(TAG,<span class="string">&quot;onMeasure&quot;</span>);</span><br><span class="line"><span class="comment">//设置宽度</span></span><br><span class="line"><span class="keyword">int</span> specMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line"><span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:   <span class="comment">//精准模式，包含指定大小和match_parent</span></span><br><span class="line">        width = getPaddingLeft() + getPaddingRight() + specSize;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:   <span class="comment">//一般为wrap_content</span></span><br><span class="line">        width = getPaddingLeft() + getPaddingRight() + mBound.width();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面说了MeasureSpec是SpecMode和SpecSize的打包，我们首先要做的就是拆包。然后根据specMode来确定宽度。如果是EXACTLY自不必多说，直接左右padding加上指定的宽度(或match_parent宽度)就是我们所需的width。而如果是AT_MOST，在本案例中则是我们绘制的矩形背景的宽度。在处理高度的时候也是同样的道理。最终完整onMeasure()代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    Log.i(TAG,<span class="string">&quot;onMeasure&quot;</span>);</span><br><span class="line">    <span class="comment">//设置宽度</span></span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:   <span class="comment">//精准模式，包含指定大小和match_parent</span></span><br><span class="line">            width = getPaddingLeft() + getPaddingRight() + specSize;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:   <span class="comment">//一般为wrap_content</span></span><br><span class="line">            width = getPaddingLeft() + getPaddingRight() + mBound.width();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置高度</span></span><br><span class="line">    specMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">    specSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">            height = getPaddingTop() + getPaddingBottom() + specSize;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">            height = getPaddingTop() + getPaddingBottom() + mBound.height();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setMeasuredDimension(width, height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后记得setMeasuredDimension(width, height);<br>如果不调用这个方法来存储width和height将会在View测量的过程中引发异常。其他的代码并没有变化，再跑一遍看看咋样了。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-f412effdda7368ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功处理"></p>
<p>恩，包住了，点击也能换数字了，不过如果是验证码的话，还需要一个获取验证码内容的方法，这个不难，直接在生成的时候设置一个就成了。还有一个是背景色，现在是写死的，如果我想换个颜色呢，我自己可以改源码，但是要给别人用的话可不能让人这么用。不过实现起来都很简单，直接上代码。</p>
<p>获取文字内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *生成随机数字字符串</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">randomText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (set.size() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> randomInt = random.nextInt(<span class="number">10</span>);</span><br><span class="line">        set.add(randomInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (Integer i : set) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    text = sb.toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置背景色，在attr的xml文件里加上两句:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleBackGroudColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在&lt;declare-styleable name=&quot;CustomTitleView&quot;&gt;中加入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;titleBackGroudColor&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在自定义View中加入获取此属性的case：<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> R.styleable.CustomTitleView_titleBackGroudColor:  </span><br><span class="line">          mTitleBackColor = a.getColor(attr,Color.YELLOW);</span><br></pre></td></tr></table></figure></p>
<p>在绘制时加入获取到的颜色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mPaint.setColor(mTitleBackColor);</span><br></pre></td></tr></table></figure>
<p>上面获取text的效果就不查看了，看代码就够一目了然了，下面我们将背景设置为灰色查看一下效果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.luo_pc.view.CustomView.CustomTitleView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:titleText</span>=<span class="string">&quot;1234&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:titleTextColor</span>=<span class="string">&quot;#ff0000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:titleTextSize</span>=<span class="string">&quot;40sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">custom:titleBackGroudColor</span>=<span class="string">&quot;#bcbcbc&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3391d5f9651f95f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="灰色.png"></p>
<p>再次重申一下，以上这个小案例是从<a href="http://blog.csdn.net/lmj623565791/article/details/24252901">hongyang</a>大神那看到的，各位如果想要深入学习自定义View，hongyang大神那的系列文章绝对是极好的。</p>
<p>参考资料：</p>
<blockquote>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/24252901">Android 自定义View (一)——by hongyang</a><br>《开发艺术探索》</p>
</blockquote>
<p>源码地址：<br><a href="http://download.csdn.net/detail/lmj623565791/7227061">hongyang的源码</a><br><a href="https://github.com/ForgetAll/View">我整理的Android Studio版源码</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>View探索</tag>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>Android透明状态栏解决方案</title>
    <url>/2016/08/28/Android%E9%80%8F%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>##写在前面##<br>最近新开了个项目，准备花点时间做一下，不过文也不能少，一周一篇是最起码的了。关于沉浸式状态栏，网上的教程应该是非常非常多的，那么我为什么还要发呢？很简单，有些东西我记不大住，所以都发到我的简书上，以后我就不用到处去找了，麻烦~</p>
<p>##自定义顶部布局的沉浸式状态栏##<br>什么叫自定义顶部布局呢？这个要首先解释一下，处于一些原因的考虑，有一些项目可能不愿意使用Toolbar或者ActionBar，进入Activity的第一件事情就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br></pre></td></tr></table></figure>
<p>或者</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br></pre></td></tr></table></figure>
<p>直接把顶部干掉，然后换上自己的顶部布局。对于这样的情况，先看一下实现之后的状况</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b0730b5fc85694ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="沉浸式.png"></p>
<p>效果好像还可以，那么究竟该怎么实现呢？</p>
<p>##Android5.0 LOLLIPOP##<br>为什么先讲Android5.0(API 21)呢，因为Android5.0之后可以直接改变状态栏的颜色，所以实现起来比较方便，先看一下xml配置实现的方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-2908263288f7e2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="values21.png"></p>
<p>首先我们需要新建一个values-v21，然后新建styles，代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowTranslucentStatus&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:statusBarColor&quot;</span>&gt;</span>#f13f00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后跑出来的效果就是上面的图的样子了，但是，这并没有什么用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b0f7e456225181b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并没有什么卵用"><br>是的，这并没有什么卵用，除了我们自己玩玩的项目，现在不可能直接把项目最小版本定为5.0，看看下面的版本分布你就能感受到了……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-81ef9a08860790cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分布图.png"></p>
<p>5.0版本以下的用户不可忽视，但是5.0以下的版本并没有可以改变状态栏颜色的方法，不过4.4(API 19)版本是可以将状态栏颜色设置为透明的，我们可以根据这一特性得出一些沉浸式状态栏的解决方案，而且我个人也比较推荐采用4.4及以上的这种解决方案。</p>
<p>##Android4.4 KITKAT##<br>首先和上面差不多，在res下新建values-v19这个文件夹，然后新建styles文件，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;ImageTranslucentTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowTranslucentStatus&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我仅仅是设置了透明状态栏，如果你有其他的需要可以自己添加进去。这个时候运行一下看看效果<br><img src="http://upload-images.jianshu.io/upload_images/1976147-2a7406c1555ee742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="透明.png"></p>
<p>恩，真的透明了，那么我们怎么让颜色延伸到状态栏呢？很容易想到的一种是根节点设置</p>
<blockquote>
<p>android:fitsSystemWindows=”true”</p>
</blockquote>
<p>然后设置根节点的颜色和自己的自定义标题栏一致，上布局代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:weightSum</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#f13f00&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.lockscreen.view.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--标题布局--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;0.1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#f13f00&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/main_title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;ginbol&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-97458cdee05a1eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一片红.png"></p>
<p>状态栏颜色成功变色，只要我们在使用其他布局的时候改变背景色就可以成功的实现沉浸式状态栏的效果了，但是，我在如此使用使用的时候曾经碰到一个bug，会导致部分布局颜色发生变化。使用这种布局实现的沉浸式所导致的bug，我没能解决，所以我只好换一种实现方法了……而且，在4.4的解决方案中我也推荐这种方法……这种方法是在看<a href="http://stormzhang.com/android/2015/08/16/boohee-toolbar/">stormzhang-薄荷Toolbar(ActionBar)适配解决方案</a>中看到的，同样适用于我这里。</p>
<p>首先布局和标题栏和刚刚差不多，但是根节点不用</p>
<blockquote>
<p>android:fitsSystemWindows=”true”</p>
</blockquote>
<p>在自定义标题栏中加上</p>
<blockquote>
<p>android:paddingTop=”@dimen/topview_padding”</p>
</blockquote>
<p>这个paddingTop在api19以上的版本是25dp，以下是0，在使用这个方法之后运行出来的结果也是对的，就不放图了。至于这个值为什么是25dp，stormzhang的解释是在源码中看到了状态栏的高度就是那么多。</p>
<p>##最后的TIPS##<br>有些手机可能在xml中设置状态栏透明并不起作用，使用代码在Activity中设置效果更佳。对于使用toolbar的项目，可以去看我上面提到的<a href="http://stormzhang.com/android/2015/08/16/boohee-toolbar/">博客</a>，而且在他的博客中也有提到在代码中设置透明状态栏以及BaseActivity的抽取。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>实际需求</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习小记</title>
    <url>/2017/01/20/Git%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>俗话说好记性不如烂笔头，此篇用来记一下常用的命令和一些操作，以后碰到啥问题也都放上来，前面的是跟着廖雪峰的教程过的。</p>
<p>我的mac和阿里云服务器都带git，所以安装啥的就不说了git官网地址：<a href="https://git-scm.com/">https://git-scm.com/</a>  各位可以自己去看一下。</p>
<h2 id="创建一个本地仓库"><a href="#创建一个本地仓库" class="headerlink" title="创建一个本地仓库"></a>创建一个本地仓库</h2><ul>
<li><p>创建一个版本库：首先选择一个合适的地方，创建一个空目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir studygit</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>然后进入这个目录并通过git init命令把这个目录变成git可以管理的仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd studygit</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in...</span><br></pre></td></tr></table></figure></li>
<li><p>添加文件到仓库<br>首先新建一个文件并添加文字内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch helloworld</span><br><span class="line">// 我这是mac，各位根据自己的系统考虑要不要这个</span><br><span class="line">$ vi helloworld</span><br></pre></td></tr></table></figure>
<p>添加文字”hello world!”然后保存。将文件添加到git仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add helloworld</span><br><span class="line">// $ git add .    提交所有修改文件不包括删除的文件</span><br></pre></td></tr></table></figure>
<p>然后用git commit告诉git，把文件提交到仓库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit helloworld -m &quot;init&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>-m后面的是本次提交的说明</p>
<h2 id="版本控制相关"><a href="#版本控制相关" class="headerlink" title="版本控制相关"></a>版本控制相关</h2><p>接着上面的来，现在修改helloworld中的内容，增加一行文字hello git</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-a3e80a377ba68c88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hello Git"></p>
<ul>
<li>使用git status查看状态：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   helloworld</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 git diff对比文件：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff hello world</span><br><span class="line">diff --git a/helloworld b/helloworld</span><br><span class="line">index a042389..aaf0674 100644</span><br><span class="line">--- a/helloworld</span><br><span class="line">+++ b/helloworld</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> hello world!</span><br><span class="line">+hello git!</span><br></pre></td></tr></table></figure>

<p>接着add 和 commit 与之前的一样，不再赘述。</p>
<ul>
<li>查看历史记录：git log</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 03c3d76e1f6b405af5ca9d9c2268b1ff120d601e</span><br><span class="line">Author: xiasuhuei321 &lt;xiasuhuei321@163.com&gt;</span><br><span class="line">Date:   Fri Jan 20 13:35:25 2017 +0800</span><br><span class="line"></span><br><span class="line">    add some words</span><br><span class="line"></span><br><span class="line">commit 13cc7cae5312cdcb3149c1caa554c2dbb3540e49</span><br><span class="line">Author: xiasuhuei321 &lt;xiasuhuei321@163.com&gt;</span><br><span class="line">Date:   Fri Jan 20 12:59:29 2017 +0800</span><br><span class="line"></span><br><span class="line">    init</span><br></pre></td></tr></table></figure>

<ul>
<li>将helloworld回退回上个版本：<br>在git中，用HEAD表示当前版本，上个版本就是HEAD^，上上个HEAD^^，100个版本前，HEAD~100<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at 13cc7ca init</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d10c431e5b680744.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回退"></p>
<p>这个时候虽然回退到了上个版本，但是git log也看不到上一次的提交记录了，不过如果你记得上次提交的版本号，依然是可以恢复的。</p>
<ul>
<li>回到回退之前的版本：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 03c3d76e1f6b405af5ca9d9c2268b1ff120d601e</span><br><span class="line">HEAD is now at 03c3d76 add some words</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-53938553ff1e7d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="再恢复"></p>
<ul>
<li><p>查看commit id：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">03c3d76 HEAD@&#123;0&#125;: reset: moving to 03c3d76e1f6b405af5ca9d9c2268b1ff120d601e</span><br><span class="line">13cc7ca HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">03c3d76 HEAD@&#123;2&#125;: commit: add some words</span><br><span class="line">13cc7ca HEAD@&#123;3&#125;: commit (initial): init</span><br></pre></td></tr></table></figure>
<p>恩，事实上我上面写那么长的id根本没有必要，不过就吓吓自己，不要瞎动东西。。。</p>
</li>
<li><p>撤销修改<br>在helloworld中新增一行：a ha?</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-67645c422c574299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="a ha?"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- helloworld</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-2d12c8cdee0ed24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="a ha?"></p>
<p>上面是没有使用git add命令的撤回修改，使用了该命令的撤销修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD helloworld</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	helloworld</span><br></pre></td></tr></table></figure>
<p>此时已经把暂存区的修改回退到工作区，接着和上面一样，丢弃工作区的修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- helloworld</span><br></pre></td></tr></table></figure>

<ul>
<li>删除文件<br>在git仓库中新建一个文件并提交，接着使用rm命令删除，这时使用git status命令查看：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	deleted:    test</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>如果确实要从版本库中删除该文件，使用git rm删掉，并且commit：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm test</span><br><span class="line">rm &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master c8a961c] remove test.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> delete mode 100644 test</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果是删错了，恢复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- test</span><br></pre></td></tr></table></figure>

<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>双十一的时候买了一台阿里云服务器，就用这个折腾一下吧。</p>
<p>首先还是一样的，创建一个studygit目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mkdir studygit</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-08431a54bd5a6e81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建文件夹"></p>
<p>然后初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git init</span><br></pre></td></tr></table></figure>
<p>创建一个hello文件，并写入hello字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vi hello </span><br></pre></td></tr></table></figure>
<p>将hello加入git仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git add hello</span><br><span class="line"># git commit -m &quot;init&quot;</span><br></pre></td></tr></table></figure>
<p>之后再我自己的终端使用clone命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@xxx:/studygit/.git</span><br><span class="line">Cloning into &#x27;studygit&#x27;...</span><br><span class="line">git@xxx&#x27;s password: </span><br><span class="line">Could not chdir to home directory /home/git: No such file or directory</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), done.</span><br></pre></td></tr></table></figure>
<p>其中xxx是服务器ip，我现在比较菜= =不知道能不能暴露，先不写上来了<br>使用ls命令看看有没有clone下来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">helloworld	studygit</span><br></pre></td></tr></table></figure>
<p>进入该studygit，也就是clone下来的仓库查看hello文件是否有hello字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd studygit</span><br><span class="line">$ vi hello</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-602533660348956d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hello"></p>
<p>clone问题不大，在push的时候我碰到了一些问题，由于我现在不是非常的懂Linux，所以暂时不详细的讲，只把现象和我暂时找到的解决方法写上来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push git@xxx:studygit/.git</span><br><span class="line">Could not chdir to home directory /home/git: No such file or directory</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 253 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">error: insufficient permission for adding an object to repository database ./objects</span><br></pre></td></tr></table></figure>
<p>主要是因为权限问题，我不是很了解Linux中的权限和git权限之类的，暂时先放着，只放上我看到的其中一个我试了可以，而且比较简单的方法和他的解释：<br>这是因为git服务器端对应git仓库目录的访问权限问题，如果一定要多用户访问git仓库，可以设置一个gituser组，给他分配足够的权限即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chgrp -R gituser path/to/gitrepo</span><br><span class="line"># chmod -R &#x27;g+rwx&#x27; /path/to/gitrepo</span><br><span class="line">或者直接</span><br><span class="line"># chmod 777 /path/to/gitrepo -R</span><br></pre></td></tr></table></figure>

<p>第三个大概是要root权限的，777好像是简单粗暴了点，不过我现在不是非常的了解。</p>
<p>继续push还是会错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not chdir to home directory /home/git: No such file or directory</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 253 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: error: refusing to update checked out branch: refs/heads/master</span><br><span class="line">remote: error: By default, updating the current branch in a non-bare repository</span><br><span class="line">remote: error: is denied, because it will make the index and work tree inconsistent</span><br><span class="line">remote: error: with what you pushed, and will require &#x27;git reset --hard&#x27; to match</span><br><span class="line">remote: error: the work tree to HEAD.</span><br><span class="line">remote: error: </span><br><span class="line">remote: error: You can set &#x27;receive.denyCurrentBranch&#x27; configuration variable t</span><br><span class="line">remote: error: &#x27;ignore&#x27; or &#x27;warn&#x27; in the remote repository to allow pushing int</span><br><span class="line">remote: error: its current branch; however, this is not recommended unless you</span><br><span class="line">remote: error: arranged to update its work tree to match what you pushed in som</span><br><span class="line">remote: error: other way.</span><br><span class="line">remote: error: </span><br><span class="line">remote: error: To squelch this message and still keep the default behaviour, se</span><br><span class="line">remote: error: &#x27;receive.denyCurrentBranch&#x27; configuration variable to &#x27;refuse&#x27;.</span><br></pre></td></tr></table></figure>
<p>因为我们使用git init初始化的远程仓库，默认情况下git是拒绝push操作的，需要修改配置在git服务器端对应的git仓库的配置文件。在.git/config文件中增加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[receive]</span><br><span class="line">            denyCurrentBranch = ignore</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-8515093a4bbc7e54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加配置"></p>
<p>最终终于push成功了！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not chdir to home directory /home/git: No such file or directory</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 253 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To 112.74.43.104:studygit/.git</span><br><span class="line">   7e39b28..bac4117  master -&gt; master</span><br></pre></td></tr></table></figure>

<h2 id="多人合作"><a href="#多人合作" class="headerlink" title="多人合作"></a>多人合作</h2><p>新建dev分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br></pre></td></tr></table></figure>
<p>切换到dev分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout  dev</span><br></pre></td></tr></table></figure>
<p>查看远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>
<p>查看远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure>
<p>将本地分支push到远程分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$git push origin local_branch:remote_branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个操作，local_branch必须为你本地存在的分支，remote_branch为远程分支，如果remote_branch不存在则会自动创建分支。<br>类似，git push origin :remote_branch，local_branch留空的话则是删除远程remote_branch分支。</p>
<p>取回远程主机某个分支的更新，与本地的指定分支合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>删除远程分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin --delete &lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>删除tag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<p>合并commit，在各种情况下，我们都有可能在代码没有完全完成的情况下提交commit，可以利用rebase命令合并commit：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rebase -i commitid</span><br></pre></td></tr></table></figure>
<p>commitid是最新一次commit的id</p>
<h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>git配置用户名和邮箱：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name [your name]</span><br><span class="line">$ git config --global user.email [your email]</span><br></pre></td></tr></table></figure>
<p>查看远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>

<h2 id="记一次从暂存恢复代码的经历"><a href="#记一次从暂存恢复代码的经历" class="headerlink" title="记一次从暂存恢复代码的经历"></a>记一次从暂存恢复代码的经历</h2><p>一天上班的时候用git stash暂存了代码，后来有事出去了，第二天来的时候代码都没了，哇，真的绝望，因为重写一遍怪麻烦的。当然了，转念一想，我用git应该会有恢复的办法，上网搜了一下，果然有。首先用git stash list看一下历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-1e0faf8bc764bfa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stash list"><br>前面的0、1啥的表示下标，看到这个，就感觉稳了，恢复有望。<br>后来用了如下的命令恢复了代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash pop --index</span><br></pre></td></tr></table></figure>
<p>–index表示不仅恢复工作区，还恢复暂存区，后面可以跟参数恢复指定的记录。我这里没有指明默认恢复最新记录。</p>
<p>小记：最近切换分支，切换回来的时候发现stash的内容没了，那这可能就是他工作的方式，不同于commit，stash就是需要我们自己选择一个恢复过来。可以用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>入门学习</tag>
        <tag>Git学习</tag>
      </tags>
  </entry>
  <entry>
    <title>CountDownTimer小坑</title>
    <url>/2017/06/12/CountDownTimer%E5%B0%8F%E5%9D%91/</url>
    <content><![CDATA[<p>最近在研究和Socket相关的一些东西，Java中的Socket还是比较易用的，但是比较坑爹的就是有时候Socket不管怎么发送，Server都接收不到，代码也没有任何反馈，这样就需要一个机制确认Socket的状态。方法有很多种，我这里采用了心跳，超时计时选用了CountDownTimer，原来也用过，也知道他内部使用Handler实现的，感觉能用还算靠谱吧。然后问题就出在把本地代码融到项目之后。</p>
<p>本地代码，经过我自己测试都没有什么问题，心跳也能实现。但是在融入项目之后，发现启动了两个tcp client 只有一个正常启动了！</p>
<p>经过断点debug之后，我发现在第二个client初始化的CountDownTimer的时候挂了，跟随初始化代码一路点进去，发现是Handler初始化的时候挂掉了。</p>
<p>了解Android消息机制的人看到这一定就知道原因了，对：不能在没有looper的线程中创建Handler，而CountDownTimer内部也用的是Handler，而项目中则是开启了一个线程执行任务，我这里刚好就踩到了这个坑，最后把CountDownTimer换成了Timer。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>填坑</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Glide 4.0 以上无法生成 GlideApp</title>
    <url>/2017/11/07/Glide%204.0%20%E4%BB%A5%E4%B8%8A%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90%20GlideApp/</url>
    <content><![CDATA[<p>Glide 4.0 以上的版本将很多的 API 都从 Glide 主线这个入口及后续的调用剥离出来了，需要用 GlideApp 来使用。跟着文档走了一遍，愣是生不成，尝试了网上的各种办法都不行。在 CSDN 论坛上看到了一个类似的问题，题主最后一句已解决……日了狗了，你已解决不能发一下你解决的方法么。</p>
<p>网上说的各种 clean make rebuild 都试了，还是不行，最后静下心来仔细看了下项目里用到了 ButterKnife ，而这玩意我也很久没更新了，看了下用的还是 apt ，而 Glide 依赖的编译时注解是 annotationProcessor 于是猜想是这两个之间有什么见不得人的交易导致我无法生成GlideApp。上 ButterKnife 的 git 仓库看了一下，最新的也采用 annotationProcessor 来实现了，愉快的更新了一波，Glide 成功生成了 GlideApp。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>填坑</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment结合ViewPager之懒加载</title>
    <url>/2016/09/02/Fragment%E7%BB%93%E5%90%88ViewPager%E4%B9%8B%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="什么是懒加载？为什么要用懒加载？"><a href="#什么是懒加载？为什么要用懒加载？" class="headerlink" title="什么是懒加载？为什么要用懒加载？###"></a>什么是懒加载？为什么要用懒加载？###</h3><h4 id="1、什么是懒加载"><a href="#1、什么是懒加载" class="headerlink" title="1、什么是懒加载"></a>1、什么是懒加载</h4><p>懒加载就是当ViewPager和Fragment结合在一起使用时，Fragment呈现在用户面前时才加载数据，当其从未被呈现在用户面前时，不会执行加载数据的代码。这就是我所理解的懒加载。</p>
<h4 id="2、为什么要用懒加载"><a href="#2、为什么要用懒加载" class="headerlink" title="2、为什么要用懒加载"></a>2、为什么要用懒加载</h4><p>ViewPager默认会预加载下一页，对于某些重量级的Fragment来说无疑会造成很大的开销，当然了，如果对于你来说这些开销是必要的，也不必无脑用懒加载。</p>
<h3 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h3><p>很多时候我们都会将ViewPager和Fragment结合在一起使用，因为Android给我们提供了非常便利的<strong>FragmentPageAdapter</strong>,而这个adapter实现起来非常简单：</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TechFragmentPageAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragmentList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TechFragmentPageAdapter</span><span class="params">(FragmentManager fm, List&lt;Fragment&gt; fragmentList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">        <span class="keyword">this</span>.fragmentList = fragmentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragmentList.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragmentList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们一般的Activity都是继承于AppCompatActivity，而这个activity可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getSupportFragmentManager();</span><br></pre></td></tr></table></figure>
<p>那么在实现以上的adapter时我们只要传入我们的fragmentList就可以了。这样的adapter既看起来舒服，又好使。但是ViewPager默认会加载下一页，当你调用setOffscreenPageLimit()，并且将值设置为0，抱歉，没啥用，因为当你设置的值小于1的时候默认还是1。那么，这个时候就需要我们自己去实现懒加载了。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现懒加载的关键是在于以下两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档对于这个方法的描述是：Set a hint to the system about whether this </span></span><br><span class="line"><span class="comment"> * fragment&#x27;s UI is currently visible to the user.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">getUserVisibleHint()</span><br><span class="line">setUserVisibleHint(<span class="keyword">boolean</span> isVisibleToUser)</span><br></pre></td></tr></table></figure>

<p>接下来让我通过一段Log来了解这段故事，因为代码结构比较简单，只放其中的一段代码上来，其他的，靠我们脑补就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;FirstFragment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onAttach&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onCreate&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onCreateView&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateView(inflater, container, savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onActivityCreated&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onStart&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onResume&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onPause&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onStop&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onDestroyView&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onDestroy&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onDetach&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDetach();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUserVisibleHint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;getUserVisibleHint&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getUserVisibleHint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;setUserVisibleHint:&quot;</span> + isVisibleToUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>非常简单的一个Fragment，我只是在其中的各个方法中加入了Log这个操作而已，为了方便查看我使用了e这个级别的日志。类似的Fragment还有SecondFragment和ThirdFragment。当我使用FragmentPagerAdapter和ViewPager的时候，他们的Log输出如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-61a8b90cc542510c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Log日志.png"></p>
<p>首先和我们预料的一样，ViewPager的确有加载下一页的特性，然后我们滑动到第二页查看Log。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-a8c0fcc0fc43014f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二页Log.png"><br>我们可以发现，当我们滑动到第二页时，第三页开始预加载，而且第二页的setUserVisibleHint中的值已经被置为了true。也就是说当前页面可见时，我们调用getUserVisibleHint()的值是true。那么我们可以根据这个特性去实现懒加载：</p>
<p>** 当前页面不可见，但是ViewPager预加载的时候，我们判断当前页面是否可见，不可见则不进行加载数据的操作，仅仅做布局初始化的工作。在当前页面变为可用的时候，我们调用加载数据的方法，那么数据便在ViewPager滑动到当前页面的时候开始加载了。**</p>
<p>以下是我封装的代码，我封装无力，各位如果觉得可以便自取，如果觉得不行可以自己改进~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lauren.simplenews.news.widget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo_xiasuhuei321@163.com on 2016/8/29.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现懒加载的Fragment</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLazyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> View mRootView;</span><br><span class="line">    <span class="keyword">protected</span> Context mContext;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isVisible;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------system method callback------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        isPrepared = <span class="keyword">true</span>;</span><br><span class="line">        initPrepare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">        <span class="keyword">if</span>(getUserVisibleHint())&#123;</span><br><span class="line">            isVisible = <span class="keyword">true</span>;</span><br><span class="line">            lazyLoad();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            isVisible = <span class="keyword">false</span>;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="keyword">if</span>(getUserVisibleHint())&#123;</span><br><span class="line">            setUserVisibleHint(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mContext = getActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mRootView == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mRootView = initView(inflater,container,savedInstanceState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mRootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------------method---------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 懒加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isPrepared || !isVisible || !isFirst)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        initData();</span><br><span class="line">        isFirst = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------abstract method------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在onActivityCreated中调用的方法，可以用来进行初始化操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initPrepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fragment被设置为不可见时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里获取数据，刷新界面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化布局，请不要把耗时操作放在这个方法里，这个方法用来提供一个</span></span><br><span class="line"><span class="comment">     * 基本的布局而非一个完整的布局，以免ViewPager预加载消耗大量的资源。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initView</span><span class="params">(LayoutInflater inflater,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@Nullable</span> ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@Nullable</span> Bundle savedInstanceState)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###后话###<br>最近我搭建了自己的个人博客，虽然今天（9.2）没时间完善了，但是以后有空我会完善一下的。而且有些文章我也不会再简书更新……比如我想把我的java回炉重造一下……但是有关java的这些东西不怎么想放到简书上，还是放到我自己的小窝里~</p>
<p>最后附上链接吧：<a href="https://xiasuhuei321.github.io/">https://xiasuhuei321.github.io</a><br>恩，域名暂时没买，先就这么用着吧。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>实际需求</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Glide源码阅读（一）</title>
    <url>/2017/03/07/Glide%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>Glide是一个图片加载框架，其他的图片加载框架还有UniversalImageLoader，Picasso，Fresco等，个人还是比较喜欢Glide这个框架的。Glide致力于打造更好的列表图片滑动体验，就如他的名字Glide（滑翔）一样顺畅，Glide还支持加载video，Gif，SVG格式。而且Glide会与你的Activity/Fragment绑定相关的生命周期，有自己的缓存策略，这样就让图片加载操作变得非常简单。本文的Glide源码是4.0的版本（我本来以为是3.7.0来着，后来一看有些代码对不上……)。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>如果你还没有使用过glide，可以通过下面两句话引入glide：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile &#x27;com.github.bumptech.glide:glide:3.7.0&#x27;</span><br><span class="line">compile &#x27;com.android.support:support-v4:19.1.0&#x27;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>编译源码：<br>在阅读源码的时候，难免希望自己能加上几个log或者自己加点注释之类的来方便自己阅读。可以通过如下方式编译glide源码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:bumptech/glide.git # use https://github.com/bumptech/glide.git if &quot;Permission Denied&quot;</span><br><span class="line">cd glide</span><br><span class="line">git submodule init &amp;&amp; git submodule update</span><br><span class="line">./gradlew jar</span><br></pre></td></tr></table></figure>
<p>不过说实话，我按这个流程操作了几次才成功。编译成功之后你就可以运行sample和尽情的修改glide源码了。</p>
<p>如何打开Glide的log，这个官方仓库里有介绍，直接放上链接：<a href="https://github.com/bumptech/glide/wiki/Debugging-and-Error-Handling">Debugging and Error Handling</a></p>
<h2 id="从最简流程切入读源码"><a href="#从最简流程切入读源码" class="headerlink" title="从最简流程切入读源码"></a>从最简流程切入读源码</h2><p>我们用Glide加载一张图，最简单的代码是怎样的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Glide.with(Activity).load(url).into(imageview);</span><br></pre></td></tr></table></figure>
<p>因为流式api，整个调用流程显得非常简洁、简单，但是这短短的几个方法调用里，涉及到的东西却是非常之多的，所以看累了的话，可以起来走走，喝点水……</p>
<p>在正式看代码之前，先上一下Glide的设计图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-0d96898a3912bdb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设计图"><br>这图也不是我画的，我看到了几篇文都有这图，这图画得很好，文末会给出参考资料链接。</p>
<p>上面的东西，刚接触肯定是很陌生的。不过没事，大概知道有这么些个东西就好了。那么正式开始看代码吧，首先是Glide.with()，点进去看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class="line">  <span class="keyword">return</span> retriever.get(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">  RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class="line">  <span class="keyword">return</span> retriever.get(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">  RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class="line">  <span class="keyword">return</span> retriever.get(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(android.app.Fragment fragment)</span> </span>&#123;</span><br><span class="line">  RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class="line">  <span class="keyword">return</span> retriever.get(fragment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">  RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class="line">  <span class="keyword">return</span> retriever.get(fragment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到with有多个重载方法，适配了各种可能出现的情况。 继续追踪源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;You cannot start a load on a null Context&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class="keyword">instanceof</span> Application)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">      <span class="keyword">return</span> get((FragmentActivity) context);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">      <span class="keyword">return</span> get((Activity) context);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> ContextWrapper) &#123;</span><br><span class="line">      <span class="keyword">return</span> get(((ContextWrapper) context).getBaseContext());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> getApplicationManager(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">    <span class="comment">// 不在主线程</span></span><br><span class="line">    <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    assertNotDestroyed(activity);</span><br><span class="line">    FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class="line">    <span class="keyword">return</span> supportFragmentGet(activity, fm, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fragment.getActivity() == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">        <span class="string">&quot;You cannot start a load on a fragment before it is attached&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      <span class="comment">// 不在主线程</span></span><br><span class="line">    <span class="keyword">return</span> get(fragment.getActivity().getApplicationContext());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    FragmentManager fm = fragment.getChildFragmentManager();</span><br><span class="line">    <span class="keyword">return</span> supportFragmentGet(fragment.getActivity(), fm, fragment);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不在主线程</span></span><br><span class="line">  <span class="keyword">if</span> (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">    <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    assertNotDestroyed(activity);</span><br><span class="line">    android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class="line">    <span class="keyword">return</span> fragmentGet(activity, fm, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先不看参数是context的方法，看一下get(FragmentActivity  activity)这个方法，首先判断是否在主线程，如果是的话调用supportFragmentGet方法，看下这个方法的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">RequestManager <span class="title">supportFragmentGet</span><span class="params">(Context context, FragmentManager fm, Fragment parentHint)</span> </span>&#123;</span><br><span class="line">  SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);</span><br><span class="line">  RequestManager requestManager = current.getRequestManager();</span><br><span class="line">  <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">    Glide glide = Glide.get(context);</span><br><span class="line">    requestManager =</span><br><span class="line">        <span class="keyword">new</span> RequestManager(glide, current.getLifecycle(), current.getRequestManagerTreeNode());</span><br><span class="line">    current.setRequestManager(requestManager);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> requestManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法里有一个SupportRequestManagerFragment（以下简称SRMFragment，如果参数是Activity或者app包中的Fragment，则是RequestManagerFragment）。这个SRMFragment是一个不可见的Fragment，用来和你的Fragment/Activity的生命周期关联起来。如何关联呢？通过ChildFragmentManager/FragmentManager，将这个Fragment添加到Fragment/Activity中，最终将生命周期传递到RequestManager中，让RequestManager对不同的状态做相应的处理。对于内存较低的情况，SRMFragment也有相应的周期。关于SRMFragment的简单介绍便到此为止。接着获取Glide和RequestManager对象，首先是glide：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Glide <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Glide.class) &#123;</span><br><span class="line">      <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Context applicationContext = context.getApplicationContext();</span><br><span class="line">        List&lt;GlideModule&gt; modules = <span class="keyword">new</span> ManifestParser(applicationContext).parse();</span><br><span class="line"></span><br><span class="line">        GlideBuilder builder = <span class="keyword">new</span> GlideBuilder(applicationContext);</span><br><span class="line">        <span class="keyword">for</span> (GlideModule <span class="keyword">module</span> : modules) &#123;</span><br><span class="line">          <span class="keyword">module</span>.applyOptions(applicationContext, builder);</span><br><span class="line">        &#125;</span><br><span class="line">        glide = builder.createGlide();</span><br><span class="line">        <span class="keyword">for</span> (GlideModule <span class="keyword">module</span> : modules) &#123;</span><br><span class="line">          <span class="keyword">module</span>.registerComponents(applicationContext, glide.registry);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> glide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显是单例的写法，采用双重校验锁的方式。接着是构造RequestManager对象。在Glide中，加载图片是以Request的形式交给Engine去处理的。而RequestManager是为Glide管理和开启请求的类，可以通过Activity/Fragment/Connectivity（网络连接监听）的生命周期方法进行stop，start，restart。</p>
<p>上面有一个参数为Context的get方法略过了，但是其实跟上面介绍的也差不多，只不过如果不是FragmentActivity、Activity和ContextWrapper的对象的引用，则会调用getApplicationManager方法，看一下这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RequestManager <span class="title">getApplicationManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Either an application context or we&#x27;re on a background thread.</span></span><br><span class="line">  <span class="keyword">if</span> (applicationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (applicationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Normally pause/resume is taken care of by the fragment we add to the fragment or</span></span><br><span class="line">        <span class="comment">// activity. However, in this case since the manager attached to the application will not</span></span><br><span class="line">        <span class="comment">// receive lifecycle events, we must force the manager to start resumed using</span></span><br><span class="line">        <span class="comment">// ApplicationLifecycle.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">        Glide glide = Glide.get(context);</span><br><span class="line">        applicationManager =</span><br><span class="line">            <span class="keyword">new</span> RequestManager(</span><br><span class="line">                glide, <span class="keyword">new</span> ApplicationLifecycle(), <span class="keyword">new</span> EmptyRequestManagerTreeNode());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> applicationManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到也是获取了Glide和RequestManager对象，上面的注释比较简单就不翻译了，简单的解释了用这个context的生命周期的问题。至此简单的分析了Glide.with()方法，这个方法将Glide的生命周期与我们的程序相关联，让我们无需考虑各种复杂的情况。Glide.with()返回的是一个RequestManager方法，接下来就是分析Glide.with().load()了，很显然在RequestManager内：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Object model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> asDrawable().load(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我就是在这发现我看的好像是假的源码，我从glide仓库clone编译的源码，发现跟我原来项目里引用的源码有些不一样，后来看了一下……果然版本不一样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-47e46fa5b651124a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.0"></p>
<p>在3.7.0的源码中有好几个load的重载方法，但是在最新的代码中只有这一个load方法，更多的load的重载方法在RequestBuilder中了，大概是想让各个类的职责更加清晰一点吧。那么就进RequestBuilder看看几个load方法吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Object model)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> String string)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Uri uri)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(uri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> File file)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> Integer resourceId)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(resourceId).apply(signatureOf(ApplicationVersionSignature.obtain(context)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> URL url)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestBuilder <span class="title">load</span><span class="params">(<span class="meta">@Nullable</span> <span class="keyword">byte</span>[] model)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> loadGeneric(model).apply(signatureOf(<span class="keyword">new</span> ObjectKey(UUID.randomUUID().toString()))</span><br><span class="line">     .diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(<span class="keyword">true</span> <span class="comment">/*skipMemoryCache*/</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么多重载方法，最终都调用了loadGeneric方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RequestBuilder <span class="title">loadGeneric</span><span class="params">(<span class="meta">@Nullable</span> Object model)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  isModelSet = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仅仅是设置了两个字段的值，那么继续看into方法，还是在RequestBuilder中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Target&lt;TranscodeType&gt; <span class="title">into</span><span class="params">(ImageView view)</span> </span>&#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    Preconditions.checkNotNull(view);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!requestOptions.isTransformationSet()</span><br><span class="line">            &amp;&amp; requestOptions.isTransformationAllowed()</span><br><span class="line">            &amp;&amp; view.getScaleType() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (requestOptions.isLocked()) &#123;</span><br><span class="line">            requestOptions = requestOptions.clone();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据ImageView的ScaleType配置requestOptions</span></span><br><span class="line">        <span class="keyword">switch</span> (view.getScaleType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> CENTER_CROP:</span><br><span class="line">                requestOptions.optionalCenterCrop(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CENTER_INSIDE:</span><br><span class="line">                requestOptions.optionalCenterInside(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FIT_CENTER:</span><br><span class="line">            <span class="keyword">case</span> FIT_START:</span><br><span class="line">            <span class="keyword">case</span> FIT_END:</span><br><span class="line">                requestOptions.optionalFitCenter(context);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//$CASES-OMITTED$</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// Do nothing.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> into(context.buildImageViewTarget(view, transcodeClass));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据ImageView的scaleType进行了一些配置，这里通过glideContext生成了一个ViewTarget。在Glide中Target是资源加载的目标，最后调用了into重载方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(<span class="meta">@NonNull</span> Y target)</span> </span>&#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    Preconditions.checkNotNull(target);</span><br><span class="line">    <span class="keyword">if</span> (!isModelSet) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;You must call #load() before calling #into()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Request previous = target.getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        requestManager.clear(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestOptions.lock();</span><br><span class="line">    Request request = buildRequest(target);</span><br><span class="line">    target.setRequest(request);</span><br><span class="line">    requestManager.track(target, request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用了buildRequest方法，看下这个方法和这个方法调用的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">buildRequest</span><span class="params">(Target&lt;TranscodeType&gt; target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> buildRequestRecursive(target, <span class="keyword">null</span>, transitionOptions, requestOptions.getPriority(),</span><br><span class="line">            requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">buildRequestRecursive</span><span class="params">(Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="meta">@Nullable</span> ThumbnailRequestCoordinator parentCoordinator,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      Priority priority, <span class="keyword">int</span> overrideWidth, <span class="keyword">int</span> overrideHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缩略图请求</span></span><br><span class="line">    <span class="keyword">if</span> (thumbnailBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Recursive case: contains a potentially recursive thumbnail request builder.</span></span><br><span class="line">        <span class="keyword">if</span> (isThumbnailBuilt) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;You cannot use a request as both the main request and a &quot;</span></span><br><span class="line">                    + <span class="string">&quot;thumbnail, consider using clone() on the request(s) passed to thumbnail()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; thumbTransitionOptions =</span><br><span class="line">                thumbnailBuilder.transitionOptions;</span><br><span class="line">        <span class="keyword">if</span> (DEFAULT_ANIMATION_OPTIONS.equals(thumbTransitionOptions)) &#123;</span><br><span class="line">            thumbTransitionOptions = transitionOptions;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Priority thumbPriority = thumbnailBuilder.requestOptions.isPrioritySet()</span><br><span class="line">                ? thumbnailBuilder.requestOptions.getPriority() : getThumbnailPriority(priority);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> thumbOverrideWidth = thumbnailBuilder.requestOptions.getOverrideWidth();</span><br><span class="line">        <span class="keyword">int</span> thumbOverrideHeight = thumbnailBuilder.requestOptions.getOverrideHeight();</span><br><span class="line">        <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)</span><br><span class="line">                &amp;&amp; !thumbnailBuilder.requestOptions.isValidOverride()) &#123;</span><br><span class="line">            thumbOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class="line">            thumbOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ThumbnailRequestCoordinator coordinator = <span class="keyword">new</span> ThumbnailRequestCoordinator(parentCoordinator);</span><br><span class="line">        Request fullRequest = obtainRequest(target, requestOptions, coordinator,</span><br><span class="line">                transitionOptions, priority, overrideWidth, overrideHeight);</span><br><span class="line">        isThumbnailBuilt = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// Recursively generate thumbnail requests.</span></span><br><span class="line">        Request thumbRequest = thumbnailBuilder.buildRequestRecursive(target, coordinator,</span><br><span class="line">                thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight);</span><br><span class="line">        isThumbnailBuilt = <span class="keyword">false</span>;</span><br><span class="line">        coordinator.setRequests(fullRequest, thumbRequest);</span><br><span class="line">        <span class="keyword">return</span> coordinator;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (thumbSizeMultiplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Base case: thumbnail multiplier generates a thumbnail request, but cannot recurse.</span></span><br><span class="line">        ThumbnailRequestCoordinator coordinator = <span class="keyword">new</span> ThumbnailRequestCoordinator(parentCoordinator);</span><br><span class="line">        Request fullRequest = obtainRequest(target, requestOptions, coordinator, transitionOptions,</span><br><span class="line">                priority, overrideWidth, overrideHeight);</span><br><span class="line">        BaseRequestOptions&lt;?&gt; thumbnailOptions = requestOptions.clone()</span><br><span class="line">                .sizeMultiplier(thumbSizeMultiplier);</span><br><span class="line"></span><br><span class="line">        Request thumbnailRequest = obtainRequest(target, thumbnailOptions, coordinator,</span><br><span class="line">                transitionOptions, getThumbnailPriority(priority), overrideWidth, overrideHeight);</span><br><span class="line"></span><br><span class="line">        coordinator.setRequests(fullRequest, thumbnailRequest);</span><br><span class="line">        <span class="keyword">return</span> coordinator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Base case: no thumbnail.</span></span><br><span class="line">        <span class="keyword">return</span> obtainRequest(target, requestOptions, parentCoordinator, transitionOptions, priority,</span><br><span class="line">                overrideWidth, overrideHeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>buildRequest创建了请求，如果配置了缩略图请求，那么会生成一个ThumbnailRequestCoordinator请求。这个请求内部包含了一个FullRequest和ThumbnailRequest。如果没有配置，则通过obtainRequest方法生成一个SingleRequest对象返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">obtainRequest</span><span class="params">(Target&lt;TranscodeType&gt; target,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BaseRequestOptions&lt;?&gt; requestOptions, RequestCoordinator requestCoordinator,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions, Priority priority,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> overrideWidth, <span class="keyword">int</span> overrideHeight)</span> </span>&#123;</span><br><span class="line">    requestOptions.lock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SingleRequest.obtain(</span><br><span class="line">            context,</span><br><span class="line">            model,</span><br><span class="line">            transcodeClass,</span><br><span class="line">            requestOptions,</span><br><span class="line">            overrideWidth,</span><br><span class="line">            overrideHeight,</span><br><span class="line">            priority,</span><br><span class="line">            target,</span><br><span class="line">            requestListener,</span><br><span class="line">            requestCoordinator,</span><br><span class="line">            context.getEngine(),</span><br><span class="line">            transitionOptions.getTransitionFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看完了buildRequest方法，接着看requestManager.track(target,requst)，这个方法调用了RequestTrack的runRequest方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">track</span><span class="params">(Target&lt;?&gt; target, Request request)</span> </span>&#123;</span><br><span class="line">      targetTracker.track(target);</span><br><span class="line">      requestTracker.runRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">  requests.add(request);</span><br><span class="line">  <span class="keyword">if</span> (!isPaused) &#123;</span><br><span class="line">    request.begin();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pendingRequests.add(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>request.biegin调用的是SingleRequest的begin方法，begin调用了onSizeReady方法而onSizeReady又调用了engine.load()方法。至此，终于摸到了真正加载的门槛了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    GlideContext glideContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    Object model,</span></span></span><br><span class="line"><span class="params"><span class="function">    Key signature,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="params"><span class="function">    Class&lt;?&gt; resourceClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    Class&lt;R&gt; transcodeClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    Priority priority,</span></span></span><br><span class="line"><span class="params"><span class="function">    DiskCacheStrategy diskCacheStrategy,</span></span></span><br><span class="line"><span class="params"><span class="function">    Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">boolean</span> isTransformationRequired,</span></span></span><br><span class="line"><span class="params"><span class="function">    Options options,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">boolean</span> isMemoryCacheable,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">boolean</span> onlyRetrieveFromCache,</span></span></span><br><span class="line"><span class="params"><span class="function">    ResourceCallback cb)</span> </span>&#123;</span><br><span class="line">  Util.assertMainThread();</span><br><span class="line">  <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line">  <span class="comment">// 创建key，资源的唯一标识</span></span><br><span class="line">  EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,</span><br><span class="line">      resourceClass, transcodeClass, options);</span><br><span class="line">  <span class="comment">// 内存缓存中读取数据</span></span><br><span class="line">  EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</span><br><span class="line">  <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">    cb.onResourceReady(cached, DataSource.MEMORY_CACHE);</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">&quot;Loaded resource from cache&quot;</span>, startTime, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</span><br><span class="line">  <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</span><br><span class="line">    cb.onResourceReady(active, DataSource.MEMORY_CACHE);</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">&quot;Loaded resource from active resources&quot;</span>, startTime, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据key获取缓存的job</span></span><br><span class="line">  EngineJob&lt;?&gt; current = jobs.get(key);</span><br><span class="line">  <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">    current.addCallback(cb);</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">&quot;Added to existing load&quot;</span>, startTime, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建job</span></span><br><span class="line">  EngineJob&lt;R&gt; engineJob = engineJobFactory.build(key, isMemoryCacheable,</span><br><span class="line">      useUnlimitedSourceExecutorPool);</span><br><span class="line">  DecodeJob&lt;R&gt; decodeJob = decodeJobFactory.build(</span><br><span class="line">      glideContext,</span><br><span class="line">      model,</span><br><span class="line">      key,</span><br><span class="line">      signature,</span><br><span class="line">      width,</span><br><span class="line">      height,</span><br><span class="line">      resourceClass,</span><br><span class="line">      transcodeClass,</span><br><span class="line">      priority,</span><br><span class="line">      diskCacheStrategy,</span><br><span class="line">      transformations,</span><br><span class="line">      isTransformationRequired,</span><br><span class="line">      onlyRetrieveFromCache,</span><br><span class="line">      options,</span><br><span class="line">      engineJob);</span><br><span class="line">  jobs.put(key, engineJob);</span><br><span class="line">  <span class="comment">// 放入线程池，执行</span></span><br><span class="line">  engineJob.addCallback(cb);</span><br><span class="line">  engineJob.start(decodeJob);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">    logWithTimeAndKey(<span class="string">&quot;Started new load&quot;</span>, startTime, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到首先从内存缓存中获取资源，其次从存活的资源中加载缓存，这么做可以提高命中率。内存缓存使用的是LruResourceCache继承自LruCache（lru，最近最少使用），当然了，这个LruCache也是glide内部自己实现的一个，现在还不必深入去看怎么实现的知道就行。如果loadFromCache命中，那么会将资源放入activeResources中，同时将资源从LruCache中移除。命中后会直接调用ResourceCallback回调方法onResourceReady，而最终又会调用target的onResourceReady方法，继续看下去就会发现最终的实现类调用了view.setImageBitmap(BitmapImageViewTarget)或者view.setImageDrawable(DrawableImageViewTarget)。另外一个内存缓存用弱引用缓存当前正在使用的资源，回调方式和之前的LruCache是一样的，不做更多的介绍了。</p>
<p>前面说的都是命中的情况，接着看未命中的。内存中读取数据都没有命中的话，则会生成EngineJob和DecodeJob。EngineJob的职责是调度DecodeJob，添加，移除资源回调，并notify回调。DecodeJob负责从缓存资源或者原始数据中读取资源，Glide中的脏累活基本都是这个DecodeJob干的。回到代码，最后调用了engineJob.start方法，看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.decodeJob = decodeJob;</span><br><span class="line">  GlideExecutor executor = decodeJob.willDecodeFromCache()</span><br><span class="line">      ? diskCacheExecutor</span><br><span class="line">      : getActiveSourceExecutor();</span><br><span class="line">  executor.execute(decodeJob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个GlideExecutor是一个线程池，而DecodeJob是实现了Runnable接口的类，所以看一下DecodeJob的run方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This should be much more fine grained, but since Java&#x27;s thread pool implementation silently</span></span><br><span class="line">  <span class="comment">// swallows all otherwise fatal exceptions, this will at least make it obvious to developers</span></span><br><span class="line">  <span class="comment">// that something is failing.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">      notifyFailed();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    runWrapped();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">      Log.d(TAG, <span class="string">&quot;DecodeJob threw unexpectedly&quot;</span></span><br><span class="line">          + <span class="string">&quot;, isCancelled: &quot;</span> + isCancelled</span><br><span class="line">          + <span class="string">&quot;, stage: &quot;</span> + stage, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// When we&#x27;re encoding we&#x27;ve already notified our callback and it isn&#x27;t safe to do so again.</span></span><br><span class="line">    <span class="keyword">if</span> (stage != Stage.ENCODE) &#123;</span><br><span class="line">      notifyFailed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isCancelled) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runWrapped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (runReason) &#123;</span><br><span class="line">     <span class="comment">// 初始化 获取下一个阶段状态</span></span><br><span class="line">    <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">      stage = getNextStage(Stage.INITIALIZE);</span><br><span class="line">      currentGenerator = getNextGenerator();</span><br><span class="line">      <span class="comment">// 运行load数据</span></span><br><span class="line">      runGenerators();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SWITCH_TO_SOURCE_SERVICE:</span><br><span class="line">      runGenerators();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DECODE_DATA:</span><br><span class="line">      <span class="comment">// 处理已经load到的数据</span></span><br><span class="line">      decodeFromRetrievedData();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unrecognized run reason: &quot;</span> + runReason);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> DataFetcherGenerator <span class="title">getNextGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (stage) &#123;</span><br><span class="line">    <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResourceCacheGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DataCacheGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">case</span> SOURCE:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SourceGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">case</span> FINISHED:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unrecognized stage: &quot;</span> + stage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Stage <span class="title">getNextStage</span><span class="params">(Stage current)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">    <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">      <span class="keyword">return</span> diskCacheStrategy.decodeCachedResource()</span><br><span class="line">          ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);</span><br><span class="line">    <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">      <span class="keyword">return</span> diskCacheStrategy.decodeCachedData()</span><br><span class="line">          ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);</span><br><span class="line">    <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">      <span class="comment">// Skip loading from source if the user opted to only retrieve the resource from cache.</span></span><br><span class="line">      <span class="keyword">return</span> onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;</span><br><span class="line">    <span class="keyword">case</span> SOURCE:</span><br><span class="line">    <span class="keyword">case</span> FINISHED:</span><br><span class="line">      <span class="keyword">return</span> Stage.FINISHED;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unrecognized stage: &quot;</span> + current);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要的加载逻辑就在这几个方法里。这个runReason初始值就是INITIALIZE，进入这个case首先调用了getNextStage方法，获取到Stage然后根据Stage获取相应的Generator，最后执行Generator。一共有三种Generator：</p>
<ul>
<li>ResourceCacheGenerator：从处理过的缓存加载数据</li>
<li>DataCacheGenerator：从原始缓存加载数据</li>
<li>SourceGenerator：从数据源请求数据</li>
</ul>
<p>上面提到执行Generator，会调用currentGenerator.startNext方法，这里主要看一下SourceGenerator的starNext方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (dataToCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Object data = dataToCache;</span><br><span class="line">    dataToCache = <span class="keyword">null</span>;</span><br><span class="line">    cacheData(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sourceCacheGenerator != <span class="keyword">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sourceCacheGenerator = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  loadData = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class="line">    loadData = helper.getLoadData().get(loadDataListIndex++);</span><br><span class="line">    <span class="keyword">if</span> (loadData != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</span><br><span class="line">        || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</span><br><span class="line">      started = <span class="keyword">true</span>;</span><br><span class="line">      loadData.fetcher.loadData(helper.getPriority(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> started;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面老长一段先不看了，第一次加载肯定是null，直接看后面，首先是getLoadData：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;LoadData&lt;?&gt;&gt; getLoadData() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isLoadDataSet) &#123;</span><br><span class="line">    isLoadDataSet = <span class="keyword">true</span>;</span><br><span class="line">    loadData.clear();</span><br><span class="line">    List&lt;ModelLoader&lt;Object, ?&gt;&gt; modelLoaders = glideContext.getRegistry().getModelLoaders(model);</span><br><span class="line">    <span class="keyword">int</span> size = modelLoaders.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      ModelLoader&lt;Object, ?&gt; modelLoader = modelLoaders.get(i);</span><br><span class="line">      LoadData&lt;?&gt; current =</span><br><span class="line">          modelLoader.buildLoadData(model, width, height, options);</span><br><span class="line">      <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        loadData.add(current);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> loadData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过glide的上下文获取到所有能处理Model类型的注册过的ModelLoader，遍历这些ModelLoader，通过buildLoadData生成LoadData，最终返回一个LoadData的列表。loadData咋来的弄清楚了，接着看重点了，loadData，这一看就是加载数据的方法了。由于Glide适配了多种网络请求框架，这基本都是用的接口来解耦，看起来真的挺蛋疼的……关于fetcher的实现类就不去分析了，直接看数据加载成功的回调就好。上面的代码是将SourceGenertor自身传递进去作为回调，直接看回调方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataReady</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">  DiskCacheStrategy diskCacheStrategy = helper.getDiskCacheStrategy();</span><br><span class="line">  <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) &#123;</span><br><span class="line">    dataToCache = data;</span><br><span class="line">    <span class="comment">// We might be being called back on someone else&#x27;s thread. Before doing anything, we should</span></span><br><span class="line">    <span class="comment">// reschedule to get back onto Glide&#x27;s thread.</span></span><br><span class="line">    cb.reschedule();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cb.onDataFetcherReady(loadData.sourceKey, data, loadData.fetcher,</span><br><span class="line">        loadData.fetcher.getDataSource(), originalKey);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里调用了reschedule，重新调度当前任务，这个时候我们前面忽略的代码就起作用了，会进行写缓存的操作。这之后会切换加载的策略，最终获取数据成功时会调用onDataFecherReady，这个方法又会调用decodeFromRetrieveData方法，这个方法又调用了decodeFromData，这个方法又调用了decodeFromFetcher（有完没完了……）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;Data&gt; <span class="function">Resource&lt;R&gt; <span class="title">decodeFromFetcher</span><span class="params">(Data data, DataSource dataSource)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</span><br><span class="line">  <span class="keyword">return</span> runLoadPath(data, dataSource, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;Data, ResourceType&gt; <span class="function">Resource&lt;R&gt; <span class="title">runLoadPath</span><span class="params">(Data data, DataSource dataSource,</span></span></span><br><span class="line"><span class="params"><span class="function">    LoadPath&lt;Data, ResourceType, R&gt; path)</span> <span class="keyword">throws</span> GlideException </span>&#123;</span><br><span class="line">  DataRewinder&lt;Data&gt; rewinder = glideContext.getRegistry().getRewinder(data);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.load(rewinder, options, width, height,</span><br><span class="line">        <span class="keyword">new</span> DecodeCallback&lt;ResourceType&gt;(dataSource));</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rewinder.cleanup();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这我真是无语了，又是一堆看不懂的……我能怎么办啊，我也很绝望啊！不过行百里者半九十（虽然可能连60都没……），咬咬牙就挺过去了~</p>
<p>里面涉及到的东西，一个一个的简介：</p>
<ul>
<li>LoadPath：根据给定的数据类型的DataFetcher尝试获取数据，然后尝试通过一个或多个decodePath进行decode</li>
<li>DecodePath：根据指定的数据类型对resource进行decode和transcode</li>
<li>DataRewinder：负责将流转换成数据类型</li>
</ul>
<p>最终在run方法里开始了最终的加载，传入的参数是DecodeJob的内部类，实现了DecodePath.DecodeCallback，看一下最终的回调方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Resource&lt;Z&gt; <span class="title">onResourceDecoded</span><span class="params">(Resource&lt;Z&gt; decoded)</span> </span>&#123;</span><br><span class="line">  Class&lt;Z&gt; resourceSubClass = getResourceClass(decoded);</span><br><span class="line">  Transformation&lt;Z&gt; appliedTransformation = <span class="keyword">null</span>;</span><br><span class="line">  Resource&lt;Z&gt; transformed = decoded;</span><br><span class="line">  <span class="keyword">if</span> (dataSource != DataSource.RESOURCE_DISK_CACHE) &#123;</span><br><span class="line">    appliedTransformation = decodeHelper.getTransformation(resourceSubClass);</span><br><span class="line">    <span class="comment">// 资源转换</span></span><br><span class="line">    transformed = appliedTransformation.transform(decoded, width, height);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Make this the responsibility of the Transformation.</span></span><br><span class="line">  <span class="keyword">if</span> (!decoded.equals(transformed)) &#123;</span><br><span class="line">    decoded.recycle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> EncodeStrategy encodeStrategy;</span><br><span class="line">  <span class="keyword">final</span> ResourceEncoder&lt;Z&gt; encoder;</span><br><span class="line">  <span class="keyword">if</span> (decodeHelper.isResourceEncoderAvailable(transformed)) &#123;</span><br><span class="line">    encoder = decodeHelper.getResultEncoder(transformed);</span><br><span class="line">    encodeStrategy = encoder.getEncodeStrategy(options);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    encoder = <span class="keyword">null</span>;</span><br><span class="line">    encodeStrategy = EncodeStrategy.NONE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Resource&lt;Z&gt; result = transformed;</span><br><span class="line">  <span class="keyword">boolean</span> isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);</span><br><span class="line">  <span class="keyword">if</span> (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,</span><br><span class="line">      encodeStrategy)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (encoder == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Registry.NoResultEncoderAvailableException(transformed.get().getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> Key key;</span><br><span class="line">    <span class="keyword">if</span> (encodeStrategy == EncodeStrategy.SOURCE) &#123;</span><br><span class="line">      key = <span class="keyword">new</span> DataCacheKey(currentSourceKey, signature);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (encodeStrategy == EncodeStrategy.TRANSFORMED) &#123;</span><br><span class="line">      key = <span class="keyword">new</span> ResourceCacheKey(currentSourceKey, signature, width, height,</span><br><span class="line">          appliedTransformation, resourceSubClass, options);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unknown strategy: &quot;</span> + encodeStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LockedResource&lt;Z&gt; lockedResult = LockedResource.obtain(transformed);</span><br><span class="line">    <span class="comment">// 根据缓存策略初始化</span></span><br><span class="line">    deferredEncodeManager.init(key, encoder, lockedResult);</span><br><span class="line">    result = lockedResult;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后还是回到了decodeFromRetrievedData：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeFromRetrievedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">    logWithTimeAndKey(<span class="string">&quot;Retrieved data&quot;</span>, startFetchTime,</span><br><span class="line">        <span class="string">&quot;data: &quot;</span> + currentData</span><br><span class="line">        + <span class="string">&quot;, cache key: &quot;</span> + currentSourceKey</span><br><span class="line">        + <span class="string">&quot;, fetcher: &quot;</span> + currentFetcher);</span><br><span class="line">  &#125;</span><br><span class="line">  Resource&lt;R&gt; resource = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    resource = decodeFromData(currentFetcher, currentData, currentDataSource);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (GlideException e) &#123;</span><br><span class="line">    e.setLoggingDetails(currentAttemptingKey, currentDataSource);</span><br><span class="line">    exceptions.add(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">    notifyEncodeAndRelease(resource, currentDataSource);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    runGenerators();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>notifyEncodeAndRelease中处理了对处理过的图片的缓存操作。当缓存完成后（如果有需要的话）就通过回调告诉外面加载完成了。至此，整个加载过程完成。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里只是简单的过了一遍最简的调用所经历的过程，但是这中间涉及到的东西真的很多。Glide用起来还是挺方便的，由于需要考虑各种情况和适配不同的网络请求框架，内部采用了各种接口解耦，读的时候这也算是比较痛苦的一点吧，往往得往前追溯几个类你才能知道这个实现类是什么。不过Glide还是很值得我们去学习一下，阅读一下的，以后我也会更加深入的去阅读Glide。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://blog.csdn.net/methods2011/article/details/52345027">Glide源码之生命周期</a></p>
<p><a href="http://hpw123.win/2016/12/30/Glide%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">Glide源码分析</a></p>
<p><a href="https://github.com/bumptech/glide">Glide官方仓库</a></p>
<p><a href="http://www.jianshu.com/p/9bd6efca8724">如何调试Glide加载图片</a></p>
<p><a href="http://angeldevil.me/2016/09/05/glide/">Glide源码导读</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议小结</title>
    <url>/2016/11/27/HTTP%E5%8D%8F%E8%AE%AE%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文是阅读了《图解HTTP》一文同时本周也在一个小团体内进行了一些HTTP协议的讨论，感觉对于HTTP协议的理解比以前又加深了不少。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>以下材料选自《图解HTTP》：</p>
<p>在学习Http协议之前首先看一下他的历史，也许能解答我们不少的问题。</p>
<p>1989年3月，互联网还只属于少数人。在这一互联网的黎明期，HTTP诞生了。CERN（欧洲核子研究组织）的蒂姆·伯纳斯-李（Tim BernersLee）博士提出了一种能让远隔两地的研究者们共享知识的设想。</p>
<span id="more"></span>

<p>最初设想的基本理念是：借助多文档之间的相互关联形成的超文本（Hyper Text），连成可相互参阅的WWW（World Wide Web，万维网）。WWW这一名称，是Web浏览器用来浏览超文本的客户端应用程序时的名称。现在则用来表示这一系列的集合，也可简称为Web</p>
<ul>
<li><p>HTTP/0.9<br>HTTP于1990年问世。那时的HTTP并没有作为正式的标准被建立。现在的HTTP其实含有HTTP1.0之前版本的意思，因此被称为HTTP/0.9。</p>
</li>
<li><p>HTTP/1.0<br>HTTP正式作为标准被公布是在1996年的5月，版本被命名为HTTP/1.0，并记载于RFC1945。虽说是初期标准，但该协议标准至今仍被广泛使用在服务器端。</p>
</li>
<li><p>HTTP/1.1<br>1997年1月公布的HTTP/1.1是目前主流的HTTP协议版本。当初的标准是RFC2068，之后发布的修订版RFC2616就是当前的最新版本。</p>
</li>
</ul>
<h3 id="HTTP协议的根基"><a href="#HTTP协议的根基" class="headerlink" title="HTTP协议的根基"></a>HTTP协议的根基</h3><p>在了解HTTP协议之前，首先对整个计算机网络协议做一个大致的了解。首先要提到的是ISO指定的OSI七层模型，但是这个参考模型过于庞大、复杂。与此相对的是技术人员自己开发的TCP/IP协议族获得了更广泛的应用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-aac6bbacbec17bee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP/IP参考模型"></p>
<p>对于我们应用端程序员来说，接触最多的还是应用层的协议，HTTP协议也是属于这一层的。但是HTTP协议是基于传输层协议的，传输层的协议是TCP和UDP协议，使用TCP协议连接会经历三次握手，而UDP不会。HTTP协议是基于可靠的TCP协议的，关于TCP/IP我们需要了解的东西暂时就到这了。更多的可以自己去看《TCP/IP详解 卷1》。最初HTTP协议的出现时为了解决WEB间数据问题的，时至今日，因为他简单的特性已经被用于各种场景了（比如咱Android和IOS，虽然以后可能会被https取代。。)，所以在具体了解HTTP协议的时候，你可能会发现很多东西是你平时用不上的，这都是很正常的。</p>
<h3 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h3><p>HTTP协议的请求响应报文中必定包含HTTP首部，只是我们平时在使用Web的过程中感受不到它。<br>HTTP报文的结构：<br>报文首部 + 空行 + 报文主体</p>
<p>HTTP请求报文<br>在请求中，HTTP报文由方法、URI、HTTP版本、HTTP首部字段等部分构成。<br>报文首部构成：请求行 + 请求首部字段 + 通用首部字段 + 实体首部字段 + 其他<br>其中：请求首部字段+通用首部字段+实体首部字段就是HTTP首部字段。</p>
<p>让我们通过一个简单的请求看一下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-1b3625b421e0dee9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简书"></p>
<p>首先我在浏览器输入的=&gt;jianshu.com<br>上面的General可以看到一个Status Code：301，这个状态码代表的意思就是永久性重定向。该状态码表示请求的资源已经被分配了新的URI，希望用户（本次）能使用新的URI访问，那为啥呢？因为我输的是jianshu.com，但是实际上简书的域名是<a href="http://www.jianshu.com/">www.jianshu.com</a></p>
<p>另外在HTTP协议中状态码是一个比较重要的东西，我们通常需要根据状态码来得到一些基本的信息，比如说本次请求是否成功。那么简单的罗列一下HTTP协议中的一些状态码：</p>
<p>1XX        信息性状态码            接收的请求正在处理<br>2XX        成功状态码                请求正常处理完毕<br>3XX        重定向状态码            需要进行附加操作已完成请求<br>4XX        客户端错误状态码     服务器无法处理请求<br>5XX        服务器错误状态         服务器处理请求出错</p>
<p>以上是对状态码的一些简介，如果你想要了解更详细的，可以自行google。</p>
<p>HTTP首部字段结构<br>HTTP首部字段是由首部字段名和字段值构成的，中间用冒号“：”分割。</p>
<p>首部字段名：字段值<br>例如，在HTTP首部中以Content-Type这个字段来表示报文主体的对象类型。<br>Content-Type:text/html<br>就以上述示例来看，首部字段名为Content-Type，字符串text/html是字段值。</p>
<p>另外，字段值对应单个HTTP首部字段可以有多个值，入下所示<br>Keep-Alive:timeout=15,max=100</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-26c32eb479ead47f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c99926dcb3afe9fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-8c21e6ad6bd46f2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-17fccbc4a3d01537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP"></p>
<p>除了以上HTTP/1.1协议（RFC2616）中规定的47种首部字段，还有一些非正式的首部字段，这些字段被统一归纳在RFC4229 HTTP Header Field Registrations中。常用的Cookie、SetCookie和Content-Disposition等。</p>
<p>看了以上那么多首部字段，是不是有些眼花缭乱？其实根本没有那么复杂……对于我们android开发者来说，在平时的应用场景中只要知道Content-Type和Cookie就能应付大部分场景了。首先Cookie这玩意一般是用来验证用户身份的。众所周知HTTP协议是一个无状态协议，是不能记住用户的。Cookie应运而生，而在现在，一般来说在服务器端会将用户记录入一个session，而在你登录的请求中，服务器会返回一个cookie，这时候就需要我们去拿到这个cookie并在每一次请求中都加入了。通常这个cookie是一个session id，当然了，如果你们服务端的大兄弟返一个token给你，让你加在请求头里，那也随他开心，他要咱怎么做，咱就配合就成了。Content-Type是指明请求实体的媒体类型，具体的值可以在用到的时候自行去查找。</p>
<h3 id="简单的请求"><a href="#简单的请求" class="headerlink" title="简单的请求"></a>简单的请求</h3><p>接下来使用Okhttp来进行一些简单的请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GET请求</span></span><br><span class="line">Request getRequest = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">Call call = mOkhttpClient.newCall(getRequest);</span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>首先这是一个最简单的GET请求，首先创建一个请求Request，再创建一个Call，最后将这个请求调度这个call，最终你可以在onResponse这个回调里处理响应报文。这里有一个小地方值得注意，不要重复使用response.body().string()，当然如果你有需要，可以先将他赋给一个String的引用，不然第二次使用它的时候可能为空。这一点在我使用的时候还是这样，各位看官对于为什么这样感兴趣的话可以去搜搜。</p>
<p>再来一个普通的表单请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//表单请求</span></span><br><span class="line">    FormBody formBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">            .add(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;18255697137&quot;</span>)</span><br><span class="line">            .add(<span class="string">&quot;pass&quot;</span>,<span class="string">&quot;123&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    Request postFormRequest = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(...)</span><br><span class="line">            .post(formBody)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    Call postFormCall = mOkhttpClient.newCall(postFormRequest);</span><br><span class="line">    postFormCall.enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            String str = response.body().string();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            testText.setText(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与上面的GET请求对比，可以看出多了构建请求实体的步骤，这里我模拟登陆的场景，提交明文的账号密码。先说说我对于这种构建请求的看法：</p>
<ul>
<li>步骤很清晰，很HTTP</li>
<li>用起来着实麻烦</li>
</ul>
<p>对于Okhttp进行封装的库我用过两个，一个是OkhttpUtils，是鸿洋大神的作品，另一个就是Square的Retrofit了。OkhttpUtils好用是挺好用的，链式api，构建一个HTTP请求非常简单，但是对于RxJava和响应与实体转换的支持并不是很好，所以我个人更倾向于Retrofit。</p>
<p>那么用Retrofit+RxJava构建一个表单请求会是怎样的呢？</p>
<p>首先定义一个ApiStore接口，里面包含了一个register方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApiStore</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@FormUrlEncoded</span></span><br><span class="line">    <span class="meta">@POST(&quot;api.php?action=register&quot;)</span></span><br><span class="line">    <span class="function">Observable&lt;BaseResponse&gt; <span class="title">register</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Field(&quot;name&quot;)</span>String username</span></span></span><br><span class="line"><span class="params"><span class="function">            ,<span class="meta">@Field(&quot;pass&quot;)</span>String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     </span><br></pre></td></tr></table></figure>
<p>定义一个接收数据的类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;the code is---&gt;&quot;</span> + code + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;the message is---&gt;&quot;</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发送请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TextView testText = (TextView) findViewById(R.id.test);</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASEURL)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ApiStore apiStore = retrofit.create(ApiStore.class);</span><br><span class="line">apiStore.register(<span class="string">&quot;182*******7&quot;</span>,<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .map(BaseResponse::toString)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(testText::setText,Throwable::printStackTrace);</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f5420062107382c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br>可能你看了我对于Retrofit的使用，感觉这不比Okhttp的使用还要麻烦么。。。其实不是的，一是现在演示的都是很基础简单的东西，一是我也是刚上手Retrofit，应该还可以进一步的封装。</p>
<p>关于Okhttp的使用暂时就到这，本文并非专门总结Okhttp使用方法的，只是顺带一提。今天在讨论完HTTP的一些东西之后，突然又聊了一些HTTP安全方面的东西。众所周知，HTTP是明文传输的，因为在以前通常请求的都是一些资源文件，没有什么加密的必要。但是现在用在移动客户端，这还是挺要命的。有的小伙伴就说了，他们那用MD5……</p>
<p>首先我们想清楚MD5是干什么的，MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。MD5并不是一个加密算法，所以你用MD5处理数据传到服务端是没什么卵用的，只不过是把人能看懂的字符弄成人理解不了的字符串而已。这有啥，我模拟你登录的时候，我直接把你MD5处理过的字符串加上来不就成了，你服务器认这个不就OK?</p>
<p>所以在传输重要数据时可以考虑使用https或者非对称加密，为毛是非对称加密呢。。。因为如果是对称加密，那么客户端会留有一个公钥，这有点不靠谱。。。客户端的安全保障。。。当然你可以把密钥放到so里面，但是我没做过，不知道这样到底安不安全。。。</p>
<p>接下来是关于GET和POST这两种请求的区别：<br><a href="http://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&mid=100000054&idx=1&sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd">来自WebTechGarden</a></p>
<ul>
<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>
<li>GET参数通过URL传递，POST放在Request body中</li>
<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>
</ul>
<p>以上的回答可能是你见的最多的答案了，可是那篇文的作者给出了从另一个角度得出的结论：GET和POST本质上没有区别。<br>GET和POST是HTTP协议中两种发送请求的方法，而HTTP协议是基于TCP/IP关于数据如何在万维网中如何通信的协议。如果你要给GET加上request body，给POST带上url参数，技术上是完全行得通的。</p>
<p>更多的内容自行戳上面的链接，我这只是给个引子~</p>
<p>本次的HTTP小结就暂时告一段落~</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>《图解HTTP》</li>
<li>Square Okhttp Sample：<a href="https://github.com/square/okhttp">https://github.com/square/okhttp</a></li>
<li>square Retrofit Sample：<a href="https://github.com/square/retrofit">https://github.com/square/retrofit</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Java拷贝对象</title>
    <url>/2017/07/27/Java%E6%8B%B7%E8%B4%9D%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>最近有一个需求，要先把文件从U盘拷贝到sd卡。而这个文件的路径则和一个生成的数据有关系，也就是说之前我保存的路径是U盘的路径，最后生成的时候则需要实际在sd卡的路径。这很简单，把路径改了不就成了？</p>
<p>没那么简单，万一sd卡内存不够呢？不够你复制，这个时候你前面已经复制了，路径也改了，数据已经被“污染”了，只能从头再配置一遍。这显然是不合理的做法，所以需要我们拷贝一份原有的数据。但是在Java中默认是引用拷贝，并不是在堆里面给你另外分配一块内存，给你一个新的对象，而是拷贝一个引用给你。这并没有什么卵用，操作的是堆内的同一个对象，依旧逃不过数据被污染的命。所以需要我们自己实现深度拷贝。</p>
<p>我首先能想到的方案有两个：</p>
<ul>
<li>遍历这个类的所有属性，将每一个属性都拷贝一份</li>
<li>先将对象序列化写入文件，再从文件中读取对象</li>
</ul>
<p>第一种方式在类比较简单的时候还是比较实用的，我们为每一个属性申请内存并将值设置好。但是如果这个类内部的属性很复杂或者有比较复杂的父类，这个时候处理起来就麻烦很多了。第二种方式简单是简单，本来也打算就用这种方式来做。后来同事提醒我还有第三种方式：利用Json框架。</p>
<span id="more"></span>

<p>是的利用Json框架比如Gson或者FastJson之类的，可以很简单的将一个实体类转化为字符串，然后我们再将这个字符串转换成一个实体对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson g = <span class="keyword">new</span> Gson();</span><br><span class="line"><span class="comment">// 假设此处t是一个指向堆内对象的引用</span></span><br><span class="line">String s = g.toJson(t);</span><br><span class="line">T newT = g.fromJson(s, T.class);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
      </tags>
  </entry>
  <entry>
    <title>Google官方MVP示例代码阅读笔记</title>
    <url>/2017/02/19/Google%E5%AE%98%E6%96%B9MVP%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这个项目很久之前就从** <a href="https://github.com/googlesamples/android-architecture">android-architecture</a> ** 这个仓库clone了这个MVP架构的todoapp，源码也读过，不过没有整理过。最近整理资料准备毕设了，再读一遍源码，感受和以前又不同了。先放上项目地址，各位可以自己去clone或者下载：<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp">https://github.com/googlesamples/android-architecture/tree/todo-mvp</a></p>
<p>如果各位对MVP模式不是很熟悉，可以看我之前的一篇文：<br><a href="http://www.jianshu.com/p/6d42bf4efe16">Android之MVP初尝试</a>，简单易懂。下文的view一般是指MVP中的view。</p>
<h2 id="剥丝抽茧，理清项目结构"><a href="#剥丝抽茧，理清项目结构" class="headerlink" title="剥丝抽茧，理清项目结构"></a>剥丝抽茧，理清项目结构</h2><p>国际惯例，上项目结构图：</p>
<span id="more"></span>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-36bd2e6026613e10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p>
<p>从包名上很容易分辨出功能：addedittask是添加任务，data是数据管理，statistics是统计，taskdetail是任务详情，tasks是任务浏览之类的。事实上这个项目的关键也就是：** Tasks <strong>、</strong> TaskDetail <strong>、</strong> AddEditTask <strong>、</strong> Statistics **。</p>
<p>这四个关键的地方都有相同之处：</p>
<ul>
<li>定义了view和presenter的契约</li>
<li>Activity负责fragment和presenter的创建</li>
<li>Fragment实现了view接口</li>
<li>presenter实现了presenter接口</li>
</ul>
<p>也就是说，几个功能每一个都是MVP的模式，只不过Model层是公用的。而且这个项目里View层都是Fragment，果然google推荐用Fragment自己的项目里也给我们做个示范……其实关于到底是不是要用Fragment，还是有些争议的，<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0427/2806.html">我为什么不主张使用Fragment</a>，这篇文关于Fragment讲的比较到位了。那么到底要不要用呢？我觉得对于个体而言，不管你喜不喜欢，都要用一用，试一试，因为人要成长，必须踩坑。对于正式项目而言，则需要综合考量，使用Fragment的利是否大于弊。</p>
<p>扯远了，接下来看一下他代码仓库给的一张结构图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-5cb6b83cb11b3d1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构图"></p>
<p>可以看出来左边是数据管理，典型的Model层。而右边呢，你可能认为Activity是Presenter，事实上并不是，Presenter在Activity内，Fragment是View无疑。到这，我觉得关于这个项目结构的简介已经足够了，接下来看代码。</p>
<p>我觉得看一个Android项目的正确姿势应该是先把玩一下app，看一下功能。贴几张app的图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b7d20296321ae1a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4b8023fc2b7b0cc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加任务"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-dcbc0edad7bb3f5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="统计"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-0eaed218cd8949e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="任务详情"></p>
<p>接着就该上入口的Activity看一下了，这个项目的入口Activity是TasksActivity，所在的包是tasks，看一下有哪些东西：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-8a715f83b7302547.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tasks"></p>
<p>第一个是自定义View，第二个就是入口Activity了，第三个即上面所说的“契约”，里面包含了View接口和Presenter接口。TasksFilterType则是一个枚举，里面有三个过滤类型：所有，进行中的，完成的。TasksFragment就是MVP中的View了，TasksPresenter则是MVP中的Presenter了。看一下TasksActivity中的初始化代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.tasks_act);</span><br><span class="line">        Log.e(getClass().getSimpleName(),<span class="string">&quot;onCreate&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set up the toolbar.</span></span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        ActionBar ab = getSupportActionBar();</span><br><span class="line">        ab.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class="line">        ab.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以下的DrawerLayout暂时不看了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// Set up the navigation drawer.</span></span><br><span class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class="line">        mDrawerLayout.setStatusBarBackground(R.color.colorPrimaryDark);</span><br><span class="line">        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);</span><br><span class="line">        <span class="keyword">if</span> (navigationView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setupDrawerContent(navigationView);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取fragment并将之添加到视图上</span></span><br><span class="line">        <span class="comment">// 悬浮按钮在这个taksFragment里设置的点击事件</span></span><br><span class="line">        TasksFragment tasksFragment =</span><br><span class="line">                (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</span><br><span class="line"><span class="comment">//        getSupportFragmentManager().findFragmentById()</span></span><br><span class="line">        <span class="keyword">if</span> (tasksFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create the fragment</span></span><br><span class="line">            tasksFragment = TasksFragment.newInstance();</span><br><span class="line">            <span class="comment">// 提供方法帮助activity加载ui</span></span><br><span class="line">            <span class="comment">// 这个方法其实就是拿到一个事务，然后把这个fragment add到对应的id上了</span></span><br><span class="line">            ActivityUtils.addFragmentToActivity(</span><br><span class="line">                    getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the presenter</span></span><br><span class="line">        mTasksPresenter = <span class="keyword">new</span> TasksPresenter(</span><br><span class="line">                Injection.provideTasksRepository(getApplicationContext()), tasksFragment);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load previously saved state, if available.</span></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TasksFilterType currentFiltering =</span><br><span class="line">                    (TasksFilterType) savedInstanceState.getSerializable(CURRENT_FILTERING_KEY);</span><br><span class="line">            mTasksPresenter.setFiltering(currentFiltering);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>首先是初始化toolbar和侧滑，这里不必深入细节，可以跳过这俩。之后初始化fragment和presenter，初始化Fragment先是尝试通过id寻找可能已经存在的Fragment对象，如果没有，则重新创建一个Fragment对象。下一步则是创建一个presenter，最后则是让应用在横竖屏状态切换的情况下恢复数据。</p>
<p>接下来看一下View和Presenter的“契约”：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TasksContract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLoadingIndicator</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTasks</span><span class="params">(List&lt;Task&gt; tasks)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showAddTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTaskDetailsUi</span><span class="params">(String taskId)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTaskMarkedComplete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTaskMarkedActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCompletedTasksCleared</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoadingTasksError</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNoTasks</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showActiveFilterLabel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCompletedFilterLabel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showAllFilterLabel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNoActiveTasks</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNoCompletedTasks</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showSuccessfullySavedMessage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showFilteringPopUpMenu</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">result</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadTasks</span><span class="params">(<span class="keyword">boolean</span> forceUpdate)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addNewTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">openTaskDetails</span><span class="params">(<span class="meta">@NonNull</span> Task requestedTask)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">completeTask</span><span class="params">(<span class="meta">@NonNull</span> Task completedTask)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activateTask</span><span class="params">(<span class="meta">@NonNull</span> Task activeTask)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearCompletedTasks</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setFiltering</span><span class="params">(TasksFilterType requestType)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">TasksFilterType <span class="title">getFiltering</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个接口里包含了View和Presenter，可以看到View和Presenter里的方法比较多，事实上这是应该的。因为在MVP架构里，View只负责根据Presenter的指示绘制UI，View将所有的用户交互交给Presenter处理。所以Presenter的很多方法可能就是对用户的输入的处理，而有输入必然有输出，View接口定义的各个方法便是给Presenter回调的。Presenter通过回调函数将对用户的输入的处理结果推到View中，View再根据这个结果对UI进行相应的更新。而在此项目中，Fragment就是View，在Fragment的各个点击事件中都调用了Presenter的对应方法，将业务逻辑交给Presenter处理。这看起来比传统的MVC强上很多，因为传统MVC中Activity既可以认为是Controller亦可以认为是View，职责难以分离，写到后面可能一个Activity就有上千行的代码，这会为后续的维护带来不少麻烦。而MVP则将业务逻辑抽取到了Presenter中，作为View的Fragment或者Activity职责更加单一，无疑为后续的开发维护带来了便利。</p>
<p>接下来详细的看Presenter的初始化，Presenter的创建是在TasksActivity中完成的，查看其构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TasksPresenter</span><span class="params">(<span class="meta">@NonNull</span> TasksRepository tasksRepository, <span class="meta">@NonNull</span> TasksContract.View tasksView)</span> </span>&#123;</span><br><span class="line">    mTasksRepository = checkNotNull(tasksRepository, <span class="string">&quot;tasksRepository cannot be null&quot;</span>);</span><br><span class="line">    mTasksView = checkNotNull(tasksView, <span class="string">&quot;tasksView cannot be null!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mTasksView.setPresenter(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前两个检查传入的参数是否为空，接着将其赋值给TasksPresenter内的引用，调用view的setPresenter方法，将自身传入，这样view中就可以使用presenter对象了，比直接从activity中拿看起来要优雅了不少。Presenter具体的逻辑就不看了，都是一些比较简单的代码，回顾一下打开这个app所发生的事件的流程：创建TasksActivity  -&gt;  初始化Toolbar  -&gt;  初始化侧滑  -&gt;  创建TasksFragment对象  -&gt;  创建TaskPresenter对象  -&gt;  给Fragment设置Presenter对象  -&gt;  初始化Fragment布局，这样一套流程下来，整个流程就理清了，接下来只是等待用户的输入了。</p>
<p>接下来要看的是从本文开始到现在都一直忽略了的Model：TasksRepository。不过在分析TasksRepository之前，安利一下这个项目里的实体类，写的比较优雅，我们平时写实体类时最好也能按照他的套路来写。我为什么说他写的比较优雅呢？因为各个属性或者是带返回值的方法都打上了@Nullable或者@NoNull注解来说明是否可以为空，事实上空指针这个错可以算是平时经常遇到的错了……不过如果你有良好的设计和编码习惯，是可以避免的，带上这两个注解可以在编译期给你相关的提示。不仅如此，这个实体类还复写了equals()、hashCode()和toString()方法，而且实现的方式也符合规范，关于如何复写这三个方法，在《effective java》上有很好的总结，各位可以去读一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2016, The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Objects;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Strings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Immutable model class for a Task.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mDescription;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mCompleted;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use this constructor to create a new active Task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title       title of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description description of the task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="meta">@Nullable</span> String title, <span class="meta">@Nullable</span> String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(title, description, UUID.randomUUID().toString(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use this constructor to create an active Task if the Task already has an id (copy of another</span></span><br><span class="line"><span class="comment">     * Task).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title       title of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description description of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id          id of the task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="meta">@Nullable</span> String title, <span class="meta">@Nullable</span> String description, <span class="meta">@NonNull</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(title, description, id, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use this constructor to create a new completed Task.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title       title of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description description of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> completed   true if the task is completed, false if it&#x27;s active</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="meta">@Nullable</span> String title, <span class="meta">@Nullable</span> String description, <span class="keyword">boolean</span> completed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(title, description, UUID.randomUUID().toString(), completed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use this constructor to specify a completed Task if the Task already has an id (copy of</span></span><br><span class="line"><span class="comment">     * another Task).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title       title of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> description description of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id          id of the task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> completed   true if the task is completed, false if it&#x27;s active</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="meta">@Nullable</span> String title, <span class="meta">@Nullable</span> String description,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="meta">@NonNull</span> String id, <span class="keyword">boolean</span> completed)</span> </span>&#123;</span><br><span class="line">        mId = id;</span><br><span class="line">        mTitle = title;</span><br><span class="line">        mDescription = description;</span><br><span class="line">        mCompleted = completed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitleForList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Strings.isNullOrEmpty(mTitle)) &#123;</span><br><span class="line">            <span class="keyword">return</span> mTitle;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mDescription;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCompleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !mCompleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Strings.isNullOrEmpty(mTitle) &amp;&amp;</span><br><span class="line">               Strings.isNullOrEmpty(mDescription);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Task task = (Task) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equal(mId, task.mId) &amp;&amp;</span><br><span class="line">               Objects.equal(mTitle, task.mTitle) &amp;&amp;</span><br><span class="line">               Objects.equal(mDescription, task.mDescription);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(mId, mTitle, mDescription);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Task with title &quot;</span> + mTitle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先看一下TasksRepository所在的包的结构：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3826269414c2153c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="data"></p>
<p>可以从包名上看出local是从本地读取数据，remote是远程读取，当然了，这里只是模拟远程读取。本地采用了数据库存取的方式。在TasksRepository（下文简称TR）内部有两个TasksDataSource的引用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TasksDataSource mTasksRemoteDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TasksDataSource mTasksLocalDataSource;</span><br></pre></td></tr></table></figure>
<p>TasksDataSource是data包内的一个接口，使用接口引用，无非是想解耦，就算以后需求变更，不想采用数据库的方式存储数据，只要实现了这个接口，TR内部的代码也无需变更。TR用了单例，实现方式并不是线程安全的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the single instance of this class, creating it if necessary.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tasksRemoteDataSource the backend data source</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tasksLocalDataSource  the device storage data source</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the &#123;<span class="doctag">@link</span> TasksRepository&#125; instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TasksRepository <span class="title">getInstance</span><span class="params">(TasksDataSource tasksRemoteDataSource,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          TasksDataSource tasksLocalDataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> TasksRepository(tasksRemoteDataSource, tasksLocalDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说到底，他根本没有线程安全的必要，至少在这个app里，没有并发创建这个对象的场景，所以够用就行了。在TR内部使用了一个LinkedHashMap作为容器来保存Tasks，主要看一下两个方法，首先是存储：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveTask</span><span class="params">(<span class="meta">@NonNull</span> Task task)</span> </span>&#123;</span><br><span class="line">    checkNotNull(task);</span><br><span class="line">    mTasksRemoteDataSource.saveTask(task);</span><br><span class="line">    mTasksLocalDataSource.saveTask(task);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do in memory cache update to keep the app UI up to date</span></span><br><span class="line">    <span class="keyword">if</span> (mCachedTasks == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mCachedTasks = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    mCachedTasks.put(task.getId(), task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会将传入的task存储到远程数据源和本地数据源（本地数据库）中，然后将这个task传到mCachedTasks（LinkedHashMap）中。代码比较简单，不做更多的分析，接下来看一下读取Task：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTasks</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> LoadTasksCallback callback)</span> </span>&#123;</span><br><span class="line">    checkNotNull(callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Respond immediately with cache if available and not dirty</span></span><br><span class="line">    <span class="keyword">if</span> (mCachedTasks != <span class="keyword">null</span> &amp;&amp; !mCacheIsDirty) &#123;</span><br><span class="line">        callback.onTasksLoaded(<span class="keyword">new</span> ArrayList&lt;&gt;(mCachedTasks.values()));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mCacheIsDirty) &#123;</span><br><span class="line">        <span class="comment">// If the cache is dirty we need to fetch new data from the network.</span></span><br><span class="line">        getTasksFromRemoteDataSource(callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Query the local storage if available. If not, query the network.</span></span><br><span class="line">        mTasksLocalDataSource.getTasks(<span class="keyword">new</span> LoadTasksCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTasksLoaded</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</span><br><span class="line">                refreshCache(tasks);</span><br><span class="line">                callback.onTasksLoaded(<span class="keyword">new</span> ArrayList&lt;&gt;(mCachedTasks.values()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataNotAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                getTasksFromRemoteDataSource(callback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个taskId是需要获取Task的id，也是唯一标识，GetTaskCallback则是负责传递数据的接口回调。首先是从内存中读取数据，getTaskWithId方法就是，看一下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Task <span class="title">getTaskWithId</span><span class="params">(<span class="meta">@NonNull</span> String id)</span> </span>&#123;</span><br><span class="line">    checkNotNull(id);</span><br><span class="line">    <span class="keyword">if</span> (mCachedTasks == <span class="keyword">null</span> || mCachedTasks.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mCachedTasks.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就从保存task的LinkedHashMap中读取数据。如果这个过程读取不到数据那么接着从本地数据源中读取数据，如果本地数据源也没有拿到这个数据，那么最终就从远程数据源中读取数据。</p>
<p>至此，我们简单的过了一遍这个项目。</p>
<h2 id="总结-amp-再谈MVP"><a href="#总结-amp-再谈MVP" class="headerlink" title="总结 &amp; 再谈MVP"></a>总结 &amp; 再谈MVP</h2><p>Google这个示例项目，架构非常的清晰，也是很标准的MVP模式，项目中解耦做的也非常好。但是相对于一个功能简单的应用来说，代码量还是比较多的。当然，因为这只是一个小例子而已，可能会让人觉得反而不如普通的MVC来开发方便，但是人无远虑必有近忧。我们做东西的时候要尽量做长远的打算，不然以后可能就会被淹没在频繁的需求变更里了。Google的这个项目有非常多值得我们学习的地方，比如我们写MVP的时候也可以用一个Contract类来将View和Presenter放入其中，方便我们管理（改代码）。</p>
<p>我们都知道MVP与MVC的主要区别是View和Model不直接交互，而是通过Presenter来完成交互，这样可以修改View而不影响Model，实现了Model和View真正的完全分离。而MVP中将业务逻辑抽取放到Presenter中，使各个模块的职责更加清晰，层次明了。而且还有很关键的一点，使用MVP架构使得应用能更加方便的进行单元测试。Android中虽然有很多测试框架，但是讲实话，你不研究个一段时间很难使用那些框架进行有效的测试。而且很多测试是难以进行的，因为有的需要依赖Android环境或者UI环境。而如果使用了MVP架构，View层因为是用接口定义的，所以完全可以自己建一个View模拟视图对象，这样就可以使得我们的测试不必依赖UI环境。这样最大的好处就是我们不必花费太多的时间去研究那些测试框架，也能写出有效的单元测试，保证我们代码的质量。</p>
<p>相较于MVP的优点，其缺点也是非常明显的，从Google的这个示例代码也能看出来，代码量比较大，小型Android应用的开发用这个反而麻烦。Presenter既负责业务逻辑，又负责Model和View的交互，到后期也难免会膨胀、臃肿，最终造成这玩意可能维护起来也不简单。</p>
<p>虽然MVP还是有不足的地方，但是相较于MVC，还是更容易的写出易维护、测试的代码的，所以各位不妨都阅读一下Google的这个代码~</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin的LogUtil</title>
    <url>/2017/09/03/Kotlin%E7%9A%84LogUtil/</url>
    <content><![CDATA[<p>最近在撸东西，调试的时候用Android原生的Log感觉很不爽，打的Log给我一种东倒西歪，凌乱的感觉。于是自己看了一下<a href="http://www.jianshu.com/u/46702d5c6978">Blankj大神</a>的Android-Utils库，看了一下他实现的LogUtils，借鉴了一下，简单的封装了一个在Kotlin中可以正确使用的LogUtil。不过话说讲道理，有扩展，Util这种东西还是可以尽量不用的，但是我有点不清楚Log这玩意该扩展给谁呢，Any？所以还是写了一个LogUtil……</p>
<h2 id="打印效果"><a href="#打印效果" class="headerlink" title="打印效果"></a>打印效果</h2><p>最后直接放一下打印Log的样子，这里只放出i级别的日志：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-88ca3b626fed0ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<p>处理了日志比较长的时候的情况，点击log中蓝色的字可以跳转到代码中的相应位置，各位如果感兴趣是怎么实现的，可以直接看我代码（当然了，我也是看别人的才知道怎么去实现，哈哈）。</p>
<span id="more"></span>
<p><a href="http://www.jianshu.com/u/46702d5c6978">Blankj</a>大神的LogUtils有一个问题，就是代码中获取代码文件的时候写死了.java结尾，所以在kotlin以.kt结尾的时候，就无法正确的跳转到代码里（版本号：1.8.3），当然了，我已经跟Blankj反馈了，在不久的将来应该会修复。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/9/1.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> LogUtil &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> MIN_STACK_OFFSET = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> defaultTag = <span class="string">&quot;LogUtil&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lineSeparator = System.getProperty(<span class="string">&quot;line.separator&quot;</span>, <span class="string">&quot;/n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> V = Log.VERBOSE</span><br><span class="line">    <span class="keyword">val</span> D = Log.DEBUG</span><br><span class="line">    <span class="keyword">val</span> I = Log.INFO</span><br><span class="line">    <span class="keyword">val</span> W = Log.WARN</span><br><span class="line">    <span class="keyword">val</span> E = Log.ERROR</span><br><span class="line">    <span class="keyword">val</span> A = Log.ASSERT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TOP_BORDER = <span class="string">&quot;╔═══════════════════════════════════════════════════════════════════════════════════════════════════&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> LEFT_BORDER = <span class="string">&quot;║ &quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> BOTTOM_BORDER = <span class="string">&quot;╚═══════════════════════════════════════════════════════════════════════════════════════════════════&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> MAX_LEN = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">open</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">processTagAndHead</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> elements = Thread.currentThread().stackTrace</span><br><span class="line">        <span class="keyword">val</span> offset = getStackOffset(elements)</span><br><span class="line">        <span class="keyword">val</span> targetElement = elements[offset]</span><br><span class="line">        <span class="keyword">val</span> head = Formatter()</span><br><span class="line">                .format(<span class="string">&quot;%s [%s(%s:%d)]&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;In Thread: &quot;</span> + Thread.currentThread().name,</span><br><span class="line">                        targetElement.methodName,</span><br><span class="line">                        targetElement.fileName,</span><br><span class="line">                        targetElement.lineNumber)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">processMsgBody</span><span class="params">(msg: <span class="type">String</span>, flag: <span class="type">Int</span>, tag: <span class="type">String</span> = defaultTag)</span></span> &#123;</span><br><span class="line">        printTop(flag, tag)</span><br><span class="line">        <span class="comment">// 首先打印调用信息</span></span><br><span class="line">        printLog(flag, tag)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> lineCount = msg.length / MAX_LEN</span><br><span class="line">        <span class="keyword">if</span> (lineCount == <span class="number">0</span>) &#123;</span><br><span class="line">            printLog(flag, tag, msg)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                printLog(flag, tag, msg.substring(index, index + MAX_LEN))</span><br><span class="line">                index += MAX_LEN</span><br><span class="line">                <span class="keyword">if</span> ((++i) &gt;= lineCount)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printBottom(flag, tag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getStackOffset</span><span class="params">(trace: <span class="type">Array</span>&lt;<span class="type">StackTraceElement</span>&gt;)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = MIN_STACK_OFFSET</span><br><span class="line">        <span class="keyword">while</span> (i &lt; trace.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> e = trace[i]</span><br><span class="line">            <span class="keyword">val</span> name = e.className</span><br><span class="line">            <span class="keyword">if</span> (name != LogUtil::<span class="keyword">class</span>.java.name) &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 虽然 kotlin 有默认值这种操作，但是 Log.i(tag,msg) 这种比较符合平时的操作，所以还是提供类似的重载，</span></span><br><span class="line"><span class="comment">     * 而非 LogUtil.i(msg: String,tag: String = defaultTAG) 这种带默认值参数的方法 */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        v(defaultTag, msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">i</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        i(defaultTag, msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">d</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        d(defaultTag, msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">w</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        w(defaultTag, msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">e</span><span class="params">(msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        e(defaultTag, msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">(tag: <span class="type">String</span>, msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">open</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        processMsgBody(msg, V, tag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">i</span><span class="params">(tag: <span class="type">String</span>, msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">open</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        processMsgBody(msg, I, tag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">d</span><span class="params">(tag: <span class="type">String</span>, msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">open</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        processMsgBody(msg, D, tag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">w</span><span class="params">(tag: <span class="type">String</span>, msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">open</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        processMsgBody(msg, W, tag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">e</span><span class="params">(tag: <span class="type">String</span>, msg: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">open</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        processMsgBody(msg, E, tag)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printLog</span><span class="params">(flag: <span class="type">Int</span>, tag: <span class="type">String</span>, msg: <span class="type">String</span> = processTagAndHead()</span></span>) &#123;</span><br><span class="line">        Log.println(flag, tag, LEFT_BORDER + msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printBottom</span><span class="params">(flag: <span class="type">Int</span>, tag: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.println(flag, tag, BOTTOM_BORDER)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printTop</span><span class="params">(flag: <span class="type">Int</span>, tag: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.println(flag, tag, TOP_BORDER)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">closeLog</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">open</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin委托 &amp; 扩展 &amp; 高阶函数</title>
    <url>/2017/07/31/Kotlin%E5%A7%94%E6%89%98%20&amp;%20%E6%89%A9%E5%B1%95%20&amp;%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Kotlin现在已经是Android官方的一级开发语言了，以前就有大佬给我安利，最近刚好看open cv的c++和ndk看的头昏脑涨，反正最近也用不到，只是出于兴趣，不如换个脑子看看最近势头比较盛的Kotlin好了。在这里感谢一下<a href="%5Bhttp://www.jianshu.com/u/2b4f4be84600">猫哥</a>对我的耐心指导，让我对Kotlin的认识更进了一步。</p>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托有委托类和委托属性。</p>
<h3 id="委托类"><a href="#委托类" class="headerlink" title="委托类"></a>委托类</h3><p>我在看文档的时候就感觉跟Java里的某个操作非常像……于是非常恶趣味的将代码写成了如下模式：</p>
<span id="more"></span>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">click</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> : <span class="type">OnClickListener &#123;</span></span></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">click</span><span class="params">()</span></span> &#123;</span><br><span class="line">       println(<span class="string">&quot;do something about click event&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span></span>(b: OnClickListener) : OnClickListener <span class="keyword">by</span> b &#123;</span><br><span class="line">   <span class="keyword">init</span> &#123;</span><br><span class="line">       println(<span class="string">&quot;we can do something about activity here&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> listener = MyListener()</span><br><span class="line">   <span class="keyword">val</span> activity = MainActivity(listener)</span><br><span class="line">   activity.click()</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// we can do something about activity here</span></span><br><span class="line"><span class="comment">// do something about click event</span></span><br></pre></td></tr></table></figure>

<p>是的，我觉得这个类委托跟Java里设置接口回调这个操作很像。只不过一般情况下，我们会使用匿名类来实现这个接口，并在实现中写上我们的代码。而委托类在文档中的描述是：The Delegation pattern has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code. </p>
<p>又到了展示我辣鸡英语水平的时候了：委托模式是一种实现继承的良好方式，Kotlin原生支持不需要额外的样板代码。（意译，不完全符合字面意思）</p>
<p>也就是说跟我想的差不多，Kotlin语言本身提供了委托，可以让我们省了setxxxListener这种重复劳动。</p>
<h3 id="委托属性"><a href="#委托属性" class="headerlink" title="委托属性"></a>委托属性</h3><p>委托属性官方举了三个应用场景：</p>
<ul>
<li><p>延迟属性：只在第一次访问的时候初始化（计算）</p>
</li>
<li><p>可观察属性：监听器得到关于这个特性变化的通知</p>
</li>
<li><p>把所有属性存储在一个map中，而不是在单独的字段里</p>
</li>
</ul>
<p>假如现在在项目里需要一个地点名称的属性，这个地点并不是每一次都需要用到，我们只在有需要的时候获取这个属性，我们就可以使用Kotlin提供的lazy来实现：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">val</span> address: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">       getAdd()</span><br><span class="line">   &#125;</span><br><span class="line">​</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getAdd</span><span class="params">()</span></span>: String = <span class="string">&quot;北京天安门&quot;</span></span><br></pre></td></tr></table></figure>

<p>下面是可观察属性，Kotlin中提供了Observable委托，来看看是怎么用的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> status: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.observable(<span class="number">0</span>) &#123;</span><br><span class="line">       d, old, new -&gt;</span><br><span class="line">       println(<span class="string">&quot;属性名称：<span class="variable">$d</span>，以前是：<span class="variable">$old</span>，现在是：<span class="variable">$new</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> p = PropertyDelegate()</span><br><span class="line">​</span><br><span class="line">   println(p.status)</span><br><span class="line">   p.status = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 属性名称：var PropertyDelegate.status: kotlin.Int，以前是：0，现在是：2</span></span><br></pre></td></tr></table></figure>

<p>的确观察到了属性值的变化，上面observable(0)中的0作为status的初始化值，后面的那种写法暂时先放着，是将函数作为参数的一种使用方式。<br>接下来看看将属性存储在Map中：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUser</span></span>(<span class="keyword">val</span> map: Map&lt;String, Any?&gt;) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> name: String <span class="keyword">by</span> map</span><br><span class="line">   <span class="keyword">val</span> age: <span class="built_in">Int</span> <span class="keyword">by</span> map</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> user: TestUser = TestUser(mapOf(</span><br><span class="line">           <span class="string">&quot;name&quot;</span> to <span class="string">&quot;test&quot;</span>,</span><br><span class="line">           <span class="string">&quot;age&quot;</span> to <span class="number">16</span></span><br><span class="line">   ))</span><br><span class="line">​</span><br><span class="line">   println(<span class="string">&quot;username:&quot;</span> + user.name + <span class="string">&quot;,age:&quot;</span> + user.age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// username:test,age:16</span></span><br></pre></td></tr></table></figure>

<p>上面三个都是Kotlin提供的委托，我们也可以自己实现属性委托：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">​</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getNameInfoFromNetWork</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">       <span class="keyword">return</span> name ?: <span class="string">&quot;假装我是从网络获取的名字&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">​</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(any: <span class="type">Any</span>, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">       println(<span class="string">&quot;打印观察：any=<span class="variable">$any</span> property=<span class="variable">$property</span>&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span> getNameInfoFromNetWork()</span><br><span class="line">   &#125;</span><br><span class="line">​</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(any: <span class="type">Any</span>, property: <span class="type">KProperty</span>&lt;*&gt;, s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.name = s</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyDelegate</span> </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> name: String <span class="keyword">by</span> Http()</span><br><span class="line">​</span><br><span class="line">   <span class="keyword">val</span> address: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">       getAdd()</span><br><span class="line">   &#125;</span><br><span class="line">​</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getAdd</span><span class="params">()</span></span>: String = <span class="string">&quot;北京天安门&quot;</span></span><br><span class="line">​</span><br><span class="line">   <span class="keyword">var</span> status: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.observable(<span class="number">0</span>) &#123;</span><br><span class="line">       d, old, new -&gt;</span><br><span class="line">       println(<span class="string">&quot;属性名称：<span class="variable">$d</span>，以前是：<span class="variable">$old</span>，现在是：<span class="variable">$new</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> p = PropertyDelegate()</span><br><span class="line">   println(p.name)</span><br><span class="line">   p.name = <span class="string">&quot;hh&quot;</span></span><br><span class="line">   println(p.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 打印观察：any=PropertyDelegate@2e5d6d97 property=var PropertyDelegate.name: kotlin.String</span></span><br><span class="line"><span class="comment">// 假装我是从网络获取的名字</span></span><br><span class="line"><span class="comment">// 打印观察：any=PropertyDelegate@2e5d6d97 property=var PropertyDelegate.name: kotlin.String</span></span><br><span class="line"><span class="comment">// hh</span></span><br></pre></td></tr></table></figure>

<p>var声明的是可变量，需要实现set和get，而val是不可变量，只需要实现get。</p>
<p>简单的介绍了一下官方列举的这三个应用场景，其实感觉这三个例子并不能戳中我的痛点，因为现有的Java虽然实现起来啰嗦了点，但也并不是非常麻烦。比如可观察的属性，我只要在将属性声明为private，然后在set方法里设置一个接口回调就可以了，接口再弄个泛型，得了，所有可观察属性都能用这个接口了。至于后面两个也是同样的，但是这是语言层面的直接支持，喂你糖吃总是得心怀感激的，总好过吃翔不是。接下来就来了解一下Kotlin比较牛x的两个东西：扩展和高阶函数。</p>
<h2 id="扩展-amp-高阶函数"><a href="#扩展-amp-高阶函数" class="headerlink" title="扩展 &amp; 高阶函数"></a>扩展 &amp; 高阶函数</h2><p>扩展是Kotlin中比较能打动我的一个特性，比如原来的Android中的Toast需要这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast.makeText(mContext,<span class="string">&quot;toast&quot;</span>,Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>

<p>说实话，刚开始还觉得敲着挺带感，慢慢的就烦了，自己简单的封装一下是这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToastUtil</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Context context,String text)</span></span>&#123;</span><br><span class="line">  Toast.makeText(context,text,Toast.LENGTH_SHORT).show();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后来传context也传烦了，进一步封装，在Application里弄一个静态方法获取context，然后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToastUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">  Toast.makeText(Application.getContext(),text,Toast.LENGTH_SHORT).show();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么利用Kotlin的扩展，可以怎么做呢？</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Context.<span class="title">toast</span><span class="params">(text: <span class="type">String</span>)</span></span>&#123;</span><br><span class="line">   Toast.makeText(<span class="keyword">this</span>,text,Toast.LENGTH_SHORT).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这为Context类扩展了一个toast方法，这样以后你可以这样使用：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">context.toast(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果你已经在上下文中：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">toast(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这可以说是十分的好用了，有了扩展，还要什么工（zi）具（xing）类（che）。扩展的语法比较简单，不多赘述。另外值得注意的是扩展并非继承，没办法复写类中的函数，用以下例子来说明一下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Extend</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">       println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> Extend.<span class="title">hello</span><span class="params">(s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;<span class="variable">$s</span> hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> Extend.<span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;无参 扩展 hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> e = Extend()</span><br><span class="line">   e.hello()</span><br><span class="line">   e.hello(<span class="string">&quot;luo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// luo hello</span></span><br></pre></td></tr></table></figure>

<p>可以看到当参数和方法名一样时，调用的是类内部的方法并非扩展方法，当参数不一致时调用对应的方法。</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶，这俩字一看就高端大气上档次，看一下文档的描述：A higher-order function is a function that takes functions as parameters, or returns a function。高阶函数一种能把函数作为参数，或者将函数作为返回值的函数。将函数作为参数，桥豆麻袋，这……这不是跟传递点击事件那玩意很像么！Java里写的是接口回调，Java8 可以用lambda，先不管Java内部是怎么实现lambda的，至少从形式上看是很像直接传了个函数进去的。那么，继续用这个点击作为实例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">clickEvent</span><span class="params">(click: () -&gt; <span class="type">Unit</span>)</span></span>&#123;</span><br><span class="line">       println(<span class="string">&quot;click event start&quot;</span>)</span><br><span class="line">       click()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> secondActivity = SecondActivity()</span><br><span class="line">   secondActivity.clickEvent(&#123;</span><br><span class="line">       println(<span class="string">&quot;do something about click event&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// click event start</span></span><br><span class="line"><span class="comment">// do something about click event</span></span><br></pre></td></tr></table></figure>

<p>首先解释一下clickEvent函数，click: () 表示函数类型， -&gt; Unit表示返回值为空，也就是clickEvent接收一个返回值为空的click()方法。在clickEvent方法内部调用了这个传入的方法，达到了传递事件的目的。当然，如果函数是作为最后一个参数，是可以写成这样的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">secondActivity.clickEvent() &#123;</span><br><span class="line">    println(<span class="string">&quot;do something about click event&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有其他参数，那么还能写成这样：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">secondActivity.clickEvent &#123;</span><br><span class="line">    println(<span class="string">&quot;do something about click event&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比Java，黑科技的味道慢慢的就出来了。光看这些可能你会觉得没啥，那么接下来的骚操作一定会让你对Kotlin的感觉提升一截。我也是在猫哥给我指导了一番之后，十分惊讶，还有这种操作？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9b5f57378793cbdb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="令人窒息的操作"></p>
<p>利用高阶函数可以接受函数参数这一点，能玩的东西可就多了去了，接下来就写几个好玩的：</p>
<p>debug模式配置</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">debugConf</span><span class="params">(code: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class="line">       code()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">   debugConf &#123;</span><br><span class="line">       <span class="comment">// init</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这只是一个比较简单的应用场景，类似的还有Android中支持版本代码的编写，每一次都需要判断版本然后调用api，无疑是十分麻烦的，我们也可以利用高阶函数的特性来搞定。具体的代码就不再编写了。接下来举一个利用扩展和高阶函数特性编写的一个判断集合元素是否满足条件的函数。我们利用扩展给List扩展一个叫做myAll的方法，List调用此方法判断集合中的所有元素是否满足条件，如果所有元素都满足，返回true，反之false。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> List<span class="type">&lt;T&gt;</span>.<span class="title">myAll</span><span class="params">(getItem: (<span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!getItem(element)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line"> <span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"> println(<span class="string">&quot;myAll：&quot;</span> + list.myAll &#123; it % <span class="number">1</span> == <span class="number">0</span> &#125;)</span><br><span class="line"> println(<span class="string">&quot;myAll: &quot;</span> + list.myAll &#123; it % <span class="number">2</span> == <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// myAll：true</span></span><br><span class="line"><span class="comment">// myAll: false</span></span><br></pre></td></tr></table></figure>

<p>简单的解释一下，inline是内联函数，在编译时编译器将函数体嵌入在每一个调用处。先看最外层，一个泛型T，用来表示集合内元素类型。myAll方法返回Boolean类型，用来表示所有元素是否符合条件。而getItem方法接收类型为T的参数（List元素类型），返回一个Boolean值表示该元素是否符合条件。判断也是简单粗暴的，遍历List如果有getItem()的返回值是false，那么就返回false。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我看Kotlin也就是断断续续的看了一些语法，总体看下来感觉Java开发者学习Kotlin的成本不是非常高，而且最重要的是，Kotlin兼容Java，迁移成本也非常的低。Kotlin中的很多特性，只是提供了一种语言层面上的支持，Java也不是不能实现，总得拐弯抹角，麻烦的一批。Java语法啰嗦受人诟病也不是一天两天了，不过Java发展到现在更像是一个平台而不是语言了，Java能做的事太多，语法已经不是最值得关注的事情了。不过如果有一个兼容Java而且还喂你各种语法糖的语言出现，为什么不尝试一下呢？如果我说成这样你还不尝试一下，那我只能……</p>
<p>强行给你安利一波了，大爷，试一下Kotlin呗~</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://tanfujun.com/kotlin-web-site-cn/docs/reference/">Kotlin Programming Language 中文版</a></li>
<li><a href="http://kotlinlang.org/docs/reference/">Kotlin Programming Language 英文版</a></li>
<li>kotlin for android developers：电子书</li>
<li><a href="http://www.jianshu.com/u/2b4f4be84600">猫哥</a>Kotlin系列</li>
</ul>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>入门学习</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT协议学习与在Java（Android通用）中的使用</title>
    <url>/2017/09/21/MQTT%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%9C%A8Java%EF%BC%88Android%E9%80%9A%E7%94%A8%EF%BC%89%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近有需求要了解一下各个推送的协议，目前了解到实现推送的三个主要方式：MQTT、XMPP和Google Cloud Message（GCM）。第三种方式暂不研究，前两种都要看一看，本篇讨论一下MQTT协议吧。本文使用阿里云Ubuntu云服务器安装代理服务器，使用eclipse paho实现的MqttClient编写代码。文中的所使用的账户名和密码在本文发布后将会更改，请各位自行搭建环境。本文包括以下内容：</p>
<ul>
<li>MQTT简介</li>
<li>MQTT优势</li>
<li>MQTT开发环境搭建</li>
<li>使用PAHO实现MQTT推送</li>
</ul>
<h2 id="MQTT简介-amp-MQTT优势"><a href="#MQTT简介-amp-MQTT优势" class="headerlink" title="MQTT简介 &amp; MQTT优势"></a>MQTT简介 &amp; MQTT优势</h2><p>MQTT全称是Message Queuing Telemetry Transport，MQTT是IBM开发的基于TCP/IP协议的轻量级通讯协议。MQTT是一个客户端服务端架构的发布-订阅（publish-subscribe）的消息传输协议。它的设计思想是开放、简单、轻量、易于实现。这些特点使它适用于受限环境。例如，但不仅限于：</p>
<span id="more"></span>
<ul>
<li>网络代价昂贵，带宽低、不可靠</li>
<li>在嵌入式设备中运行，处理器和内存资源有限</li>
</ul>
<p>作为一个物联网专业的毕业生，看了以上的描述已经心动了，很适合作为传感器节点之间的通讯协议哇！哦，忘了，我现在是个Androider……MQTT控制报文头部仅有2字节的长度，降低了网络传输所需要的流量。MQTT支持三种不同级别的服务质量（Quality of Service，QoS）为不同场景提供消息可靠性：</p>
<ul>
<li>级别0：尽力而为。消息发送者会想尽办法发送消息，但是遇到意外并不会重试。</li>
<li>级别1：至少一次。消息接受者如果没有知会或者知会本身丢失，消息发送者会在此发送以保证消息接收者至少会收到一次，当然可能造成重复消息。</li>
<li>级别2：恰好一次。保证这种语义肯定会减少并发或者增加延时，不过丢失或者重复消息是不可接受的时候，级别2是最合适的。</li>
</ul>
<p>如果各位读完了这些仍然觉得不过瘾，没有戳中各位的痛点，可以去读一下MQTT的<a href="https://github.com/mcxiaoke/mqtt">协议规范</a>，这里中英文版本都有挑自己爱看的读一下就好。</p>
<h2 id="MQTT开发环境搭建"><a href="#MQTT开发环境搭建" class="headerlink" title="MQTT开发环境搭建"></a>MQTT开发环境搭建</h2><p>首先需要一个代理服务器，这里mqtt代理服务器使用的是apache的apollo，apollo支持STOMP，AMQP，MQTT，Openwire，SSL和WebSockets。<a href="http://www.apache.org/dyn/closer.cgi?path=activemq/activemq-apollo/1.7.1/apache-apollo-1.7.1-unix-distro.tar.gz">下载戳这</a>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-6320af0693b03ebf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点这个就行"></p>
<p>下载到本地之后，将之上传到服务器上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ scp 文件名 $username@$ip:~</span><br></pre></td></tr></table></figure>
<p>解压tar.gz：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar zxvf apache-apollo-1.7.1-unix-distro.tar.gz</span><br></pre></td></tr></table></figure>
<p>进入解压后的bin目录下执行apollo create testbroker命令创建一个名称为testbroker的代理服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd apache-apollo-1.7.1-unix-distro.tar.gz/bin/</span><br><span class="line">$ ./apollo create testbroker</span><br></pre></td></tr></table></figure>
<p>输入ls命令就可以看到文件夹下多了一个testbroker的文件夹</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f8d2a1016ad9f654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="testbroker"><br>进入testbroker的bin文件夹下，执行apollo-broker run 启动代理服务器。进入testbroker文件下的etc文件夹，可以看到名为users.properties的文件，可以看到在最后配置了用户名和密码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-6e0bbb9d532c4b01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用户名&amp;密码"></p>
<p>该文件夹下的apollo.xml中配置了端口和ip，不过这里就不管了。代理服务器配置完毕，接下来就是下载paho实现的mqtt client的jar包了。<br><a href="https://repo.eclipse.org/content/repositories/paho/org/eclipse/paho/org.eclipse.paho.client.mqttv3/1.0.2/">下载地址</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-a1f87c70ce875e04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载这个"></p>
<h2 id="使用PAHO实现MQTT推送"><a href="#使用PAHO实现MQTT推送" class="headerlink" title="使用PAHO实现MQTT推送"></a>使用PAHO实现MQTT推送</h2><p>这里利用Idea编写Java程序实现，对于Android程序来说只需要稍加修改就可直接使用。首先新建一个Java项目，接着将上面下载的jar包作为依赖导入。首先编写服务端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.*;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理服务器ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_BROKER_HOST = <span class="string">&quot;tcp://xiasuhuei321.com:61613&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_TOPIC = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_CLIENT_ID = <span class="string">&quot;android_server_xiasuhuei321&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MqttTopic topic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MqttClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 推送消息</span></span><br><span class="line">        MqttMessage message = <span class="keyword">new</span> MqttMessage();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = <span class="keyword">new</span> MqttClient(MQTT_BROKER_HOST, MQTT_CLIENT_ID, <span class="keyword">new</span> MemoryPersistence());</span><br><span class="line">            MqttConnectOptions options = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">            options.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line">            options.setUserName(userName);</span><br><span class="line">            options.setPassword(password.toCharArray());</span><br><span class="line">            options.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">            options.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">            topic = client.getTopic(MQTT_TOPIC);</span><br><span class="line"></span><br><span class="line">            message.setQos(<span class="number">1</span>);</span><br><span class="line">            message.setRetained(<span class="keyword">false</span>);</span><br><span class="line">            message.setPayload(<span class="string">&quot;message from server&quot;</span>.getBytes());</span><br><span class="line">            client.connect(options);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                MqttDeliveryToken token = topic.publish(message);</span><br><span class="line">                token.waitForCompletion();</span><br><span class="line">                System.out.println(<span class="string">&quot;已经发送&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里的逻辑非常简单，创建一个MqttClient，每十秒发送一次消息，订阅了相应topic的客户端将会收到这个消息。接下来编写客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.*;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMqttClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理服务器ip地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_BROKER_HOST = <span class="string">&quot;tcp://xiasuhuei321.com:61613&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_CLIENT_ID = <span class="string">&quot;android_xiasuhuei321&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_TOPIC = <span class="string">&quot;xiasuhuei321&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> MqttClient mqttClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MqttConnectOptions options;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// host为主机名，clientid即连接MQTT的客户端ID，一般以客户端唯一标识符表示，</span></span><br><span class="line">            <span class="comment">// MemoryPersistence设置clientid的保存形式，默认为以内存保存</span></span><br><span class="line">            <span class="comment">// 设备id不要太骚气！！！！！！！</span></span><br><span class="line">            mqttClient = <span class="keyword">new</span> MqttClient(MQTT_BROKER_HOST, MQTT_CLIENT_ID, <span class="keyword">new</span> MemoryPersistence());</span><br><span class="line">            <span class="comment">// 配置参数信息</span></span><br><span class="line">            options = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">            <span class="comment">// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，</span></span><br><span class="line">            <span class="comment">// 这里设置为true表示每次连接到服务器都以新的身份连接</span></span><br><span class="line">            options.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 设置用户名</span></span><br><span class="line">            options.setUserName(USERNAME);</span><br><span class="line">            <span class="comment">// 设置密码</span></span><br><span class="line">            options.setPassword(PASSWORD.toCharArray());</span><br><span class="line">            <span class="comment">// 设置超时时间 单位为秒</span></span><br><span class="line">            options.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></span><br><span class="line">            options.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 连接</span></span><br><span class="line">            mqttClient.connect(options);</span><br><span class="line">            <span class="comment">// 订阅</span></span><br><span class="line">            mqttClient.subscribe(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置回调</span></span><br><span class="line">            mqttClient.setCallback(<span class="keyword">new</span> MqttCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;connectionLost&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String s, MqttMessage mqttMessage)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Topic: &quot;</span> + s + <span class="string">&quot; Message: &quot;</span> + mqttMessage.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken iMqttDeliveryToken)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来启动服务端和客户端看一下效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-056f5c57aa244e42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务端"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c3596556333aa00e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="客户端"></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>到这也差不多了，说实话，在Android中难的从来都不是实现推送，而是如何保证接收推送的服务存活。在Android对后台服务限制越来越大的现在，自己实现推送的意义可能并不是非常大。但是对于一些特殊的应用场景下，比如用户打开应用进行的一些操作需要用到长连接，自己实现推送可能会更加可靠一些（听朋友说三方推送有时会莫名其妙收不到推送）。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>入门学习</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>ObjectBox填坑</title>
    <url>/2018/12/17/ObjectBox%E5%A1%AB%E5%9D%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近准备填一些以前开的坑，当然不能只填坑而没有收获，于是准备做一哈数据库缓存，左挑右选，最终选择了 ObjectBox，作者同样也是 greenDao 和 EventBus 的开发者，质量值得信赖。本文会介绍关于 ObjectBox 的基本使用和我在使用中碰到的一些问题，加上一些我在做缓存时候的思路。</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>能力比较强的同学，直接放上官方文档：<a href="https://docs.objectbox.io/%EF%BC%8C%E9%A6%96%E5%85%88%E5%9C%A8%E9%A1%B9%E7%9B%AE%E6%9C%80%E5%A4%96%E5%B1%82">https://docs.objectbox.io/，首先在项目最外层</a> build.gradle 文件中加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.objectboxVersion = <span class="string">&#x27;2.2.0&#x27;</span></span><br><span class="line">    respositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">// Android Gradle Plugin 3.0.0 or later supported</span></span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.2.1&#x27;</span></span><br><span class="line">        classpath <span class="string">&quot;io.objectbox:objectbox-gradle-plugin:$objectboxVersion&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在 app 模块的 gradle 文件中加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;io.objectbox&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果你和我一样也用 Kotlin，那也要加入：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;kotlin-kapt&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里简单解释一下，apt 全称是 annotation processing tool 即注解处理工具，而 kapt 也就是 kotlin 的注解处理工具了。注解处理工具主要用来在编译时获取被注解的类、方法等信息，生成所需代码，ButterKnife、EventBus 等框架都使用这种方式。这样 ObjectBox 的引入就完成了。</p>
<h2 id="简单的封装和使用"><a href="#简单的封装和使用" class="headerlink" title="简单的封装和使用"></a>简单的封装和使用</h2><p>首先介绍一下实体类的创建，Java 和 Kotlin 的都会说</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="keyword">public</span> <span class="keyword">long</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 @Entity 注解实体类， @Id public long id，id 这个属性是固定的，一定要有，在生成对象的时候由 ObjectBox 为其赋值，这是一个自增的 long 类型的 id，在同一类型的实体类插入的时候会根据 id 决定是插入还是更新。写到这你可能就会有疑惑了，如果除了 id 其他的值都一样，那也会插入？答案是肯定的，如何解决放到我们稍微了解用法之后去探讨。继续说一下 Kotlin 实体类的创建：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleEntity</span></span>(<span class="meta">@Id</span> <span class="keyword">var</span> id: <span class="built_in">Long</span> = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>data class 会有带有所有属性的构造函数，如果这个构造函数里的所有参数没有一个被 ObjectBox 注解的，那么 ObjectBox 会在取出数据将其映射为对象的时候报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.objectbox.exception.DbException: Entity is expected to have a no-arg constructor: Data</span><br></pre></td></tr></table></figure>

<p>意思是说实体被期望有一个无参的构造函数，但实际上你只要把被注解的属性放在他的构造函数里他也能正确的处理。</p>
<p>写完之后编译一下，让我们看看如何增删查改：</p>
<p>首先我们要构建一个 BoxStore 对象，然后用其进行后续操作：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = ExampleEntity()</span><br><span class="line"><span class="comment">// 构建 BoxStore 对象</span></span><br><span class="line"><span class="keyword">val</span> boxStore = MyObjectBox.builder().androidContext(context).build()</span><br><span class="line"><span class="keyword">val</span> exampleStore = boxStore.boxFor(ExampleEntity::<span class="keyword">class</span>.java)</span><br><span class="line"><span class="comment">// 增（或者更新）</span></span><br><span class="line">exampleStore.put(<span class="keyword">data</span>)</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">exampleStore.remove(<span class="keyword">data</span>)</span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">exampleStore.query()</span><br></pre></td></tr></table></figure>

<p>可以看到操作比较简单，但是需要注意的是 put（插入或者更新）运行了隐含的事务，简单的理解就是开销比较大，所以循环 put 这种操作是不推荐的，那么在需要循环时，该咋做呢？</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> datas = mutableListOf&lt;ExampleEntity&gt;()</span><br><span class="line">datas.add(ExampleEntity())</span><br><span class="line">datas.add(ExampleEntity())</span><br><span class="line">datas.add(ExampleEntity())</span><br><span class="line"><span class="comment">// 是的，有这个重载，可以直接 put 集合</span></span><br><span class="line">exampleStore.put(datas)</span><br><span class="line"><span class="comment">// 同样的，如果循环改数据，不要改完一个提交一个，一起提交比较高效</span></span><br><span class="line"><span class="keyword">for</span>(d <span class="keyword">in</span> datas) &#123;</span><br><span class="line">    <span class="comment">// d.xx = xx</span></span><br><span class="line">&#125;</span><br><span class="line">exampleStore.put(datas)</span><br></pre></td></tr></table></figure>

<p>当然不可能所有的情况都可以用上面的方式解决，比如有时我不先 put 可能会影响我下一次查改的正确性，那么可使用 ObjectBox 提供的 runInTx() 方法，这是一个同步的方法，ObjectBox 也提供了异步的 runInTxAsync() 方法。</p>
<p>接下来聊回之前的问题，如何解决只有 id 不一样，但是其他数据都一样的问题，实际上这是很常见的，比如你从接口获取数据，原生数据可能没有 id，又或者有唯一 id 但是并不是 long 类型而是 String 类型。那么你第一次请求，将数据存入数据库，第二次请求如果返回同样的数据，但是 ObjectBox 的 id 是自增的，也就是说逻辑上是同样的数据，但是会插入两次，这显然不是我们希望看到的。解决这种问题的方法有两种：</p>
<ul>
<li>自己指定 id，但是要保证唯一性</li>
<li>在插入之前根据其他的唯一标志查询是否已经存在，保证不重复插入</li>
</ul>
<p>这里第一种方法经过我的测试，无法适应所有情况，究其原因是因为 long 类型的位数限制（当然也可能是我没找到正确的处理算法），这里用以下的例子说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;5aff4645421aa95f55cab5da&quot;</span>;</span><br><span class="line">buffer = ByteBuffer.allocate(s.length());</span><br><span class="line">buffer.put(s.getBytes(), <span class="number">0</span>, s.getBytes().length);</span><br><span class="line">buffer.flip();</span><br><span class="line">System.out.println(buffer.getLong());</span><br><span class="line"></span><br><span class="line">String s2 = <span class="string">&quot;5aff4645421aa95f55cab5dc&quot;</span>;</span><br><span class="line">ByteBuffer buffer2 = ByteBuffer.allocate(s2.length());</span><br><span class="line">buffer2.put(s2.getBytes(), <span class="number">0</span>, s2.getBytes().length);</span><br><span class="line">buffer2.flip();</span><br><span class="line">System.out.println(buffer2.getLong());</span><br></pre></td></tr></table></figure>

<p>最后的输出结果是：</p>
<p>3846468145899779125<br>3846468145899779125</p>
<p>都一样？实际上是因为 long 类型是 64 位，最大值是 9223372036854775807，也就是一个 19 位的值，这里是最后的 a 和 c 不同，是被截掉的后面不同，但是这就无法保证 id 的唯一性了，如果要转换的 String 没那么长，还是可以一用的。那么就只能采用第二种方案了，伪代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">boxStore.runInTxAsync(&#123;</span><br><span class="line">    <span class="keyword">val</span> dataStore = boxStore.boxFor(Data::<span class="keyword">class</span>.java)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">data</span> <span class="keyword">in</span> datas) &#123;</span><br><span class="line">        <span class="keyword">val</span> d = dataStore.query().equal(Data_._id, <span class="keyword">data</span>._id).build().findFirst()</span><br><span class="line">        d?.let &#123;</span><br><span class="line">            <span class="keyword">data</span>.id = it.id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dataStore.put(datas)</span><br><span class="line">&#125;, &#123; _, _ -&gt;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里其实是没必要用 runInTxAsync 的，但是偷个懒，先这么写了，Data_ 是 Object 自动生成的代码，包含了可以用于查询的字段，我这里的数据都包含了 _id 这个属性，这是唯一的，所以在插入之前我会首先根据 _id 查询，如果查到了，我会将对象中的 id 属性更新为查询到的 id，再将之插入（事实上是更新）。后面一个大括号主要是用来处理异常的，暂时啥都没干。关于 ObjectBox 的简介暂时就到这了，想了解更多，可以自行查阅资料。接下来说一下我关于结合 ObjectBox 和 接口请求 的思考和实现。</p>
<h2 id="用-ObjectBox-实现缓存"><a href="#用-ObjectBox-实现缓存" class="headerlink" title="用 ObjectBox 实现缓存"></a>用 ObjectBox 实现缓存</h2><p>首先要弄明白缓存数据的意义在哪，像图片缓存，可以提高加载效率和减少流量消耗。那么数据缓存对于 Android 客户端的意义在哪呢？我个人觉得还是在于提升体验，一些已经请求过的数据，在断网的时候为啥就看不到了？当然了，做缓存其实对于相当依赖网络的应用来说提升体验的幅度有限，而且也会提升开发的复杂度，但是这并不影响我们去学习和思考如何实现数据的缓存。</p>
<p>那么该如何实现缓存呢？首先要想明白我们想要实现的效果是怎样的，这里并不是真实的项目需求，只是我填坑的时候自己想要的，但是各位可以借鉴一下：我想要实现的效果就是优先加载从接口获取的数据，因为数据可能有更新，接口优先，如果接口数据获取失败，那么加载数据库的数据，而且我希望这是一个线性的过程，即：</p>
<p><img src="http://xiasuhuei321.com/images/blog/%E7%BC%93%E5%AD%98%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="1544982647050"></p>
<p>当然，这种实现方式在弱网的环境下，是否加载缓存取决于 timeout 的时间，如果 timeout 时间设置的比较长的话，那效果其实也比较差，不过还是那句话，这不妨碍我去了解和思考。根据流程图，我们首先要弄清楚的是接口请求的问题，现在应用的请求一般用的都是 okhttp + retrofit 那一套，我也不例外，正常的流程是请求接口，获取数据，我希望在异常的时候从数据库加载数据，那么要弄清楚的就是在请求接口时会发生哪些异常了。我们平时使用的 Okhttp 到真正请求实际上是 Call 接口中的方法，我比较爱用同步的 execute() 方法，看一下他的注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Synchronously send the request and return its response.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException if a problem occurred talking to the server.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RuntimeException (and subclasses) if an unexpected error occurs creating the request</span></span><br><span class="line"><span class="comment"> * or decoding the response.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>看描述会抛出 IOException 和 RuntimeException，那么在之后的异常处理中就很好解决了，我使用了 Kotlin 的协程，如果你不熟悉协程和 Kotlin 的高阶函数也不要紧，我会尽量解释代码的意思：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">gankService</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        context: <span class="type">Context</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        doSomethingInThread: (<span class="type">Response</span>&lt;<span class="type">GankData</span>&lt;<span class="type">T</span>&gt;&gt;) -&gt; <span class="type">Unit</span> = &#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">        request: <span class="type">GankService</span>.() -&gt; <span class="type">Call</span>&lt;<span class="type">GankData</span>&lt;<span class="type">T</span>&gt;&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = bg&lt;Response&lt;GankData&lt;T&gt;&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> call = request(GankService)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> res = call.execute()</span><br><span class="line">        doSomethingInThread(res)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@bg</span> res</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        XLog.i(<span class="string">&quot;http&quot;</span>, e.toString())</span><br><span class="line">        <span class="keyword">val</span> error = <span class="keyword">when</span> (e) &#123;</span><br><span class="line">            <span class="keyword">is</span> IOException -&gt; Response.error&lt;GankData&lt;T&gt;&gt;(GankService.TIMEOUT_ERROR, ResponseBody.create(<span class="literal">null</span>, <span class="string">&quot;IOException 可能是读写超时&quot;</span>))</span><br><span class="line">            <span class="keyword">is</span> UnknownHostException -&gt; Response.error&lt;GankData&lt;T&gt;&gt;(GankService.NETWORK_ERROR, ResponseBody.create(<span class="literal">null</span>, <span class="string">&quot;UnknownHostException 可能是网络断开&quot;</span>))</span><br><span class="line">            <span class="keyword">else</span> -&gt; Response.error&lt;GankData&lt;T&gt;&gt;(<span class="number">1001</span>, ResponseBody.create(<span class="literal">null</span>, <span class="string">&quot;未处理的错误：<span class="variable">$e</span>&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        doSomethingInThread(error)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@bg</span> error</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里定义了一个高阶函数，前两个参数是有默认值，可以不穿的，最后一个是给 GankService 扩展了一个返回 Call&lt;GankData<T>&gt; 类型的函数，这个 GankService 可以理解为我们平时使用的 retrofit.create(ApiService::class.java)，而 bg&lt;Response&lt;GankData<T>&gt;&gt; 则表明新开了一个协程，返回类型为 Response&lt;GankData<T>&gt;，代码第一行拿到了 Call&lt;GankData<T>&gt;，之后则是调用 execute() 来调用接口，doSomethingInThread，主要是为了如果有啥耗时的操作也想在这个线程里干，就传入这个参数，之后会在线程中调用，当然了，项目里前两个参数都没用上，可以忽略。如果执行成功，则会返回接口数据，如果失败，则会被 try {} catch() 捕获到异常，然后返回错误的 Response<GankData>（此时 GankData 实际上是 null），在之后的代码里我则可以根据 Response 来先判断接口是否调用成功，这里关于异常处理暂时比较粗糙，因为实际上后面暂时也没针对不同的异常做出不同的处理。</p>
<p>OK，关于调用接口的处理到这里告一段落，接下来是异常从数据库读取数据，关于数据的存和读的代码一并放上：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> boxStore: BoxStore</span><br><span class="line">    <span class="keyword">val</span> storeMap = HashMap&lt;String, Box&lt;Any&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initStore</span><span class="params">()</span></span> &#123;</span><br><span class="line">        boxStore = MyObjectBox.builder().androidContext(Global.context).build()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">getBoxFor</span><span class="params">(clz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: Box&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> boxStore.boxFor(clz)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addOrUpdateData</span><span class="params">(datas: <span class="type">List</span>&lt;<span class="type">Data</span>&gt;)</span></span> &#123;</span><br><span class="line">        boxStore.runInTxAsync(&#123;</span><br><span class="line">            <span class="keyword">val</span> dataStore = boxStore.boxFor(Data::<span class="keyword">class</span>.java)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">data</span> <span class="keyword">in</span> datas) &#123;</span><br><span class="line">                <span class="keyword">val</span> d = dataStore.query().equal(Data_._id, <span class="keyword">data</span>._id).build().findFirst()</span><br><span class="line">                d?.let &#123;</span><br><span class="line">                    <span class="keyword">data</span>.id = it.id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            dataStore.put(datas)</span><br><span class="line">        &#125;, &#123; _, _ -&gt;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询 [start] 到 [end] 之间的数据，左边界 [start] 包含在内，右边界 [end] 不包含在内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queryData</span><span class="params">(start: <span class="type">Int</span>, end: <span class="type">Int</span>)</span></span>: List&lt;Data&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> q = query(Data::<span class="keyword">class</span>.java).build()</span><br><span class="line">        <span class="keyword">if</span> (start &gt; q.count()) <span class="keyword">return</span> mutableListOf()</span><br><span class="line">        <span class="keyword">val</span> result = q.find()</span><br><span class="line">        <span class="keyword">if</span> (end &gt; result.size) <span class="keyword">return</span> result.subList(start, result.size)</span><br><span class="line">        <span class="keyword">return</span> result.subList(start, end)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">query</span><span class="params">(clz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span> = boxStore.boxFor(clz).query()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的代码比较简单，不多做解释了，接下来是代码的整合，写出来比我想象的要简单很多：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> GankDataStore &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> dataManager = DataManager()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initStore</span><span class="params">()</span></span> &#123;</span><br><span class="line">        dataManager.initStore()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">requestWelfareData</span><span class="params">(pageIndex: <span class="type">Int</span>)</span></span>: List&lt;Data&gt;? &#123;</span><br><span class="line">        gankService &#123; getWelfare(pageIndex) &#125;.await().apply &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">if</span> (isSuccessful) &#123;</span><br><span class="line">                <span class="keyword">this</span>.body().results?.apply &#123; dataManager.addOrUpdateData(<span class="keyword">this</span>) &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> start = pageIndex * <span class="number">10</span> - <span class="number">10</span></span><br><span class="line">                dataManager.queryData(start, start + <span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mutableListOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>主要解释一下 requestWelfareData 函数，前面加了suspend 表示挂起函数，也就是说执行这个函数的时候即使有异步的代码，但整体表现仍然是顺序的，我的表述可能不太对，那就描述一下现象。这里 gankService { getWelfare(pageIndex) } 相信大家还有印象，实际上就是前面写的全局函数，是用来请求接口的，很明显是一个异步的代码，但是执行到 await() 的时候，函数被挂起，直到 gankService { getWelfare(pageIndex) } 返回结果，之后的代码会在结果返回之后执行，如果是一般的异步代码，那可能表现就是后面的代码执行在结果返回之前。继续解释代码，在拿到结果时候（这里拿到的是 Response），首先判断接口调用是否成功，如果成功，再取出我们的数据类，这样做是很安全的，因为如果接口调用失败，直接取出数据会是空的。接口调用成功，取出数据并将之插入数据库，如果调用失败，则从数据库查找数据，如果这两个操作都失败了，最后会返回一个空的集合。到此整个流程结束了，代码我也测过，没啥问题。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>上面的实现实际上也没达到最终完成的程度，比如如果数据库中也没有数据了，这里没有处理，比如缓存管理等。但也不可能事先就把所有可能发生的问题都考虑到，而且在不同的阶段会面临不同的问题，但是作为思路写到这已经够了。</p>
]]></content>
  </entry>
  <entry>
    <title>Mac 辣鸡 Finder 无限重启崩</title>
    <url>/2017/11/28/Mac%20%E8%BE%A3%E9%B8%A1%20Finder%20%E6%97%A0%E9%99%90%E9%87%8D%E5%90%AF%E5%B4%A9/</url>
    <content><![CDATA[<p>最近碰到一个情况，Finder无限无响应，然后强制关闭，自动重启，还是无响应。尝试重启，重启之后倒是好了一会，但是打开桌面的某个文件夹还是会出现这个情况。真是日了狗了，仔细回忆了一下，感觉像是自己的一个压缩包解压出现了问题，于是就rm -rf 整个的删掉了那个文件夹，问题就解决了。这里是因为我那个文件夹并没有什么重要的资料，可以这么做，但是如果有重要的资料呢？我也不知道……<span id="more"></span></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>填坑</tag>
      </tags>
  </entry>
  <entry>
    <title>Okhttp3-addHeader小坑记</title>
    <url>/2016/08/09/Okhttp3-addHeader%E5%B0%8F%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<p>##写在前面<br>最近感觉自己看了不少东西，不过在上班所以并没有很多的时间来写东西。我有一些半成品不过都不想发出来，毕竟缺少一点自己的东西在里面。好了日常唠嗑(1/1)。</p>
<p>##背景<br>前面也说了最近在上班，接触到的项目里用的都是被抛弃的httpclient，说实话这小项目我觉得我是有能力重构的。所以最近着手重构，重构之前首先选定要拿什么做。经过慎重的思考之后决定:项目尽量采用MVC的模式做，网络请求用okhttp(用hongyang封装的okhttp-utils)，图片的处理和加载想采用glide，但是目前来看还有一些问题。好了背景介绍到这，下面说坑。</p>
<p>##坑<br>既然采用Okhttp来重写网络请求，我当然得挑几个出来跑一下试试。这一试问题就出来了，见下图:</p>
<span id="more"></span>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-bb687ddc655e7f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.png"></p>
<p>415介质错误，等等，难道我请求写的有问题？好吧，真有可能，可能因为自己平时就粗心大意的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      OkHttpUtils.postString()</span><br><span class="line"><span class="comment">//                .mediaType(MediaType.parse(&quot;application/json; charset=utf-8&quot;))</span></span><br><span class="line">                .content(jo.toString())</span><br><span class="line">                .addHeader(<span class="string">&quot;tkn&quot;</span>, <span class="string">&quot;--&quot;</span>)</span><br><span class="line">                .addHeader(<span class="string">&quot;uid&quot;</span>, <span class="string">&quot;--&quot;</span>)</span><br><span class="line">                .addHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">                .url(<span class="string">&quot; &quot;</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .execute(<span class="keyword">new</span> BitmapCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        tvTest.setText(<span class="string">&quot;纳尼，竟然会错?&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap response, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                        ivImg.setImageBitmap(response);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<p>tkn和uid是验证登录的东西，这个东西我肯定是写的没错的，我这个请求我仔细看了一遍也没发现哪出了问题。但错就在那啊！</p>
<p>可能有细心的看官已经发现了，我注释了一行。是的，那一行就是解决问题的方法。在http头里面声明”Content-Type”, “application/json”在okhttp里面是没什么卵用的，okhttp中需要在mediaType中声明介质类型。</p>
<p>##小结<br>最近由于工作先后接触了HttpUrlConnection、HttpClient、okhttp，感觉api有的差不多，有的差别很大，关键还是你对于http协议的理解。只要你对http有一定的了解，对于一个有良好设计的东西来说找到对应的api是很容易的。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>填坑</tag>
        <tag>Android</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV在Android中的集成与简单使用</title>
    <url>/2017/07/26/OpenCV%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E9%9B%86%E6%88%90%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>最近在学习Android的NDK相关的东西，看了<a href="http://www.jianshu.com/u/8b661f60979b">JerryloveEmily</a>这位大神写的JNI相关的文，看到了他用opencv做的一个毛玻璃效果，感觉还挺好玩的。本文记一下在集成过程中对我帮助比较大的几篇文，希望能帮到有同样需求的人，c++代码主要靠copy……</p>
<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>OpenCV有多个平台的API，咱Android的也有~首先上官网把sdk下载下来。<a href="http://opencv.org/">OpenCV官网</a>，下载页<a href="http://opencv.org/releases.html">在这</a>，自己点击android的包就可以了。下载下来是这么一个情况：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-0314a0d18bd7c139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenCV-sdk"><br>apk包内有七个apk，分别对应了不同架构的cpu和其abi，这个apk类似于运行依赖的环境。samples包下是一些例子，这些例子需要依赖apk包内的apk。如果你打开这些例子看一下的话，会发现aidl文件，这些例子利用aidl和OpenCV提供的apk通信，实现功能。这种使用方法对于一般的开发者来说是无法接受的，因为总不能让用户装了自己的apk不算，还得装个自己不了解是什么东西的apk把。但是这种方式也是有应用场景的，比如这硬件就是你产的……不过这种情况在这不讨论，我选择的继承方式自然也不是装这个apk，然后调用java的api。在网上看到了一篇文，跟着操作了一下。这篇文章：<a href="http://blog.csdn.net/u012341163/article/details/51065310">Android开发配置opencv环境超详细教程</a>，真的非常详细，每一步操作都写的非常简单明了。这里记一下我遇到的一个问题：ndk-build失败，</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error:Execution failed for task &#x27;:app:ndkBuild&#x27;.</span><br><span class="line">&gt; Process &#x27;command &#x27;/Users/luojun/Library/Android/sdk/ndk-bundle/ndk-build&#x27;&#x27; finished with non-zero exit value 2</span><br></pre></td></tr></table></figure>
<p>报了以上的错，刚开始我以为是我ndk路径或者命令没配置对，后来发现是Android.mk文件里的路径不对：上文提到的那篇配置文章里是这么写的，include ..\..\..\..\native\jni\OpenCV.mk，我给换成了绝对路径就可以了：include /Users/xx/AndroidStudioProjects/StudyForOpenCV/native/jni/OpenCV.mk</p>
<p>集成就简单的介绍到这。</p>
<h2 id="灰度化图片-amp-amp-毛玻璃"><a href="#灰度化图片-amp-amp-毛玻璃" class="headerlink" title="灰度化图片 &amp;&amp; 毛玻璃"></a>灰度化图片 &amp;&amp; 毛玻璃</h2><p>c++代码都是copy滴……<br>首先新建一个java的入口类，就叫OpenCVHelper好了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenCVHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 在Android.mk文件中指定了lib的名字为OpenCV</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;OpenCV&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">blur</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取原始图片的宽高</span></span><br><span class="line">        <span class="keyword">int</span> width = bitmap.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = bitmap.getHeight();</span><br><span class="line">        <span class="comment">// 初始化一个用来存储图片所有像素的int数组</span></span><br><span class="line">        <span class="keyword">int</span>[] pixels = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</span><br><span class="line">        <span class="comment">// 把原始图片的所有原始像素存入数组中</span></span><br><span class="line">        bitmap.getPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        bitmap.recycle();</span><br><span class="line">        <span class="comment">// 通过jni本地方法毛玻璃化图片</span></span><br><span class="line">        blurImage(pixels, width, height);</span><br><span class="line">        <span class="comment">// 创建一个新的图片</span></span><br><span class="line">        Bitmap newBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</span><br><span class="line">        <span class="comment">// 把处理后的图片像素设置给新图片</span></span><br><span class="line">        newBitmap.setPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">return</span> newBitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">gray</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取原始图片的宽高</span></span><br><span class="line">        <span class="keyword">int</span> width = bitmap.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = bitmap.getHeight();</span><br><span class="line">        <span class="keyword">int</span>[] pixels = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</span><br><span class="line">        bitmap.getPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        bitmap.recycle();</span><br><span class="line">        pixels = gray(pixels, width, height);</span><br><span class="line">        Bitmap newBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</span><br><span class="line">        newBitmap.setPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">return</span> newBitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span>[] gray(<span class="keyword">int</span>[] buf, <span class="keyword">int</span> w, <span class="keyword">int</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">blurImage</span><span class="params">(<span class="keyword">int</span>[] pixels, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>生成头文件什么不多说了，如果不是很明白可以看我之前写的<a href="http://www.jianshu.com/p/49cf89623e8f">Android-NDK学习（1）</a>。<br>C++实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;com_xiasuhuei321_studyforopencv_OpenCVHelper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="comment">// 定义了log日志宏函数，方便打印日志在logcat中查看调试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TAG <span class="meta-string">&quot;Jerry-NDK-Image-Pro&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG , TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO , TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(...) __android_log_print(ANDROID_LOG_WARN , TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR , TAG, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jintArray JNICALL <span class="title">Java_com_xiasuhuei321_studyforopencv_OpenCVHelper_gray</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *, jclass, jintArray, jint, jint)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jintArray JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_studyforopencv_OpenCVHelper_gray</span><span class="params">(JNIEnv *env, jclass obj, jintArray buf,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                           <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    jint *cbuf;</span><br><span class="line">    cbuf = env-&gt;<span class="built_in">GetIntArrayElements</span>(buf, JNI_FALSE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == cbuf) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Mat <span class="title">imgData</span><span class="params">(h, w, CV_8UC4, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) cbuf)</span></span>;</span><br><span class="line"></span><br><span class="line">    u_char *ptr = imgData.<span class="built_in">ptr</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w * h; ++i) &#123;</span><br><span class="line">        <span class="comment">//图像存储方式为：BGRA</span></span><br><span class="line">        <span class="keyword">int</span> grayScale = (<span class="keyword">int</span>) (ptr[<span class="number">4</span> * i + <span class="number">2</span>] * <span class="number">0.299</span> + ptr[<span class="number">4</span> * i + <span class="number">1</span>] * <span class="number">0.587</span> +</span><br><span class="line">                               ptr[<span class="number">4</span> * i + <span class="number">0</span>] * <span class="number">0.144</span>);</span><br><span class="line">        ptr[<span class="number">4</span> * i + <span class="number">0</span>] = grayScale;</span><br><span class="line">        ptr[<span class="number">4</span> * i + <span class="number">1</span>] = grayScale;</span><br><span class="line">        ptr[<span class="number">4</span> * i + <span class="number">2</span>] = grayScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = w * h;</span><br><span class="line">    jintArray result = env-&gt;<span class="built_in">NewIntArray</span>(size);</span><br><span class="line">    env-&gt;<span class="built_in">SetIntArrayRegion</span>(result, <span class="number">0</span>, size, cbuf);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseIntArrayElements</span>(buf, cbuf, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_xiasuhuei321_studyforopencv_OpenCVHelper_blurImage</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv *env,</span></span></span><br><span class="line"><span class="params"><span class="function">        jclass jcls,</span></span></span><br><span class="line"><span class="params"><span class="function">        jintArray jarr_pixels,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint j_width,</span></span></span><br><span class="line"><span class="params"><span class="function">        jint j_height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取java中传入的像素数组值，jintArray转化成jint指针数组</span></span><br><span class="line">    jint *c_pixels = env-&gt;<span class="built_in">GetIntArrayElements</span>(jarr_pixels, JNI_FALSE);</span><br><span class="line">    <span class="keyword">if</span>(c_pixels == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOGE</span>(<span class="string">&quot;图片宽度：%d, 高度：%d&quot;</span>, j_width, j_height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把c的图片数据转化成opencv的图片数据</span></span><br><span class="line">    <span class="comment">// 使用Mat创建图片</span></span><br><span class="line">    <span class="function">Mat <span class="title">mat_image_src</span><span class="params">(j_height, j_width, CV_8UC4, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*) c_pixels)</span></span>;</span><br><span class="line">    <span class="comment">// 选择和截取一段行范围的图片</span></span><br><span class="line">    Mat temp = mat_image_src.<span class="built_in">rowRange</span>(j_height / <span class="number">3</span>, <span class="number">2</span> * j_height / <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 方框滤波</span></span><br><span class="line"><span class="comment">//    boxFilter(temp, temp, -1, Size(85, 85));</span></span><br><span class="line">    <span class="comment">// 均值滤波</span></span><br><span class="line">    <span class="built_in">blur</span>(temp, temp, <span class="built_in">Size</span>(<span class="number">85</span>, <span class="number">85</span>));</span><br><span class="line">    <span class="comment">// 使用高斯模糊滤波</span></span><br><span class="line"><span class="comment">//    GaussianBlur(temp, temp, Size(45, 13), 0, 0);</span></span><br><span class="line">    <span class="comment">// 将opencv图片转化成c图片数据，RGBA转化成灰度图4通道颜色数据</span></span><br><span class="line">    <span class="built_in">cvtColor</span>(temp, temp, CV_RGBA2GRAY, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新java图片数组和释放c++中图片数组的值</span></span><br><span class="line">    env-&gt;<span class="built_in">ReleaseIntArrayElements</span>(jarr_pixels, c_pixels, JNI_FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-840a7fcf3e8f42e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="变灰"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-5b23e48a8f7e3d74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模糊"></p>
<p>如果能看到这，你应该也能有点感觉了，这尼玛不是用c++实现的么，java只是通过jni调用了native方法。是的，的确如此，后续我会看看sample，看看能否直接调用生成的so。</p>
<p>项目地址：<a href="https://github.com/ForgetAll/StudyForOpenCV">https://github.com/ForgetAll/StudyForOpenCV</a></p>
]]></content>
      <categories>
        <category>Android</category>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Open CV</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入手（一）</title>
    <url>/2017/10/25/Python%E5%85%A5%E6%89%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>去年就说要看一看 python（其实去年还说要看C++/JavaScript），看了一点儿语法之后一直没再碰过了。最近写 Android 写的头昏脑涨，决定看点 python 换下脑子。由于暂时打算用python玩一下，所以就不深入追究语言细节，只做一些有趣的事情。本文将简单的提及以下内容：</p>
<ul>
<li>requests</li>
<li>BeautifulSoup</li>
<li>python io</li>
</ul>
<h2 id="用-Python-做什么"><a href="#用-Python-做什么" class="headerlink" title="用 Python 做什么"></a>用 Python 做什么</h2><p>这里打算通过分析 <a href="https://movie.douban.com/top250">豆瓣电影TOP250</a>网页来提取一些电影信息，通过干这件事来对 python 的 io 、http 请求方式做一些简单的了解。分析网页这里选择使用 Beautiful Soup 来做标签解析，请求库选用 requests。</p>
<span id="more"></span>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>阅读 <a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html">requests 文档</a></li>
</ul>
<p>这里的目标是拿到网页，也就是html，然后分析提取内容，这里的目标网页没有什么特殊的验证机制，所以只需要通过 http 协议中的 get 请求方式获取网页响应就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/timeline.json&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>阅读 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/#id10">Beautiful Soup 文档</a> </li>
</ul>
<p>这里就要好好的看看了，因为提取信息需要用到这个库。这里我做了一些简单的了解，这个库遍历了 html 生成了一个 python 对象，后续的解析就通过这个对象来完成。由于不了解这个库的实现方式，所以还是有些担忧效率的，因为 html 这种嵌套层级可能非常多的东西，生成的类查找效率可能堪忧。不过现在也不想去考虑这些问题，暂时先用着~</p>
<ul>
<li>分析<a href="https://movie.douban.com/top250">网页</a></li>
</ul>
<p>分析主要就是分析一下一些自己感兴趣信息的标签和属性，以此为键提取出相应的值。分析网页自带的开发者工具真的是十分的好用，因为这里的网页比较简单，在点击切换界面的时候发现网页链接 url 变化如下：<br><a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a> -&gt;<br><a href="https://movie.douban.com/top250?start=25">https://movie.douban.com/top250?start=25</a></p>
<p>nice，很简单，想拿到全部250部电影信息只需要改变url的start参数值就可以了。这里是简单的通过 get 请求传参，如果是 post 或者一些其他的方式传参数，就需要我们通过抓包工具去抓包分析数据包。</p>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>代码其实非常简单，如果按照我前面说的步骤来，基本不需要我做什么过多累赘的解释（所以这里我就不做过多的解释了）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">FILE_PATH = <span class="string">&#x27;豆瓣电影TOP250.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMovieList</span>():</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    resp = requests.get(<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span> + <span class="built_in">str</span>(count))</span><br><span class="line">    bs = BeautifulSoup(resp.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;item&#x27;</span>&#125;):</span><br><span class="line">        title = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;title&#x27;</span>&#125;).get_text()</span><br><span class="line">        rating_num = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;rating_num&#x27;</span>&#125;).get_text()</span><br><span class="line">        img = item.find(<span class="string">&#x27;img&#x27;</span>)[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">        tag = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;inq&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            desc = tag.get_text()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;标题：&#x27;</span>, title, <span class="string">&#x27; 评分：&#x27;</span>, rating_num, <span class="string">&#x27; 描述：&#x27;</span>, desc, <span class="string">&#x27; image_url：&#x27;</span>, img)</span><br><span class="line">            <span class="comment"># img = item.find(&#x27;div&#x27;, &#123;&#x27;class&#x27;: &#x27;pic&#x27;&#125;).find(&quot;a&quot;).get_text()</span></span><br><span class="line">            <span class="comment"># print(title, img)</span></span><br><span class="line">            f.writelines(<span class="string">&#x27;标题：&#x27;</span> + title + <span class="string">&#x27; 评分：&#x27;</span> + rating_num + <span class="string">&#x27; 描述：&#x27;</span> + desc + <span class="string">&#x27; image_url：&#x27;</span> + img+<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">    count += <span class="number">25</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">255</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取完毕&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        getMovieList()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(FILE_PATH, <span class="string">&#x27;w+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">getMovieList()</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-84f1b23934d1a5d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-28afa1ec71adc975.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件输出"></p>
<p>这里其实可以开多线程去访问，但是我对于 python 中的线程与线程安全还不是非常了解，等下一次再玩玩。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>入门学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入手（二）</title>
    <url>/2017/10/31/Python%E5%85%A5%E6%89%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>本篇主要记录一些与数据库有关的操作，本来想看一下python的多线程，来优化一下<a href="http://www.jianshu.com/p/05043374b578">上一篇</a>的代码，然后看到了 python 的 GIL，恩，多线程先弃了。别我看了半天线程安全，线程池什么的，结果告诉我优化不能。那么就先看一下数据库有关的，方便以后玩出各种花样。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Mac、MySQL 5.7.17，我这里MySQL由于以前弄过jdbc、php啥的，都已经装好了。还需要安装PyMySQL包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install PyMySQL</span><br></pre></td></tr></table></figure>
<p>反正我执行完这个命令就搞定了，如果各位有什么问题，自己百度，哈哈。</p>
<span id="more"></span>
<h2 id="简单的查"><a href="#简单的查" class="headerlink" title="简单的查"></a>简单的查</h2><p>为什么只是简单的查呢……因为其实就是执行 sql 语句……写一个了解下就差不多了……代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;ForPy&#x27;</span>)</span><br><span class="line">db.set_charset(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用 cursor() 方法创建一个游标对象</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment"># 使用 execute() 方法执行 SQL 查询</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;select * from `doubanTop250`&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line">data = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">    name = row[<span class="number">0</span>]</span><br><span class="line">    star_num = row[<span class="number">1</span>]</span><br><span class="line">    desc = row[<span class="number">2</span>]</span><br><span class="line">    url = row[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot; star_num=&quot;</span> + star_num +</span><br><span class="line">          <span class="string">&quot; desc=&quot;</span> + desc + <span class="string">&quot; url=&quot;</span> + url)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-de737fd2f5bf2e5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出"></p>
<p>恩，没错，这里的数据就是后面我访问豆瓣从网页中抓取插入数据库表中的。</p>
<h2 id="将数据插入数据库"><a href="#将数据插入数据库" class="headerlink" title="将数据插入数据库"></a>将数据插入数据库</h2><p>比较简单，而且和上次差不多，所以就记录一下，不多做解释，最终的效果也就是把数据插入数据库的表中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">FILE_PATH = <span class="string">&#x27;豆瓣电影TOP250.txt&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">DATABASE = <span class="string">&#x27;ForPy&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMovieList</span>():</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    resp = requests.get(<span class="string">&#x27;https://movie.douban.com/top250?start=&#x27;</span> + <span class="built_in">str</span>(count))</span><br><span class="line">    bs = BeautifulSoup(resp.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> bs.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;item&#x27;</span>&#125;):</span><br><span class="line">        title = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;title&#x27;</span>&#125;).get_text()</span><br><span class="line">        rating_num = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;rating_num&#x27;</span>&#125;).get_text()</span><br><span class="line">        img = item.find(<span class="string">&#x27;img&#x27;</span>)[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">        tag = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;inq&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            desc = tag.get_text()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;标题：&#x27;</span>, title, <span class="string">&#x27; 评分：&#x27;</span>, rating_num, <span class="string">&#x27; 描述：&#x27;</span>, desc, <span class="string">&#x27; image_url：&#x27;</span>, img)</span><br><span class="line">            insert(title, rating_num, desc, img)</span><br><span class="line">            <span class="comment"># img = item.find(&#x27;div&#x27;, &#123;&#x27;class&#x27;: &#x27;pic&#x27;&#125;).find(&quot;a&quot;).get_text()</span></span><br><span class="line">            <span class="comment"># print(title, img)</span></span><br><span class="line">            <span class="comment"># f.writelines(&#x27;标题：&#x27; + title + &#x27; 评分：&#x27; + rating_num + &#x27; 描述：&#x27; + desc + &#x27; image_url：&#x27; + img+&quot;\n\n&quot;)</span></span><br><span class="line">    count += <span class="number">25</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">255</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取完毕&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        getMovieList()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">title, rating_num, desc, image_url</span>):</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">&quot;INSERT INTO `doubanTop250` VALUES (\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;,\&quot;%s\&quot;)&quot;</span> % \</span><br><span class="line">          (title, rating_num, desc, image_url)</span><br><span class="line">    <span class="built_in">print</span>(sql)</span><br><span class="line">    result = cursor.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;affect rows: &quot;</span> + <span class="built_in">str</span>(result))</span><br><span class="line">    db.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(<span class="string">&#x27;localhost&#x27;</span>, USERNAME, PASSWORD, DATABASE)</span><br><span class="line"><span class="comment"># 不设置在执行 sql 语句时报字符错误</span></span><br><span class="line">db.set_charset(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># f = open(FILE_PATH, &#x27;w+&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line">getMovieList()</span><br><span class="line">db.close()</span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>入门学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView的使用</title>
    <url>/2016/05/30/RecyclerView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>今天关于是写ListView还是RecyclerView着实纠结了一会，毕竟这二者都很重要，不过最近做的东西里用的是RecyclerView，所以还是先写RecyclerView了，而且代码也撸好了。好了日常唠嗑（1/1），下面进入正题。</p>
<p>本文包含以下几个方面：</p>
<ul>
<li> 使用RecyclerView实现ListView的效果</li>
<li> RecyclerView加载图片出现OOM时的一些处理</li>
<li> RecyclerView实现瀑布流</li>
<li> RecyclerView滑动卡顿的一些优化</li>
</ul>
<p>RecyclerView与ListView原理是类似的：都是仅仅维护少量的View并且可以展示大量的数据，不过RecyclerView相比ListView更加高级和灵活。RecyclerView本身只负责View的回收和复用，这从它名字本身也能看出一些端倪。既然RecyclerView只关心View的回收和复用，那么这玩意到底该怎么才能玩起来？</p>
<span id="more"></span>

<p>好问题，虽然是我自己问的……借用一句别人说的：真正牛逼的人是不需要什么都管的，只要底下有人就行。LayoutManager负责Item布局和展示,Item之间的间隔由ItemDecoration来解决，Item的增加与删除的动画由ItemAnimator来解决，Adapter用来将数据与Item界面绑定。</p>
<p>好了作了基本的了解，开始上码吧，有关如何在Android Studio中使用RecyclerView和我的代码获取方法，将在文末作相应的说明。首先第一要实现的，就是和ListView类似的效果，先看效果图，原谅我不会做动图……</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4349b482ad7d122c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-5619d16337071225.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果2"></p>
<p>好了，看完效果，开码，首先是主界面的xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;com.example.luo_pc.testforrecyclerview.MainActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/rv_test&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;&lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>没啥玩意，就是一个线性布局里加一个RecyclerView，接下来与ListView一样，列表item的xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/iv_item_img&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:scaleType=<span class="string">&quot;centerCrop&quot;</span></span><br><span class="line">        android:adjustViewBounds=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_item_desc&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#000000&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>主界面代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView rv_test;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        rv_test = (RecyclerView) findViewById(R.id.rv_test);</span><br><span class="line">        initData();</span><br><span class="line">        <span class="comment">//设置线性layoutManager</span></span><br><span class="line">        rv_test.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getApplicationContext()));</span><br><span class="line">        </span><br><span class="line">        mAdapter myAdapter = <span class="keyword">new</span> mAdapter();</span><br><span class="line">        <span class="comment">//设置myAdapter的数据</span></span><br><span class="line">        myAdapter.setData(itemList);</span><br><span class="line">        <span class="comment">//设置Adapter</span></span><br><span class="line">        rv_test.setAdapter(myAdapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        itemList = <span class="keyword">new</span> ArrayList&lt;ItemBean&gt;();</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird, <span class="string">&quot;南小鸟1&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.xiyangyang, <span class="string">&quot;喜羊羊&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird3, <span class="string">&quot;南小鸟2&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.blackcat, <span class="string">&quot;黑猫&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.dog, <span class="string">&quot;狗与剪刀&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.nike3, <span class="string">&quot;妮可妮可&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.paojie, <span class="string">&quot;炮姐&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber1, <span class="string">&quot;吾王1&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber2, <span class="string">&quot;吾王2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的ItemBean代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//R.drawable....</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> img;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemBean</span><span class="params">(<span class="keyword">int</span> img,String desc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.img = img;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImg</span><span class="params">(<span class="keyword">int</span> img)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.img = img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就是重头戏了，Adapter的代码。我们需要创建一个类继承RecyclerView.Adapter，以此来创建RecyclerView的适配器，继承RecyclerView.Adapter需要实现 onCreateViewHolder()、onBindViewHolder()和getItemCount()方法，而onCreateView的返回值是RecyclerView.ViewHolder，所以我们需要创建一个RecyclerView.ViewHolder。而RecyclerView.ViewHolder是一个抽象类，所以我们必须新建一个类继承该类，该抽象类中的构造函数也必须实现。说了这么多，可能有点绕，让我们从代码中学习如何操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">mAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据</span></span><br><span class="line">        <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</span><br><span class="line"><span class="comment">//        private ImageResizer imgResizer = new ImageResizer();</span></span><br><span class="line">        <span class="comment">//设置数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ArrayList&lt;ItemBean&gt; itemList)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.itemList = itemList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//得到item的view</span></span><br><span class="line">            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//返回viewholder</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> mViewHolder(view);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            ItemBean it = itemList.get(position);</span><br><span class="line">            mViewHolder mholder = (mViewHolder)holder;</span><br><span class="line">            <span class="comment">//设置imageView的图片</span></span><br><span class="line">            mholder.iv_item_img.setImageResource(it.getImg());</span><br><span class="line"><span class="comment">//            mholder.iv_item_img.setImageBitmap(imgResizer.decodeSampledBitmapFromResource(getResources(),it.getImg()));</span></span><br><span class="line">            <span class="comment">//设置textView的文字</span></span><br><span class="line">            mholder.tv_item_desc.setText(it.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> itemList.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">mViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">            ImageView iv_item_img;</span><br><span class="line">            TextView tv_item_desc;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">mViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>(itemView);</span><br><span class="line">                iv_item_img = (ImageView) itemView.findViewById(R.id.iv_item_img);</span><br><span class="line">                tv_item_desc = (TextView)itemView.findViewById(R.id.tv_item_desc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我这有些地方写的不是很好，在写一个类继承RecyclerView.Holder时这么写会更好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>&lt;<span class="title">mViewHolder</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如此在onBindViewHolder方法中便可以直接使用holder了，而不必再强转。</p>
<p>好了代码也写完了，是时候跑一波了！我的图片都是在百度上找的，随便下了那么几张。跑的时候果然不负我望，OOM!</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-751246a0afc89dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OOM"></p>
<p>诶？OOM？那么我之前放的效果图是怎么回事？没错……我压缩了一下图片，才跑出来开头放的效果图……关于该如何操作，容我细细道来。</p>
<p>我从网上下的图都是比较大的，大多为jpg格式，用个看图软件打开显示是1125*1674像素在windows系统上是436K大小。对于jpg我不太了解，只知道这换算成ARGB_8888每个像素占4byte，得7M了。而且</p>
<p>反正是OOM了，容我说一下我的处理方法：</p>
<p><strong>压缩</strong></p>
<p>图片有不同的形状与大小。在大多数情况下它们的实际大小都比需要呈现的尺寸大很多。考虑到在有限的内存下工作，理想情况是我们只需要在内存中加载一个低分辨率的图片即可。</p>
<p>BitmapFactory提供了一些解码的方法，用来从不同的资源中创建一个Bitmap。每一种解码方法都可以通过BitmapFactory.Options设置一些附加的标记，以此来指定解码选项。设置inJustDecodeBounds属性为true可以在解码的时候获取到图片的原始宽/高信息，并不会真正的去加载图片。</p>
<p>获取到图片的宽高意义何在呢？你可能会有这样的疑问，事实上只要指定Options的inSampleSize并在decode时传入Options，再将inJustDecodeBounds设置为false，就可以获得压缩后的Bitmap。而我们获取了原始图片的宽高，就可以根据我们所需要的宽高计算出压缩的比例。例如一个ARGB_8888的Bitmap分辨率为2048x1536直接加载所需的内存是12M，而指定inSampleSize为4，那么会得到一个512x384的Bitmap，所需的内存仅为0.75M。</p>
<p>上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmapFromResource</span><span class="params">(Resources res,<span class="keyword">int</span> resId,<span class="keyword">int</span> reqWidth,<span class="keyword">int</span> reqHeight)</span></span>&#123;</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        <span class="comment">//可以只获取宽高而不加载</span></span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">        BitmapFactory.decodeResource(res,resId,options);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算压缩比例</span></span><br><span class="line">        options.inSampleSize = calculateInSampleaSize(options,reqWidth,reqHeight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res,resId,options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleaSize</span><span class="params">(BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 图片的高宽</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">        <span class="comment">//默认不压缩</span></span><br><span class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</span><br><span class="line">                    &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</span><br><span class="line">                <span class="comment">//这里设置inSampleSize为2的幂是因为解码器最终还是会对非2的幂的数进行向下处理，</span></span><br><span class="line">                <span class="comment">// 获取到最靠近2的幂的数</span></span><br><span class="line">                inSampleSize *= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inSampleSize;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当我们使用ImageView加载期望大小为100*100像素的图片时就可以按照如下格式写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mImageView.setImageBitmap(</span><br><span class="line">        decodeBitmapFromResource(getResources(),R.id.drawa,<span class="number">100</span>,<span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<p>压缩的流程大概就到这了，继续回到RecyclerView，上面的代码实现了和ListView类似的效果，接下来要实现的是瀑布流的效果。说的高大上，其实大致流程与之前差不多，不过改一下LayoutManager就行了，直接上完整的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView rv_test;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; itemList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initData();</span><br><span class="line">        rv_test = (RecyclerView) findViewById(R.id.rv_test);</span><br><span class="line">        <span class="comment">//设置layoutManager</span></span><br><span class="line">        rv_test.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">2</span>, StaggeredGridLayoutManager.VERTICAL));</span><br><span class="line"></span><br><span class="line">        myAdapter mAdapter = <span class="keyword">new</span> myAdapter();</span><br><span class="line">        mAdapter.setItemList(itemList);</span><br><span class="line">        rv_test.setAdapter(mAdapter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        itemList = <span class="keyword">new</span> ArrayList&lt;ItemBean&gt;();</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird, <span class="string">&quot;南小鸟1&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.xiyangyang, <span class="string">&quot;喜羊羊&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.bird3, <span class="string">&quot;南小鸟2&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.blackcat, <span class="string">&quot;黑猫&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.dog, <span class="string">&quot;狗与剪刀&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.nike3, <span class="string">&quot;妮可妮可&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.paojie, <span class="string">&quot;炮姐&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber1, <span class="string">&quot;吾王1&quot;</span>));</span><br><span class="line">        itemList.add(<span class="keyword">new</span> ItemBean(R.drawable.saber2, <span class="string">&quot;吾王2&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ArrayList&lt;ItemBean&gt; ItemList;</span><br><span class="line">        ImageResizer imgResizer = <span class="keyword">new</span> ImageResizer();</span><br><span class="line">        BitmapMemoryCache lruBitmapCache = <span class="keyword">new</span> BitmapMemoryCache();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemList</span><span class="params">(ArrayList&lt;ItemBean&gt; ItemList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ItemList = ItemList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_item, parent, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> myViewHolder(view);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            myViewHolder mholder = (myViewHolder) holder;</span><br><span class="line">            ItemBean it = itemList.get(position);</span><br><span class="line">            <span class="keyword">if</span>(lruBitmapCache.getBitmapFromMemory(it.getDesc()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                mholder.iv_item_img.setImageBitmap(lruBitmapCache.getBitmapFromMemory(it.getDesc()));</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//缓存图片</span></span><br><span class="line">                lruBitmapCache.addBitmapToMemory(it.getDesc(),imgResizer.decodeSampledBitmapFromResource(getResources(),</span><br><span class="line">                        it.getImg()));</span><br><span class="line"></span><br><span class="line">                mholder.iv_item_img.setImageBitmap(imgResizer.decodeSampledBitmapFromResource(getResources(),</span><br><span class="line">                        it.getImg()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mholder.tv_item_desc.setText(it.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ItemList.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">myViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">            ImageView iv_item_img;</span><br><span class="line">            TextView tv_item_desc;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">myViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>(itemView);</span><br><span class="line">                iv_item_img = (ImageView) itemView.findViewById(R.id.iv_item_img);</span><br><span class="line">                tv_item_desc = (TextView) itemView.findViewById(R.id.tv_item_desc);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-5618087689875ae9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="瀑布流"></p>
<p>其中有两个类是之前没有的，ImageResizer和BitmapMemoryCache，前者是用来压缩的，后者是用来缓存的。因为是瀑布流，所以我没有设置期望的宽高，直接设置inSampleSize为4，压缩之后图片还是大了，在滑动的时候列表有卡顿现象，所以做了LruCache。大致就是这样，代码如下：</p>
<p>ImageResizer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageResizer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        <span class="comment">//解析图片而不会真正的加载</span></span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">        BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">        options.inSampleSize = <span class="number">4</span>;</span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res,resId,options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BitmapMemoryCache</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapMemoryCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;BitmapMemoryCache&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>)(Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">int</span> catchSize = maxMemory / <span class="number">8</span>;</span><br><span class="line">    LruCache&lt;String,Bitmap&gt; lruCache = <span class="keyword">new</span> LruCache&lt;String,Bitmap&gt;(catchSize)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value.getRowBytes() * value.getHeight() / <span class="number">1024</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBitmapToMemory</span><span class="params">(String key,Bitmap bitmap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getBitmapFromMemory(key) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lruCache.put(key,bitmap);</span><br><span class="line">            Log.i(TAG,<span class="string">&quot; &quot;</span>+maxMemory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromMemory</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lruCache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>做了缓存之后，第一次滑动……说实话还是有点卡，但是之后的确没有卡顿的现象了。果然人不能作死，没事加载大图作死不好！这里因为我的图比较少，从打的log来看我手机为一个app分配的内存是128M，1/8的内存16M来做缓存够了。如果图片比较多，内存做缓存不够的话，可以考虑用DisLruCache，不过sdk里是没有的，需要去下。关于滑动的优化还没有说完，不过今天暂时不打算继续了，明天或者有空的时候继续回来填这个坑。还有本来想写个RecyclerView上拉刷新的例子，可惜扯着扯着扯歪了，给忘了……有空再来来补上。</p>
<p>以后有机会再写一篇关于缓存的文吧，这里就不多写了。</p>
<blockquote>
<p>最后本文源码可以在<a href="https://github.com/ForgetAll/TestForRecyclerView">我的github</a>获取</p>
<blockquote>
<p>在Android Studio中使用RecyclerView请在build.gradle中添加</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">compile <span class="string">&#x27;com.android.support:recyclerview-v7:23.4.0&#x27;</span></span><br></pre></td></tr></table></figure>
<p>eclipse中请自行百度……</p>
<blockquote>
<p>资料来源：《Android开发艺术探索》<br>　　　　　　<a href="http://hukai.me/android-training-course-in-chinese/graphics/displaying-bitmaps/load-bitmap.html">Google官方培训文档中文版</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
        <tag>View探索</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava从放弃到入门（一）：基础篇</title>
    <url>/2016/09/09/RxJava%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>RxJava我一直是很想用的，扔物线老师的文章我也看了一点，但是说实话，其中很多东西交错在一起，对于我来说有点难以理解。而且看很多文章总是看了前面忘后面，还有一些结合lambda讲的，说实话，我是懵逼的。在这里把我自己对于RxJava的一些理解，看到的一些好文记录下来。</p>
<h3 id="RxJava是啥"><a href="#RxJava是啥" class="headerlink" title="RxJava是啥"></a>RxJava是啥</h3><blockquote>
<p>Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序。</p>
</blockquote>
<p>好，对于C#不怎么了解的人一般不会知道LINQ是啥东东吧……这个介绍我们先选择略过。看看github上RxJava是怎样描述自己的。</p>
<p>**  a library for composing asynchronous and event-based programs by using observable sequences. ** 一个在Java VM上使用可观测的序列来组成异步的、基于事件的程序的库。</p>
<span id="more"></span>

<p>这句话对于还未用过、看过RxJava的人来说是比较难理解的，好在关于RxJava的资料非常多，我们可以站在巨人的肩膀上来总结。首先扔物线对于RxJava给出的关键词就是** 异步 **，归根到底它就是一个实现异步操作的库。而回过头来，再看一遍这个定义，我们可以看出另外两个关键词：可观测的序列、基于事件，你可能会说这不废话吗，这句话一共才几个词，都快给我说完了。没错，因为这句话概括的非常精准，让人难以再精简了。</p>
<h3 id="为啥要用RxJava"><a href="#为啥要用RxJava" class="headerlink" title="为啥要用RxJava"></a>为啥要用RxJava</h3><p>Android中实现异步的工具还是有的，那么问题来了，对于我们Android开发者来说，为什么要用RxJava而不是本来的工具？</p>
<p>Talk is cheap，下面选取部分我以前写的代码，用AsyncTask实现的加载数据的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">ArrayList</span>&lt;<span class="title">ImageBean</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ObjectOutputStream oos;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ArrayList&lt;ImageBean&gt; <span class="title">doInBackground</span><span class="params">(<span class="keyword">final</span> String... params)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String imageUrl = params[<span class="number">0</span>];</span><br><span class="line">                HttpUtils.getJsonString(imageUrl, <span class="keyword">new</span> HttpUtils.HttpCallbackListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (JsonUtils.readJsonImageBean(response) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            imageList = JsonUtils.readJsonImageBean(response);</span><br><span class="line"><span class="comment">//                            memoryCache.addArrayListToMemory(&quot;imageList&quot;, imageList);</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">//序列化imageList</span></span><br><span class="line">                                <span class="keyword">if</span> (getActivity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    File imageCache = FileUtils.getDisCacheDir(getActivity(), <span class="string">&quot;ImageBean&quot;</span>);</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(imageCache));</span><br><span class="line">                                        oos.writeObject(imageList);</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                        e.printStackTrace();</span><br><span class="line">                                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (oos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                                oos.close();</span><br><span class="line">                                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                                e.printStackTrace();</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                count++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> imageList;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>上面那段代码表示先从文件中读取list，然后再从网络获取数据（初学时的代码，没有考虑好一些逻辑关系）。当我打算重构代码，看到这一段的时候，我的内心是崩溃的。虽然逻辑并不复杂，但是这些迷之缩进实在是看的蛋疼。那么如果我用RxJava重写一下上面的逻辑，会是怎样的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.just(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribeOn(Schedulers.newThread())</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (integer == TYPE_NETWORK) &#123;</span><br><span class="line">                    <span class="keyword">return</span> getUrl(pageIndex, type);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;cache&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;cache&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">//加载缓存</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//从网络获取数据</span></span><br><span class="line">           onCompleted();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>以上代码实现的非常不科学，非常的不RxJava，但是在这里仅仅是作为一个示例，让你感受一下RxJava的特性：简洁。你可能会说这哪里简洁了啊？代码量不跟以前差不多吗，是的，甚至有的时候代码量还会增加一点，但是这样的代码能让你感觉到清晰的逻辑。一切逻辑都在链子里了，而且如果你使用lambda会得到更加简洁的代码。。</p>
<p>这就是我们要用RxJava的原因之一了：** 简洁 ** </p>
<p>这里的简洁不是指代码量的少，而是指代码逻辑的简洁。而且这种优势随着逻辑的复杂而更加明显。在这里我并不会将lambda和RxJava结合在一起，一是因为自己的确不熟，二也是因为自己初接触RxJava，对于我这种入门级选手还是要先排除一些干扰项</p>
<h3 id="RxJava核心-amp-基础"><a href="#RxJava核心-amp-基础" class="headerlink" title="RxJava核心&amp;基础"></a>RxJava核心&amp;基础</h3><p>在开始撸RxJava的代码之前，我们首先要弄清楚RxJava中的三个基本也是核心的概念：观察者（Observer）、订阅（Subscribe()）和被观察者（Observable）。熟悉设计模式的你可能会立刻想到，这不就是观察者模式吗。是的，就是观察者模式。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-a0ae573b5dc29d6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="订阅.png"></p>
<p>观察者模式定义了对象间一种一对多的依赖关系，每当一个对象状态发生改变，所有依赖于它的对象都会得到通知并被自动更新。在Android中比较经典的例子有Button的点击，只有当Button被点击的时候，观察者OnClickListener在Button的点击状态发生改变时将点击事件传送给注册的OnClickListener。而对于RxJava来说也是如此，接下来我将换一种我喜欢的描述来讲解我所理解的RxJava。RxJava中Observable是发射数据的源，无论他是“热”启动还是“冷”启动，总之，他最终都是用来发射数据的。Observer则是数据接收者，而Observer和Observable则通过subscribe()（订阅）结合在一起，从而达到Observer接收Observable发射的数据的目的。</p>
<p>在讲解完了RxJava的核心之后，还需要注意一些细节：<br>在RxJava的文档中指出，无论哪种语言，你的观察者（Observer）需要实现以下方法的子集：</p>
<ul>
<li><p>onNext(T item)<br>Observable调用这个方法发射数据，方法的参数就是Observable发射的数据，这个方法调用次数取决于实现。</p>
</li>
<li><p>onError(Exception e)<br>Observable遇到错误时会调用这个方法，这个调用会终止Observable，onError和以下将要介绍的onComplete是互斥的，即同一个事件序列中二者只能有一个被调用。</p>
</li>
<li><p>onComplete()<br>正常终止</p>
</li>
</ul>
<p>好了，烦人的概念时间终于过去了，让我们开始愉悦的Hello World时间！</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><p>打码之前记得加上依赖：</p>
<blockquote>
<p>compile ‘io.reactivex:rxjava:1.0.14’<br>compile ‘io.reactivex:rxandroid:1.0.1’</p>
</blockquote>
<p>我这的依赖好像还是看扔物线文的时候添加的……应该比较老了……</p>
<p>话不多说直接上码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建被观察者</span></span><br><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//回调</span></span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;<span class="comment">//被订阅</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onCompleted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;onError&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9f87797df1bf849b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hello world.png"></p>
<p>刚接触到这一坨代码你可能会说卧槽这什么东西，大兄弟先别忙着走，我那么写只是为了把RxJava链式调用的特点展现在你面前，接下来让我们从Observeable和Observer的创建开始。</p>
<ul>
<li>创建Observable<br>创建Observable的方式非常的多，先介绍一下非常基本的** Create **</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;!&quot;</span>);                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过create()方法可以创建一个Observable对象我们是知道了，那么create()方法中的参数是什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoked when Observable.subscribe is called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSubscribe</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Action1</span>&lt;<span class="title">Subscriber</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// cover for generics insanity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个参数是个接口，那么很明显了——这个参数是用来干回调这事的，发射数据的时候将会用这个接口的实现类通过这个参数发射数据。而call方法则来源于其父接口Action1。call这个方法给出了一个subscriber参数，让我们看一下这个subscriber究竟是谁。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-60e951d83ed9cef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="是谁？.png"></p>
<p>可能你会说这不废话吗……闭着眼我都能知道这是炮姐……继续我们的话题，在这个类实现的接口里我们发现了一个看起来非常熟悉的东西** Observer **是了，这个subscriber就是一个订阅者，一个订阅者加强版。他相对于Observer主要有两点区别，一个onStart()会在订阅开始，事件发送前执行，所以你可以在这个方法里做一些准备工作。另一点是实现的另外一个接口提供的unsubscribe()，取消订阅。据扔物线的文章说，不取消订阅可能会有内存泄露的风险，关于这一点很容易理解，异步可能会由于生命周期长短问题引发内存泄漏，在这里就不多加赘述了。</p>
<ul>
<li><p>创建Observer<br>看完了Observable的创建，我们再来看一下Observer的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG,s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>按照老样子，点进Observer发现这个也是个接口，那么我们在使用多态创建这个方法的时候必须要实现他的三个方法。</p>
</li>
<li><p>订阅</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure>
<p>上面的代码看起来像是observable订阅了observer，但事实上这种设计是出于流式api的考虑，什么是流式api？看看我的hello world实例代码是怎么写的，那就是流式api设计的好处。整个代码看起来像是一个链子，优雅而简洁。</p>
</li>
</ul>
<p>好了，最基本的介绍完了，你现在可以去尝试一下你的Hello World了。不过在尝试之前，我需要纠正我上述Hello World示例代码的一个错误：RxJava文档中对于Observable的描述有这么一段话，一个形式正确的Observable必须尝试调用一次onCompleted或者调用一次onError方法。很明显，我的demo是一个使用方法错误的例子。此处对Observable和Observer的api介绍非常的少，因为我觉得一次性把文档上的方法全给你搬上来并不明智，一是用不上那么多，二是容易混淆。</p>
<h3 id="线程控制——Scheduler"><a href="#线程控制——Scheduler" class="headerlink" title="线程控制——Scheduler###"></a>线程控制——Scheduler###</h3><p>终于要到重点了，线程控制绝对是RxJava的重点之一。在不指定线程的情况下，RxJava遵循的是线程不变的原则，在哪个线程调用subscribe()，就在哪个线程生产、消费事件。这对于大部分开发人员来说都是难以接受的事，因为如果是耗时操作可能会阻塞当前线程，这是开发者不想看到的，好在我们是可以切换线程的。下面同样是摘自的描述：</p>
<ul>
<li><p>Schedulers.computation( )：用于计算任务，如事件循环或回调处理，不要用于IO操作，默认线程数等于处理器的数量。</p>
</li>
<li><p>Schedulers.from(executor)：使用指定的Executor作为调度器</p>
</li>
<li><p>Schedulers.immediate( )：在当前线程立即开始执行任务</p>
</li>
<li><p>Schedulers.io( )：用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；Schedulers.io()默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器。</p>
</li>
<li><p>Schedulers.newThread( )：为每个任务创建一个新线程</p>
</li>
<li><p>Schedulers.trampoline( )：当其它排队的任务完成后，在当前线程排队开始执行</p>
</li>
</ul>
<p>这里只是初步的了解一下，毕竟本文定位是一篇基础级的文，以下给出一个简单的加载图片的例子。</p>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><p>首先明确我们要干的事：通过一个url加载一张图，恩为了演示RxJava和线程控制，我用HttpUrlConnection来做一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Bitmap&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Bitmap&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://img4.imgtn.bdimg.com/it/u=815679381,647288773&amp;fm=21&amp;gp=0.jpg&quot;</span>);</span><br><span class="line">                HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">                InputStream in = connection.getInputStream();</span><br><span class="line">                Bitmap bitmap = BitmapFactory.decodeStream(in);</span><br><span class="line">                subscriber.onNext(bitmap);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())  <span class="comment">//指定subscriber的回调发生在UI线程</span></span><br><span class="line">            .subscribeOn(Schedulers.newThread())        <span class="comment">//指定subscribe()发生在新线程</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> Subscriber&lt;Bitmap&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    plan.setVisibility(View.GONE);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        image.setImageBitmap(bitmap);</span><br><span class="line">                        onCompleted();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-10b9f47e3be4e12f.gif?imageMogr2/auto-orient/strip" alt="炮姐.gif"></p>
<p>上面的代码写的很清楚了，我是通过observeOn(AndroidSchedulers.mainThread())指定订阅者的回调发生在主线程，因为这里给ImageView设置图片需要在主线程进行，通过subscribeOn(Schedulers.newThread())指定subscribe()发生在新线程。</p>
<p>最后请忽略最后几秒的蜜汁小圆点，因为我不摸屏幕AndroidStudio的录制就会停留在加载出图片后的那一段时间，录制出来的效果非常差。我加载的这张图是非常小的，我通过限制wifi网速为5k/s来达到“加载”这个目的。</p>
<h3 id="一些反思"><a href="#一些反思" class="headerlink" title="一些反思"></a>一些反思</h3><p>本文说的并不深入，只是一篇基础，看完了这篇可能你只能写两个小demo。但是就如我上文所说的，我认为学一个东西，基础是十分重要的，只要你梳理清楚基础和关键，学习起来无疑是事半功倍的。</p>
<p>我在文章最开头写的demo我为什么要说这很不“RxJava”？因为我只是传递了两个Integer类型的数，之后通过map操作符将这两个转换为String，在订阅的回调里处理这两个字符，并执行相应的逻辑。这给我的感觉就和以前写代码的感觉差不多，没有一种链式调用的爽快感，反而有一种强行用RxJava的感觉。那么RxJava的应用场景和操作符究竟有什么玄机？我会继续探索，继续分享。请期待~</p>
<h3 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h3><p>给Android开发者的RxJava详解：<a href="http://gank.io/post/560e15be2dca930e00da1083#toc_14">http://gank.io/post/560e15be2dca930e00da1083#toc_14</a></p>
<p>ReactiveX/RxJava文档中文版：<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/">https://mcxiaoke.gitbooks.io/rxdocs/content/</a></p>
<p>大头鬼深入浅出RxJava系列：<a href="http://blog.csdn.net/lzyzsd/article/details/44094895">http://blog.csdn.net/lzyzsd/article/details/44094895</a></p>
<p>iamxiarui探索RxJava系列，也是我比较推荐的入门文，我这同学总结和配图都是一流的：<a href="http://www.jianshu.com/p/856297523728">http://www.jianshu.com/p/856297523728</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava从放弃到入门（二）：学，不能停</title>
    <url>/2016/09/14/RxJava%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%AD%A6%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%81%9C/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>上篇文章<a href="http://www.jianshu.com/p/93ae2aa6a60a">RxJava从放弃到入门（一）：基础篇</a>讲述的东西都是非常基础的东西，这一篇准备讲述以下一些东西：</p>
<p>创建Observable:</p>
<ul>
<li>just</li>
<li>defer</li>
</ul>
<p>操作符:</p>
<ul>
<li>map<span id="more"></span></li>
<li>flatmap</li>
</ul>
<p>经验总结:</p>
<ul>
<li>自己遇到的一些坑和经验</li>
</ul>
<h3 id="再叙Observable"><a href="#再叙Observable" class="headerlink" title="再叙Observable"></a>再叙Observable</h3><p>在上一篇里我们已经了解了在RxJava中Observable扮演了什么样的角色，如果你还没看过，没事，我们一起来回忆以下：在RxJava中，Observable扮演的是一个发射数据或数据序列的角色。Observer则是接收Observable发射的东西。上次只提到了一种hello world的打印方法，是否会让你感到不爽？让我们当一回孔乙己，学一下“茴”字的N种写法。当然在这我并不会以流水账的形式记录每一种创建操作的流程，那样无疑是没有必要的，实在想要了解你可以去看文档。</p>
<h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>首先肯定还是我们的hello world</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.just(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">               Log.e(TAG, s);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b1601f2ed9ad6d82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="just.png"></p>
<p>上面出现了一个Action1，你去看他的继承关系可能会让你疑惑，因为接收数据的Observer或者是其子类都跟他没啥关系。没关系，我们直接看源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subscription <span class="title">subscribe</span><span class="params">(<span class="keyword">final</span> Action1&lt;? <span class="keyword">super</span> T&gt; onNext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (onNext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;onNext can not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subscribe(<span class="keyword">new</span> Subscriber&lt;T&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OnErrorNotImplementedException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T args)</span> </span>&#123;</span><br><span class="line">            onNext.call(args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以很明显的看到在这个方法内部，还是有一个Subscriber来接收数据的，这个Subscriber是观察者Observer的实现类（Subscriber本身是一个抽象类）。不同的只是在onNext方法中将处理数据的逻辑交给接口Action1的call方法，而最终实现逻辑是交由用户来实现的。这种设计明显是为了方便我们使用，弄明白这一点后，我们可以就可以安心的使用Action1来跑我们的代码了。</p>
<p>使用just方法创建的Observable会按照顺序将参数一一发射，如果不能理解的话，恩，官方文档的图也是极好的:<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/defer.c.png" alt="文档"></p>
<p>看了just之后你可能会觉得这玩意很方便，可以不用自己手动调subscriber.onNext()和其他的方法了~但是有得必有失，你用一个create方法从头开始创建一个observable时，你对这个observable的特性是了解的。而你将目光投向一个经过封装的方法时，你需要花费更多的时间去了解他。下面来一个我曾看过的一篇文章里谈到的一个错误使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">aaobservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.just(value);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//调用以上方法创建一个Observable</span></span><br><span class="line">    Observable&lt;String&gt; aa = aaobservable();</span><br><span class="line">    value = <span class="string">&quot;String&quot;</span>;</span><br><span class="line">    aa.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            Log.e(TAG, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>以上代码你觉得运行的结果会是什么？会是 String 吗？结果在下面<br><img src="http://upload-images.jianshu.io/upload_images/1976147-dfe4da049bc4bd09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="你这么一说我就懂了.png"></p>
<p>啥？为毛是null？很简单，上源码里看看就行了。首先点进just(T value)这个方法里瞧瞧，他究竟干了啥。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">just</span><span class="params">(<span class="keyword">final</span> T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ScalarSynchronousObservable.create(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续追踪，发现create()源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">ScalarSynchronousObservable&lt;T&gt; <span class="title">create</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScalarSynchronousObservable&lt;T&gt;(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我去，可算看到了，既然是调了构造方法，那应该不会再有什么幺蛾子了吧？进构造方法看一看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ScalarSynchronousObservable</span><span class="params">(<span class="keyword">final</span> T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> OnSubscribe&lt;T&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; s)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             *  We don&#x27;t check isUnsubscribed as it is a significant performance impact in the fast-path use cases.</span></span><br><span class="line"><span class="comment">             *  See PerfBaseline tests and https://github.com/ReactiveX/RxJava/issues/1383 for more information.</span></span><br><span class="line"><span class="comment">             *  The assumption here is that when asking for a single item we should emit it and not concern ourselves with </span></span><br><span class="line"><span class="comment">             *  being unsubscribed already. If the Subscriber unsubscribes at 0, they shouldn&#x27;t have subscribed, or it will </span></span><br><span class="line"><span class="comment">             *  filter it out (such as take(0)). This prevents us from paying the price on every subscription. </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            s.onNext(t);</span><br><span class="line">            s.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先抛开注释，直接调用了onNext和onCompleted，明显没其他多的东西。而那段注释，额用我比较差的英语水平来翻译一下第一句话……我们不检查是否被订阅，因为在用例中这会显著的影响性能。恩，出于各种考虑，他直接发射了数据，并不关心有没有人订阅之类的……哦，原来如此，在创建Observable的时候value还是null，在那时数据已经被发射了，之后再更改value的值也无济于事了。知晓了原因之后那该怎么解决这个问题呢？</p>
<p>很容易想到的一个方法是create()方法，毕竟这个方法会从头建造一个Observable，一切尽在你的掌握中。</p>
<h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>使用defer()来创建Observable会在有观察者订阅时才创建Observable，并且为每一个观察者创建一个新的Observable。回想一下，我们上面的代码之所以出现错误，就是因为过早的创建Observable和发射数据导致的。defer()这种在订阅时才创建是解决以上问题的方法之一，那么上代码:<br>创建Observable的方法:<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">aaobservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; aaobservable = aaobservable();</span><br><span class="line">value = <span class="string">&quot;String&quot;</span>;</span><br><span class="line">aaobservable.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b72782e1a42f01c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功"></p>
<p>好了，对于just和defer就先告一段落，同时对于整个Observable也就告一段落了。可能到这你还觉得不够，毕竟归根到底我说到这也只讲了just和defer，不过我还是不打算继续下去了，我这里对于Observable的描述已经占去了太多的篇幅了。关于更多的创建操作我的建议是阅读官方文档。</p>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/map.png" alt="图来自于文档"></p>
<p>在我看来这个操作符体现的是一种“一对一”的转换，比如你现在需要一张图，但是你的输入是一个string（这算是比较经典的场景了），你就可以使用如下代码进行变换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.just(str).map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URLConnection con = <span class="keyword">new</span> URL(s).openConnection();</span><br><span class="line">            InputStream inputStream = con.getInputStream();</span><br><span class="line">            Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</span><br><span class="line">            <span class="keyword">return</span> bitmap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread());</span><br></pre></td></tr></table></figure>

<p>代码效果就不展示了，你懂就行。这篇文章里我暂时不会去解析map以及接下来会讲述的几个操作符的变换原理，留待以后更深入的了解之后再去用更清晰的语言来表述。</p>
<h4 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h4><p>上述map可以实现一对一的转换，那么flatmap则是实现一对多的转换。在RxJava的文档上是如此描述flatmap的：</p>
<p>将一个发射数据的Observable变换为多个Observables，然后将它们发射的数据合并后放进一个单独的Observable</p>
<p><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/flatMap.png" alt="图片来自官方文档"></p>
<p>对于一个url你可以用map一对一的将其转换为一个bitmap，对于一个含有url的string数组你也可以采用以下的方式来转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.just(str).map(<span class="keyword">new</span> Func1&lt;String[], Bitmap&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String a : s) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URLConnection con = <span class="keyword">new</span> URL(a).openConnection();</span><br><span class="line">                InputStream inputStream = con.getInputStream();</span><br><span class="line">                Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</span><br><span class="line">                <span class="keyword">return</span> bitmap;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        image.setImageBitmap(bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但是写完之后会不会觉得有点不得劲？感觉这很不RxJava，很让人不愉快？那就对了，人要对自己好一点，觉得不爽就换个flatmap试试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.from(str).flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.just(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Bitmap bt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(s);</span><br><span class="line">            URLConnection con = url.openConnection();</span><br><span class="line">            bt = BitmapFactory.decodeStream(con.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不管效果如何，这一条链子写下来就是让人很舒服~同时逻辑也非常的清晰，以后再改这种代码的时候可以少骂几句娘了。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这一次关于RxJava的不能停到这里就要告一段落了，好在我已经把我想要写的都写的差不多了，不过这里的小结也不能光灌水。最近本来打算开个项目把gank io的api搞一下，不过最近突然就忙起来了，所以那个东西先搁置一下，关于我初学时的项目的重构已经在进行了。使用了MVP，部分逻辑使用了RxJava，不过因为是初学时写的，自己不满意的地方实在是太多了。以下的两点是我最近在使用RxJava时自己总结的一点经验，不足之处欢迎指出：</p>
<h4 id="线程控制就交给RxJava去做"><a href="#线程控制就交给RxJava去做" class="headerlink" title="线程控制就交给RxJava去做"></a>线程控制就交给RxJava去做</h4><p>说实话，我还没有开始使用Retrofit，我使用的一直是Hongyang大神封装的OkhttpUtil，因为的确挺好用的。现在一般的请求框架也都会自己封装线程池，实现异步回调。我就在这上面吃了一个小亏，我在使用RxJava实现读取数据的逻辑的时候，先从网络获取数据，获取不到则读取本地缓存。结果每次读取的都是本地数据，这让我很奇怪，我打了log发现网络请求也是成功的。后来我有点明白了:</p>
<p>我使用okhttputil获取数据成功时回调，但是我在订阅的回调里面判断数据状态时，数据还没有获取到，所以执行了获取本地数据的逻辑。所以关于异步这个问题，我想说的就是写同步的代码，让RxJava做异步的事。当然，我的看法并不一定准确，你可以在底下评论说出你的想法，欢迎讨论。</p>
<p>最后再来个真正的小结吧，说实话，我觉得写这两篇RxJava的文章对我自己的帮助真的挺大的，让我对RxJava的认知又提升了一点。现在再看以前写的一些RxJava的代码，都觉得不够RxJava，所以要走的路还很长啊~</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket的使用</title>
    <url>/2017/06/18/Socket%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Socket基础"><a href="#Socket基础" class="headerlink" title="Socket基础"></a>Socket基础</h2><p>在说到计算机网络模型的时候一定都会提到这两个模型：OSI七层网络模型和TCP/IP四层网络模型，因为OSI七层过于复杂，现在普遍采用的是TCP/IP的四层网络模型。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-0e9dd0a3a92a8428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="七层OSI &amp; 四层TCP/IP"></p>
<p>tcp/udp协议位于TCP/IP协议栈的传输层，tcp是一个面向连接、可靠的协议，而udp协议是一个不可靠的、无连接协议。刚开始我有点疑惑，什么样的场景才需要udp协议呢？因为udp协议并不保证数据一定传输到目的地，有什么场景能容忍可能发生丢包的情况呢？后来在项目的某个解决方案的讨论中，听到了老大的解释。当时我们可以选用udp和tcp方案，问我该选用什么方案。我当时也了解了一些tcp和udp，记得在网上看到过这么一句话，如果你需要用额外的操作保证数据准确的传递到目的地，那不如直接采用tcp协议，所以我说udp并不保证数据一定传达，而tcp是可靠的，所以应该采用tcp协议。然后老大说在局域网（当时要解决的就是局域网中的一个问题）可以认为udp是可靠的，不需要考虑丢包的情况，不过数据处理难一点，后来还是用了TCP……</p>
<p>Socket可以说是对TCP协议的封装，可以理解成TCP的API，在TCP/IP协议栈中应当属于应用层和传输层之间的抽象。那么属于应用层的HTTP协议，和Socket有何异同呢？HTTP协议一般来说是短连接（当然，可以指定长连接），每次请求都会建立和断开TCP连接，而Socket默认就是长连接，两者在传输层都是建立和断开TCP连接。相比于Socket，HTTP协议显得更加的高级。二者都是基于TCP的，Socket可以用来编写一个HTTP框架。</p>
<span id="more"></span>
<h2 id="Socket-Client"><a href="#Socket-Client" class="headerlink" title="Socket Client"></a>Socket Client</h2><p>在Java中想要使用Socket只要用Socket这个类就可以了，而且得益于Java方便的IO，入门的成本不会非常高，但是前提是你熟悉Java的IO和基本的网络知识。当然了，如果你的追求更高还可以去用非阻塞的NIO玩玩……我这是不会介绍的……</p>
<p>接下来将会创建一个Socket来获取时间（要看到结果得翻墙……）</p>
<p>首先创建一个Socket</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;time.nist.gov&quot;</span>,<span class="number">13</span>);</span><br></pre></td></tr></table></figure>
<p>第一个参数可以是主机域名也可以是ip，第二个参数是端口，这种方式建立的Socket会直接开始尝试连接远程服务器的端口。服务器监听端口的服务在和客户端建立连接之后，会按照一定的协定发送、接收数据。而这里建立连接之后就会直接把时间返回给客户端，这里用Java中的字符流处理，简单~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream in = socket.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in,<span class="string">&quot;ASCII&quot;</span>));</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> length = data.length;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">String info;</span><br><span class="line"><span class="keyword">while</span>((info = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sb.append(info);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-2238df865428acb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出"></p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeSocket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建客户端指定主机和端口</span></span><br><span class="line">        <span class="keyword">try</span>(Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;time.nist.gov&quot;</span>,<span class="number">13</span>))&#123;</span><br><span class="line">            socket.setSoTimeout(<span class="number">15000</span>);</span><br><span class="line">            InputStream in = socket.getInputStream();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in,<span class="string">&quot;ASCII&quot;</span>));</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length = data.length;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            String info;</span><br><span class="line">            <span class="keyword">while</span>((info = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                sb.append(info);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line"><span class="comment">//            socket.shutdownOutput();</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Socket-Client-amp-Socket-Server"><a href="#Socket-Client-amp-Socket-Server" class="headerlink" title="Socket Client &amp; Socket Server"></a>Socket Client &amp; Socket Server</h2><p>接下来的例子会建立一个TCP Client 和 TCP Server，通过互相发送字符串来模拟服务器和客户端的通信。在Java中想要使用TCP Server，可以使用ServerSocket。我们首先建立一个TCP Server：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.用指定的端口实例化一个SeverSocket对象。服务器就可以用这个端口监听从客户端发来的连接请求。</span></span><br><span class="line"><span class="comment">         * 2.调用ServerSocket的accept()方法，以在等待连接期间造成阻塞，监听连接从端口上发来的连接请求。</span></span><br><span class="line"><span class="comment">         * 3.利用accept方法返回的客户端的Socket对象，进行读写IO的操作</span></span><br><span class="line"><span class="comment">         * 4.关闭打开的流和Socket对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 1.创建一个服务端Socket，ServerSocket，指定绑定端口，并监听此端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10086</span>);<span class="comment">// 1024 - 65535的某个端口</span></span><br><span class="line">        <span class="comment">// 2.调用accept方法开始监听，等待客户端的连接</span></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        <span class="comment">// 3.获取输入流，并读取客户端信息</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String info = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((info = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;server: &quot;</span> + info);</span><br><span class="line">            &#125;</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">            <span class="comment">// 4.获取输出流，响应客户端的请e求</span></span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.关闭资源</span></span><br><span class="line">            pw.close();</span><br><span class="line">            os.close();</span><br><span class="line">            br.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            is.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>注释写的很清楚了，这里还要提醒一下，accept()这个方法是一个阻塞方法，也就是说如果没有socket连接，代码会一直阻塞在这里。而接下来则是拿到输入流，读入客户端的输入。拿到客户端的输入之后，再获取输出流返回响应给客户端。</p>
<p>接下来是建立客户端，上面的服务端监听了10086端口，所以下面的服务端也要连10086端口，套路跟之前的Socket差不多：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="comment">// 1.创建客户端Socket，指定服务器地址和端口</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10086</span>);</span><br><span class="line"><span class="comment">// 2.获取输出流，向服务器端发送信息</span></span><br><span class="line">OutputStream os = socket.getOutputStream();<span class="comment">// 字节输出流</span></span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);<span class="comment">// 将输出来包装成打印流</span></span><br><span class="line">pw.write(<span class="string">&quot;用户名:admin;密码:admin&quot;</span>);</span><br><span class="line">pw.flush();</span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"><span class="comment">// 3.获取输入流，并读取到服务器端的响应信息</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">String info = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((info = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello，我是客户端，服务器说：&quot;</span> + info);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">is.close();</span><br><span class="line">pw.close();</span><br><span class="line">os.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>
<p>熟悉的配方，熟悉的味道，这里就不再多做介绍了。注释写的很详细，运行的时候注意先运行服务端，再运行客户端。因为服务端的代码会阻塞在accept方法，而客户端在服务端没有启动的情况下，会出现连接失败的情况。</p>
<p>看一下server和client各自的输出：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-02deb9e26f80f63a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="server"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-42975b3066b2444e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="client"></p>
<p>这里server和client的代码我是写在两个类各自的main方法中的，这代码我也是跟着网上找到的博客一行一行敲的，敲完之后运行，恩，成功了。后来我感觉到有点不对……不对在哪呢？因为我这里是两个main方法运行，可以理解成是两个进程，这两个进程竟然惊人的出现了顺序性！你连接我，我监听到，拿到你发的内容，然后我响应你，你再拿到我的响应。符合逻辑，合乎情理，但是凭什么啊？多线程都要为一些个顺序性挠破头，何况是多进程？后来我仔细看了代码，发现这些表现出来的顺序性是因为：阻塞。</p>
<p>首先是服务端的代码，第一次阻塞发生在accept()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket = serverSocket.accept();</span><br></pre></td></tr></table></figure>
<p>这里会阻塞进程，等待Socket连接。而在客户端连接上之后，会继续执行代码，代码会在哪里阻塞呢？第二次阻塞发生在读取客户端输入的时候：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ((info = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello，我是客户端，服务器说：&quot;</span> + info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是的，就是阻塞在这个br.readLine()了，首先我们可以从代码的现象来分析：从代码来说，能正确的打印客户端传来的信息，那么这个while循环一定是能正常的执行的。因为如果不满足条件会跳出，满足则会一直打印，即使没读到信息，那么只能说明一件事，br.readLine()阻塞了程序。这里的io是阻塞式io，不作更多的介绍，有兴趣可以了解Java的IO模型。在读到信息之后将之打印出来，那么后来为什么又不阻塞跳出了循环呢？这里可以看一下这个方法的注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reads a line of text.  A line is considered to be terminated by any one</span></span><br><span class="line"><span class="comment"> * of a line feed (&#x27;\n&#x27;), a carriage return (&#x27;\r&#x27;), or a carriage return</span></span><br><span class="line"><span class="comment"> * followed immediately by a linefeed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>     A String containing the contents of the line, not including</span></span><br><span class="line"><span class="comment"> *             any line-termination characters, or null if the end of the</span></span><br><span class="line"><span class="comment"> *             stream has been reached</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>  IOException  If an I/O error occurs</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.nio.file.Files#readAllLines</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>注释中关于返回值写的非常清楚： or null if the end of the stream has been reached，如果到了流的末尾会返回null。怎么判断到了流的末尾呢？这里我认为是这个流结束了，不会再有任何后续输出了，这个在代码中是怎么体现的呢？在Client中的这句代码就是解释的体现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">socket.shutdownOutput();</span><br></pre></td></tr></table></figure>
<p>终结了输出流，这样在Server中就跳出了while循环，而不是阻塞在br.readLine。如果注释这句shutdownOutput()，程序则会阻塞住，现象如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-8ad38875ec52a373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Server"></p>
<p>Server没有跟上次一样最后有显示退出了程序，而是一直在运行，是的阻塞住了。而Client则是没有任何输出，因为Client也有一个读取的操作，也阻塞住了。</p>
<p>简单的流程就是这样，这是一个简单的TCP Server和TCP Client的阻塞模型。接下来介绍几种TCP Server模型。</p>
<h2 id="TCP-Server-的几种模型"><a href="#TCP-Server-的几种模型" class="headerlink" title="TCP Server 的几种模型"></a>TCP Server 的几种模型</h2><p>TCP Server有阻塞式、并发式以及异步服务器。其中阻塞式服务器最好实现，同时也是问题比较多的。因为客户端发送到服务器的请求，服务器会依次处理，只要碰到一个处理时间特别长的请求，其余请求就无法得到及时的处理，同时可能会有部分客户端认为连接已经超时了。并发式服务器在处理请求时会为连接开启一个线程，在线程中完成各自的读取响应操作，这样就不会阻塞服务器对于其他请求的访问了，缺点无疑是服务器资源有限，不可能为每一个连接开辟新的线程，通常会配合线程池一起处理。异步服务器需要Java中的NIO配合，这里不做介绍。</p>
<p>阻塞式的实现就是上面的代码，不过上面的代码通过shutdown来跳出阻塞，通常来说是不会这样的，因为shutdown之后无法再次使用输入输出流，一般来说会自定义数据边界，在拿到一个完整的数据之后将数据传递出去，让上层处理，然后就阻塞在那，等待下一次的数据到来。这种实现起来也不是非常难，跟人配合的时候协商好协议就可以了。下面要实现的是并发式服务器，至于异步服务器，我自己也不是非常熟，各位感兴趣可以自己查阅资料。</p>
<p>客户端还是使用上面的代码，不做改变，而Server则做一些并发的处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by luojun on 2017/6/5.</span></span><br><span class="line"><span class="comment"> * desc:熟悉Socket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Executor executor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        executor = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.用指定的端口实例化一个SeverSocket对象。服务器就可以用这个端口监听从客户端发来的连接请求。</span></span><br><span class="line"><span class="comment">         * 2.调用ServerSocket的accept()方法，以在等待连接期间造成阻塞，监听连接从端口上发来的连接请求。</span></span><br><span class="line"><span class="comment">         * 3.利用accept方法返回的客户端的Socket对象，进行读写IO的操作</span></span><br><span class="line"><span class="comment">         * 4.关闭打开的流和Socket对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 1.创建一个服务端Socket，ServerSocket，指定绑定端口，并监听此端口</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">10086</span>);<span class="comment">// 1024 - 65535的某个端口</span></span><br><span class="line">        <span class="comment">// 2.调用accept方法开始监听，等待客户端的连接</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Socket socket = serverSocket.accept();</span><br><span class="line">                    count++;</span><br><span class="line">                    System.out.println(<span class="string">&quot;有 &quot;</span> + count + <span class="string">&quot; 个Socket连接&quot;</span>);</span><br><span class="line">                    handleSocket(socket);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleSocket</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            InputStream is = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is = socket.getInputStream();</span><br><span class="line">                InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">                String info = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span> ((info = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;server: &quot;</span> + info);</span><br><span class="line">                    handleData(info);</span><br><span class="line">                &#125;</span><br><span class="line">                socket.shutdownInput();</span><br><span class="line">                <span class="comment">// 4.获取输出流，响应客户端的请e求</span></span><br><span class="line">                OutputStream os = socket.getOutputStream();</span><br><span class="line">                PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);</span><br><span class="line"><span class="comment">//            if(info.equals(&quot;我还活着，你好吗？&quot;))&#123;</span></span><br><span class="line"><span class="comment">//                pw.write(&quot;我也很好，你放心。&quot;);</span></span><br><span class="line"><span class="comment">//                pw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;else &#123;</span></span><br><span class="line">                pw.write(<span class="string">&quot;欢迎您！&quot;</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 5.在合适的时机关闭资源</span></span><br><span class="line">                pw.close();</span><br><span class="line">                os.close();</span><br><span class="line">                br.close();</span><br><span class="line">                isr.close();</span><br><span class="line">                is.close();</span><br><span class="line">                socket.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当然，这里我偷懒也没有设置个数据边界什么的，只是简单的让服务器读取数据然后传递给处理方法。关于并发，坑也是比较多的，只能说各位量力而行吧……下面看一下启动多个Socket连接并发服务器时的输出吧：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-6c71f158edb95db9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并发服务器"></p>
<p>这里都是比较简单的例子，希望各位看官能有耐心的看完。接下来要写的是关于Socket失效的问题。</p>
<h2 id="Socket失效"><a href="#Socket失效" class="headerlink" title="Socket失效"></a>Socket失效</h2><p>在使用Socket的过程中，有的时候会发现无论怎么发送数据，服务器都收不到，而且Java本地也没有任何异常提示，这个时候就需要一个机制来让开发者判断Socket是否失效。目前我了解的方式有两个：心跳包和超时重发，主要原理都是客户端向服务端发送数据，心跳是如果超过一段时间服务器无响应则判定Socket失效，而超时重发可以设置为累计重发满一定次数无响应判断Socket失效。心跳机制的好处是相对比较稳定，客户端很容易就能知道Socket是否断开，一般来说也不是特别耗费资源，有的心跳可能会设置成十几分钟发送一次数据包。但是对于一些特殊的场景，需要保证Socket一定要稳定的（比如通过中间层硬件和底层交互），那么心跳包可能会十分的频繁，这个时候超时重发更加的适合。不过超时重发的前提是客户端每一个数据发送都需要有服务器的响应，不然客户端是无法判断数据发送是否成功的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>View的工作流程——layout&amp;draw</title>
    <url>/2016/10/29/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94layout&amp;draw/</url>
    <content><![CDATA[<h3 id="ViewGroup的measure流程"><a href="#ViewGroup的measure流程" class="headerlink" title="ViewGroup的measure流程"></a>ViewGroup的measure流程</h3><p>上一篇<a href="http://www.jianshu.com/p/2902a557754a">View的工作流程——measure流程</a>中了解到了View的measure与ViewGroup的measure流程有密不可分的联系，这次就把View的笔记做完。</p>
<p>ViewGroup作为容器除了完成自己的measure过程以外，还会遍历去调用所有子元素的measure方法，各个子元素再递归去执行这个过程。ViewGroup是一个抽象类没有重写onMeasure()方法，但是它提供了一个measureChildren方法。这个方法会遍历View去测量他们自身。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="comment">//对子元素遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = children[i];</span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>从上面的代码来看会对满足条件view调用measureChild方法，跟进去看看这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拿到子元素的LayoutParams</span></span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</span><br><span class="line">    <span class="comment">//通过getChildMeasureSpec()创建MeasureSpec</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class="line">            mPaddingLeft + mPaddingRight, lp.width);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class="line">            mPaddingTop + mPaddingBottom, lp.height);</span><br><span class="line">    <span class="comment">//将创建的MeasureSpec传递给子元素</span></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看到首先会拿到子元素的LayoutParams，然后通过getChildMeasureSpec方法来创建子元素的MeasureSpec，这个方法在前一篇中有过介绍，这里就不多赘述了。最后会调用子元素的measure方法并将创建的MeasureSpec传递给子元素。在这里就不具体结合实现onMeasure()的ViewGroup的子类来分析了，留待以后对ViewGroup进行更详细的学习的时候再说。</p>
<h3 id="layout过程"><a href="#layout过程" class="headerlink" title="layout过程"></a>layout过程</h3><p>layout过程主要涉及了两个方法，layout()和onLayout()。layout方法为view和它所有的子元素分配尺寸和位置。layout是Android布局机制（layout mechanism）的第二阶段。在这个阶段，每个parent对他的所有子元素都要调用layout方法去设置他们的位置。子类（派生类）不应该复写这个方法，有子元素的子类应该复写onLayout()方法。在onLayout方法里他们应该调用他们子元素的layout方法。</p>
<p>以上是layout方法的注释，在很多时候源码的注释=api文档，所以推荐各位经常阅读api文档。毕竟别人解析的再好，也是别人的，不如自己去阅读一手的资料，看看写源码的人给我们的一些建议。</p>
<p>稍微歪了一下题，接下来看看layout方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</span><br><span class="line">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldL = mLeft;</span><br><span class="line">    <span class="keyword">int</span> oldT = mTop;</span><br><span class="line">    <span class="keyword">int</span> oldB = mBottom;</span><br><span class="line">    <span class="keyword">int</span> oldR = mRight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class="line">            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class="line">        onLayout(changed, l, t, r, b);</span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class="line"></span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</span><br><span class="line">                    (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</span><br><span class="line">            <span class="keyword">int</span> numListeners = listenersCopy.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</span><br><span class="line">    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上还是有很多代码理解不能，不过还好跟着书走一遍好了，代码中会通过判断layoutMode（大部分情况下都是返回false），最后通过setFrame方法来设置View四个顶点的位置。四个顶点一旦确定，那么View在父容器中的位置也就确定了。接着会调用onLayout方法，在ViewGroup里onLayout就是个抽象方法，找个实现的子类来看看，以下是LinearLayout的onLayout：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">        layoutVertical(l, t, r, b);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        layoutHorizontal(l, t, r, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从字面上来看就是根据LinearLayout的orientation来执行相应的layout，看一下layoutVertical方法的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutVertical</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> paddingLeft = mPaddingLeft;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> childTop;</span><br><span class="line">    <span class="keyword">int</span> childLeft;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Where right end of child should go</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = right - left;</span><br><span class="line">    <span class="keyword">int</span> childRight = width - mPaddingRight;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Space available for child</span></span><br><span class="line">    <span class="keyword">int</span> childSpace = width - paddingLeft - mPaddingRight;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> majorGravity = mGravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> minorGravity = mGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (majorGravity) &#123;</span><br><span class="line">       <span class="keyword">case</span> Gravity.BOTTOM:</span><br><span class="line">           <span class="comment">// mTotalLength contains the padding already</span></span><br><span class="line">           childTop = mPaddingTop + bottom - top - mTotalLength;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// mTotalLength contains the padding already</span></span><br><span class="line">       <span class="keyword">case</span> Gravity.CENTER_VERTICAL:</span><br><span class="line">           childTop = mPaddingTop + (bottom - top - mTotalLength) / <span class="number">2</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">case</span> Gravity.TOP:</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">           childTop = mPaddingTop;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            childTop += measureNullChild(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">final</span> LinearLayout.LayoutParams lp =</span><br><span class="line">                    (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> gravity = lp.gravity;</span><br><span class="line">            <span class="keyword">if</span> (gravity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                gravity = minorGravity;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> layoutDirection = getLayoutDirection();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class="line">            <span class="keyword">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class="line">                <span class="keyword">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class="line">                    childLeft = paddingLeft + ((childSpace - childWidth) / <span class="number">2</span>)</span><br><span class="line">                            + lp.leftMargin - lp.rightMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> Gravity.RIGHT:</span><br><span class="line">                    childLeft = childRight - childWidth - lp.rightMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> Gravity.LEFT:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    childLeft = paddingLeft + lp.leftMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</span><br><span class="line">                childTop += mDividerHeight;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            childTop += lp.topMargin;</span><br><span class="line">            setChildFrame(child, childLeft, childTop + getLocationOffset(child),</span><br><span class="line">                    childWidth, childHeight);</span><br><span class="line">            childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</span><br><span class="line"></span><br><span class="line">            i += getChildrenSkipCount(child, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在遍历子元素之前会先初始化childTop，接着遍历子元素，在处理之后会调用setChildFrame方法来为子元素指定对应的位置，而clipTop的值会不断的增大，这意味着之后的元素会被放到靠下的位置，这和vetical的LinearLayout符合。setChildFrame()中会调用子元素的layout，之前分析过layout方法会为自身和自身的子元素确定位置和尺寸信息。如果这个child也有子元素，那么就会递归调用onLayout而子元素的子元素又会调用layout方法……子子孙孙无穷尽了。玩笑，递归肯定有出口的，那就是最里层的元素。如此处理之后，整个View树就完成了layout过程。</p>
<h3 id="draw"><a href="#draw" class="headerlink" title="draw"></a>draw</h3><p>简单的来说draw就是将view绘制到屏幕上。在调用这个方法之前必须完成onlayout的过程。在自定义view的时候实现onDraw而不是重写draw。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class="line">            (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class="line">    mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Draw traversal performs several drawing steps which must be executed</span></span><br><span class="line"><span class="comment">     * in the appropriate order:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      1. Draw the background</span></span><br><span class="line"><span class="comment">     *      2. If necessary, save the canvas&#x27; layers to prepare for fading</span></span><br><span class="line"><span class="comment">     *      3. Draw view&#x27;s content</span></span><br><span class="line"><span class="comment">     *      4. Draw children</span></span><br><span class="line"><span class="comment">     *      5. If necessary, draw the fading edges and restore layers</span></span><br><span class="line"><span class="comment">     *      6. Draw decorations (scrollbars for instance)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1, draw the background, if needed</span></span><br><span class="line">    <span class="keyword">int</span> saveCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dirtyOpaque) &#123;</span><br><span class="line">        drawBackground(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip step 2 &amp; 5 if possible (common case)</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">    <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</span><br><span class="line">        <span class="comment">// Step 3, draw the content</span></span><br><span class="line">        <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 4, draw the children</span></span><br><span class="line">        dispatchDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Overlay is part of the content and draws beneath Foreground</span></span><br><span class="line">        <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line">            mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step 6, draw decorations (foreground, scrollbars)</span></span><br><span class="line">        onDrawForeground(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// we&#x27;re done...</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个源码的注释还真是详细……主要的流程都已经在源码中标注了出来这里就不做过多的解释了。</p>
<ul>
<li>画背景</li>
<li>有必要的话保存画布层级</li>
<li>画view的内容</li>
<li>画子元素</li>
<li>有必要的话画边缘恢复层级</li>
<li>画装饰</li>
</ul>
<p>到这View的工作流程暂时就过了一遍了，终于为自定义View扫清了一个障碍，不过自定义View还需要更多的练习，光知道原理是没什么用的，还要回用合适的工具、方法来构建出自己想要的东西。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>View探索</tag>
      </tags>
  </entry>
  <entry>
    <title>View的工作流程——measure</title>
    <url>/2016/10/23/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E2%80%94%E2%80%94measure/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天和老爸去医院了，老爸最近腰疼，幸好没什么事，各位也要多多爱惜自己的身体，等身体出了问题就来不及了。好了，闲话到此为止，话说《开发艺术探索》里面不少东西我早就看了，但是因为自己当时水平有限，而且有很多也看不大懂，所以看了忘是挺正常的事。不过感觉随着工作经验的增长，以前大学里上过《操作系统》、《计算机网络》、《数据结构》等一些课都被串到了一起，感觉很好，而且愈发能感觉到自己的不足了。这周的文主要算是一篇读书笔记吧，记一下读《开发艺术探索》第四章和View相关的笔记，至于ViewGroup我觉得还需要过段时间，在沉淀一下再来和各位一起探索一下。而且说真的，这篇文我也是硬着头皮写下来的，因为看源码看着看着发现我疑问越来越多，很多都是现阶段暂时无法解决的，不过问题总是一个一个去解决的，先过一遍View的measure流程再说其他的。</p>
<h3 id="ViewRoot-amp-DecorView"><a href="#ViewRoot-amp-DecorView" class="headerlink" title="ViewRoot &amp; DecorView"></a>ViewRoot &amp; DecorView</h3><p>ViewRoot对应于ViewRootImpl类，在ViewRootImpl类中有如下一段注释:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * The top of a view hierarchy, implementing the needed </span></span><br><span class="line"><span class="comment"> * protocol between View and the WindowManager.</span></span><br><span class="line"><span class="comment"> */</span> </span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>View层最顶部，实现了View和WindowManager间所需的协议。这个类很重要，但是我现在对其理解也不是很深（一是因为读源码无力，一是没有系统的阅读过源码），所以就拿书上的话来说：它是连接WindowManager和DecorView的纽带，View的三大流程均是通过ViewRoot来完成的。在ActivityThread中（同样很有意思的一点是ActivityThread是一个类，并非线程什么的，当然了如果哪一天我读通了这一块回来和各位分享的），当Activity对象被创建完毕后，会将DecorView添加到Window中，同时会创建ViewRootImpl对象，并将ViewRootImpl对象和DecorView建立关联。</p>
<p>接下来直接放结论，尽快进入正题：<br>View的绘制流程是从ViewRoot的performTraversals开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来。</p>
<h3 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h3><p>在之前<a href="http://www.jianshu.com/p/b8795bd82beb">Android自定义View你需要知道的一些东西</a>中我已经简要的介绍过MeasureSpec了，当然在这不敢再麻烦各位去看了，继续简介一下，熟悉的可以跳过这段。</p>
<p>首先咱直接看他的注释，看看注释是怎么解释这玩意的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A MeasureSpec encapsulates the layout requirements passed from parent to child.</span></span><br><span class="line"><span class="comment">     * Each MeasureSpec represents a requirement for either the width or the height.</span></span><br><span class="line"><span class="comment">     * A MeasureSpec is comprised of a size and a mode. There are three possible</span></span><br><span class="line"><span class="comment">     * modes:</span></span><br><span class="line"><span class="comment">     * &lt;dl&gt;</span></span><br><span class="line"><span class="comment">     * &lt;dt&gt;UNSPECIFIED&lt;/dt&gt;</span></span><br><span class="line"><span class="comment">     * &lt;dd&gt;</span></span><br><span class="line"><span class="comment">     * The parent has not imposed any constraint on the child. It can be whatever size</span></span><br><span class="line"><span class="comment">     * it wants.</span></span><br><span class="line"><span class="comment">     * &lt;/dd&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;dt&gt;EXACTLY&lt;/dt&gt;</span></span><br><span class="line"><span class="comment">     * &lt;dd&gt;</span></span><br><span class="line"><span class="comment">     * The parent has determined an exact size for the child. The child is going to be</span></span><br><span class="line"><span class="comment">     * given those bounds regardless of how big it wants to be.</span></span><br><span class="line"><span class="comment">     * &lt;/dd&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;dt&gt;AT_MOST&lt;/dt&gt;</span></span><br><span class="line"><span class="comment">     * &lt;dd&gt;</span></span><br><span class="line"><span class="comment">     * The child can be as large as it wants up to the specified size.</span></span><br><span class="line"><span class="comment">     * &lt;/dd&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/dl&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * MeasureSpecs are implemented as ints to reduce object allocation. This class</span></span><br><span class="line"><span class="comment">     * is provided to pack and unpack the &lt;size, mode&gt; tuple into the int.</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>
<p>最上面那段话的大概意思是一个MeasureSpec封装了一个从父（控件）传给子（控件）的布局要求。每个MeasureSpec代表的不是宽就是高的要求。一个MeasureSpec包含了一个尺寸和一个（测量）模式，这些模式如下：</p>
<ul>
<li><p>UNSPECIFIED<br>父（容器）对子（控件）没有任何限制，子控件可以想要多大就有多大。</p>
</li>
<li><p>EXACTLY<br>父容器已经决定了子控件的精确尺寸，子控件将会变成被给出的约束大小，不管他自己想要变成啥样。</p>
</li>
<li><p>AT_MOST<br>子控件可以和和他想要的规格尺寸一样大。</p>
</li>
</ul>
<p>最后一段话解释了一下为什么这么实现，暂时不需要咱关心这些。看完了注释基本上已经对MeasureSpec有了一个基本的认识了。但是看完这段注释，应该会产生一个疑惑，在注释中说MeasureSpec是父传递给子的，那么最顶层的DecorView的MeasureSpec是如何来的呢？《开发艺术探索》上说是在ViewRootImpl的measureHierarchy方法中创建的，主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth,lp.width);</span><br><span class="line">childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight,lp.width);</span><br><span class="line">performMeasure(childWidthMeasureSpec,childHeightmeasureSpec);</span><br></pre></td></tr></table></figure>
<p>其中desiredWindowWidth和desiredWindowHeight就是屏幕的尺寸，追踪下getRootMeasureSpec()源码看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRootMeasureSpec</span><span class="params">(<span class="keyword">int</span> windowSize, <span class="keyword">int</span> rootDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class="line">        <span class="comment">// Window can&#x27;t resize. Force root view to be windowSize.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class="line">        <span class="comment">// Window can resize. Set max size for root view.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到该方法中对于match_parent、wrap_content和其余情况的处理：</p>
<ul>
<li><p>LayoutParams.MATCH_PARENT：采用精确模式测量，大小是窗口大小</p>
</li>
<li><p>LayoutParams.WRAP_CONTENT：大小不定，最大是窗口大小</p>
</li>
<li><p>其他：结合我们平时写xml和代码的经验，此处其他应该就是我们制定了大小（比如100dp），大小为指定大小。</p>
</li>
</ul>
<h3 id="View的MeasureSpec的获取"><a href="#View的MeasureSpec的获取" class="headerlink" title="View的MeasureSpec的获取"></a>View的MeasureSpec的获取</h3><p>上面的MeasureSpec注释里说了，是从父传递到子的，那么View很明显是一个子布局，让我们上ViewGroup里找找child是如何获取MeasureSpec的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ask all of the children of this view to measure themselves, taking into</span></span><br><span class="line"><span class="comment"> * account both the MeasureSpec requirements for this view and its padding.</span></span><br><span class="line"><span class="comment"> * We skip children that are in the GONE state The heavy lifting is done in</span></span><br><span class="line"><span class="comment"> * getChildMeasureSpec.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> widthMeasureSpec The width requirements for this view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> heightMeasureSpec The height requirements for this view</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = children[i];</span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>老规矩，先让我这个渣渣来翻译一下注释……<br>遍历View去测量他们自身，既要考虑MeasureSpec的要求又要考虑padding。跳过GONE状态的（不测量这个状态的View），更繁重的事在getChildMeasureSpec完成。</p>
<p>很明显，咱得看一下getChildMeasureSpec方法了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Does the hard part of measureChildren: figuring out the MeasureSpec to</span></span><br><span class="line"><span class="comment"> * pass to a particular child. This method figures out the right MeasureSpec</span></span><br><span class="line"><span class="comment"> * for one dimension (height or width) of one child view.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The goal is to combine information from our MeasureSpec with the</span></span><br><span class="line"><span class="comment"> * LayoutParams of the child to get the best possible results. For example,</span></span><br><span class="line"><span class="comment"> * if the this view knows its size (because its MeasureSpec has a mode of</span></span><br><span class="line"><span class="comment"> * EXACTLY), and the child has indicated in its LayoutParams that it wants</span></span><br><span class="line"><span class="comment"> * to be the same size as the parent, the parent should ask the child to</span></span><br><span class="line"><span class="comment"> * layout given an exact size.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> spec The requirements for this view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> padding The padding of this view for the current dimension and</span></span><br><span class="line"><span class="comment"> *        margins, if applicable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> childDimension How big the child wants to be in the current</span></span><br><span class="line"><span class="comment"> *        dimension</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a MeasureSpec integer for the child</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent asked to see how big we want to be</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... let him have it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size... find out how big it should</span></span><br><span class="line">            <span class="comment">// be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size.... find out how</span></span><br><span class="line">            <span class="comment">// big it should be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>咱继续翻译一下……<br>困难的事咱来做：算出MeasureSpec传递给<br>一个child。这个方法为一个子view的一个尺寸（高或宽）算出正确的MeasureSpec。</p>
<p>他的目的是组合MeasureSpec和LayoutParams的信息让child获取最好的可能结果。例如：如果这个view知道他的尺寸（因为测量模式是EXACTLY），这个child已经指出了他的LayoutParams，他想和他的父容器有一样的尺寸（match_parent），这时父容器应该要求child布局成被给的精确尺寸。</p>
<p>从上面的注释我们可以了解到，子View的MeasureSpec并不是由其自身的LayoutParams决定的，而是由其父容器和其自身的LayoutParams一同决定的。接下来看一下代码，看看究竟是怎么操作的：</p>
<ul>
<li><p>首先从ViewGroup的宽/高的MeasureSpec中获取到对应的specMode，然后根据不同的mdoe去执行不同的操作</p>
</li>
<li><p>EXACTLY：如果子View指定了精确值的大小，那么测量模式是EXACTLY，尺寸是传入的childDimension，这两个值将会被打包成一个MeasureSpec并返回。如果childDimension等于MATCH_PARENT，那么就将上面获取到的自身尺寸和EXACTLY模式打包成一个MeasureSpec打包并返回。如果childDimension等于WRAP_CONTENT，那么将自身尺寸赋给孩子的尺寸，让子View的尺寸不要大于父容器就行了，将这个尺寸和AT_MOST模式打包并返回。</p>
</li>
</ul>
<p>之后的AT_MOST和UNSPECIFIED测量模式和EXACTLY的套路差不多，就不一一看过去了，《Android开发艺术探索》上总结了一个表格：</p>
<p>|columns:childLayoutParams/rows:parentSpecMode|EXACTILY|AT_MOST|UNSPECIFIED<br>| ———— |:—————–: | ——: |<br>|dp/px|EXACTLY/childSize|EXACTLY/childSize|EXACTLY/childSize|<br>|match_parent|EXACTLY/parentSize|AT_MOST/parentSize|UNSPECIFIED/0|<br>|wrap_content|AT_MOST/parentSize|AT_MOST/parentSize|UNSPECIFIED/0|</p>
<p>最后要强调一句和《开发艺术探索》上一样的话，以上的表格并非是经验总结，而是将代码具现为一个表格罢了。</p>
<h3 id="View的measure流程"><a href="#View的measure流程" class="headerlink" title="View的measure流程"></a>View的measure流程</h3><p>终于填完了几个比较重要的坑，可以来讲讲View的measure流程了。View的测量是由measure()方法实现的 ，在measure()方法中会去调用onMeasure()方法，看一下View的onMeasure()方法的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于这个方法有一些要注意的地方，在以前的<a href="http://www.jianshu.com/p/b8795bd82beb">Android自定义View你需要知道的一些东西</a>都有说过，而且这个方法的注释里都有写你需要注意的东西，感兴趣的可以去看看，这里就不赘述了。以上方法调用了setMeasuredDimension方法设置View宽高，因此我们看一下他是如何获取宽高的就可以了，不多说，看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = size;</span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        result = size;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        result = specSize;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看得出来，这里只是进行了一些简单的判断和赋值操作，如果测量模式是AT_MOST和EXACTLY：那么就返回View测量后的大小，如果是UNSPECIFIED模式那么就返回传入的size值。接下来看看传入的这个size值是怎么获取的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从以上代码我们可以看出，如果view有背景则从最小宽度和background的宽度中返回较大的那个，如果没有背景则返回最小宽度，这个最小宽度我们可以通过xml或者setMinimumWidth来设置，默认为0。</p>
<p>接下来通过一个问题来回忆一下今天所了解的东西：在View中使用wrap_content为什么效果和match_parent效果一样？<br>首先这个问题需要去ViewGroup里看看，因为View的MeasureSpec是从ViewGroup中传递而来的，前面我们画的那张表格就是处理代码的具现，我们可以直接查表~</p>
<p>查表可知在match_parent和wrap_content这两种情况下传递给View的size都是parentSize（忽略UNSPECIFIED的情况），那么再看看View有没有对这两种情况做特殊的处理就行了。而在上面的getDefaultSize方法里可以看到AT_MOST和EXACTLY两种模式返回值都是相同的，因此在自定义继承于View的控件时需要我们去重写onMeasure()方法来处理wrap_content的情况。</p>
<p>读到这你可能会发现View和ViewGroup这俩货根本分不开，事实也是如此，但是在这我就不继续记我的笔记了，因为有些事我也没想明白，所以留待以后填坑吧（立了个flag）。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>还有一个ViewGroup的measure流程这里并没有继续了，想留着以后再来填这个坑吧。记得原来读《Android开发艺术探索》都是：“哦，原来是这样的” 状态，现在读则是会对一些代码的流程产生疑惑，而这些疑惑以我现在水平还是有些难以解决的。不过学习就是不断完善和不断有新的问题的过程，如同我们初中高中所学的物理一样，很多时候我们学到的只是相对正确的知识，但是在以后不断学习的过程中，我们可以不断的纠正自己以前的错误和带有局限的理解。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>View探索</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单好用的LoadingDialog</title>
    <url>/2016/11/06/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84LoadingDialog/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>还记得以前在网上看到过一个LoadingDialog，感觉还挺不错的，可惜只有一个Loading，配套的错误和正确的反馈都没，一直觉得挺遗憾的，今天花了一些时间把他补全了。今天上多说找了下，找到了原来我的评论，放上<a href="https://ydmmocoo.github.io/2016/06/24/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E4%B8%ADDialog/">原作者的文章地址</a>。我做的事就是增强LoadingDialog的功能，新增两个自定义View。今天收到了两位前辈不错的建议，后续更新即将到来~</p>
<p>感谢<a href="http://www.jianshu.com/users/c37d344afd22/latest_articles">小路</a>同学指出我后面反馈的圆的方向和之前的方向不一致的情况，已修复，因为截gif怪麻烦的，图就不改了。。。</p>
<h3 id="使用方法与效果图"><a href="#使用方法与效果图" class="headerlink" title="使用方法与效果图"></a>使用方法与效果图</h3><p>展示一个loading dialog：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> LoadingDialog(<span class="keyword">this</span>)</span><br><span class="line">    .setLoadingText(<span class="string">&quot;加载中...&quot;</span>)<span class="comment">//设置loading时显示的文字</span></span><br><span class="line">	.show();</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-6ec5b30b9fd59023.gif?imageMogr2/auto-orient/strip" alt="loading.gif"></p>
<p>展示一个loading dialog并在合适的时机返回正确或者错误的反馈给用户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LoadingDialog ld = <span class="keyword">new</span> LoadingDialog(<span class="keyword">this</span>);</span><br><span class="line">ld.setLoadingText(<span class="string">&quot;加载中&quot;</span>)</span><br><span class="line">         .setSuccessText(<span class="string">&quot;加载成功&quot;</span>)<span class="comment">//显示加载成功时的文字</span></span><br><span class="line">         <span class="comment">//.setFailedText(&quot;加载失败&quot;)</span></span><br><span class="line">         .setInterceptBack(intercept_back_event)</span><br><span class="line">         .setLoadSpeed(speed)</span><br><span class="line">         .setRepeatCount(repeatTime)</span><br><span class="line">         .setDrawColor(color)</span><br><span class="line">         .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//在你代码中合适的位置调用反馈</span></span><br><span class="line">ld.loadSuccess();</span><br><span class="line"><span class="comment">//ld.loadFailed();</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3af85bae65a0b51d.gif?imageMogr2/auto-orient/strip" alt="loadSuccess.gif"><br><img src="http://upload-images.jianshu.io/upload_images/1976147-efca9a1ec133b457.gif?imageMogr2/auto-orient/strip" alt="gif
"></p>
<p>还是同样的蜜汁小圆点。。。因为不摸他 加载结束他就不录了，辣鸡AS。。。</p>
<p>如果你不想要这个动态画出来的效果，你也可以通过closeSuccessAnim()或者closeFailedAnim()关闭它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LoadingDialog ld = <span class="keyword">new</span> LoadingDialog(<span class="keyword">this</span>);</span><br><span class="line">ld.setLoadingText(<span class="string">&quot;加载中&quot;</span>)</span><br><span class="line">         .setSuccessText(<span class="string">&quot;加载成功&quot;</span>)</span><br><span class="line">         .setInterceptBack(intercept_back_event)</span><br><span class="line">         .setLoadSpeed(speed)</span><br><span class="line">         .closeSuccessAnim()</span><br><span class="line">         .setDrawColor(color)</span><br><span class="line">         .setRepeatCount(repeatTime)</span><br><span class="line">         .show();</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-ea1a4a0b33393d5d.gif?imageMogr2/auto-orient/strip" alt="fail_no_anim.gif"></p>
<p>提供你使用的一些方法：</p>
<ul>
<li>setSize(int size)：可以通过这个来设置弹框的尺寸，首先我这要求长宽相等的，所以只给一个参数设置他的尺寸就行了。再者我在自定义View里也会把不同的长宽处理成一样的。在项目中有一个SizeUtils，在设置尺寸的时候注意用这个工具将dp转换成px。</li>
<li>show()：展示你设置的loadingDialog</li>
<li>close()：关闭动画释放一些资源，关闭dialog</li>
<li>setLoadingText(String msg)：设置Loading时的文字</li>
<li>setSuccessText(String msg)：设置Loading成功时文字</li>
<li>setFailed(String msg)：设置Loading失败时的文字</li>
<li>loadSuccess()：调用这个方法展示一个成功的反馈</li>
<li>loadFailed()：调用这个方法展示一个失败的反馈</li>
<li>closeSuccessAnim()：关闭成功反馈的动态绘制</li>
<li>closeFailedAnim()：关闭失败反馈的动态绘制</li>
<li>setInterceptBack(boolean interceptBack)：是否拦截用户back，如果设置为true，那么一定要调用close()，或者loadSuccess()、loadFailed()这二者中的一个，不然出现无限loading的情况我相信你不会想看到的。</li>
<li>getInterceptBack()：返回dialog是否拦截的布尔值</li>
<li>setLoadSpeed(Speed speed)：参数是一个枚举，一共两个值，SPEED_ONE是比较慢的，SPEED_TWO比前一个快一点，为毛不再加？处理起来比较麻烦…</li>
<li>setDrawColor(int color)：可以改变绘制的颜色，圆和里面的勾啊，叉啊的颜色，不建议你用，不一定好看。</li>
<li>setRepeatCount(int count)：设置动态绘制的次数，比如你设置了值为1，那么除了加载的时候绘制一次，还会再绘制一次。如果你有这个需要，可以设置他的重绘次数。</li>
<li>setShowTime(long time)：设置反馈结果窗口的展示时间，默认为1秒，如果有绘制过程，则从绘制完成之后算。</li>
</ul>
<p>目前还有一些没完善，在后续的更新中搞定吧。<br>github地址：<a href="https://github.com/ForgetAll/LoadingDialog">https://github.com/ForgetAll/LoadingDialog</a></p>
<h3 id="如何在你的项目中使用"><a href="#如何在你的项目中使用" class="headerlink" title="如何在你的项目中使用"></a>如何在你的项目中使用</h3><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>Step 1. 把这玩意加到你的build.gradle里:</p>
<pre><code>allprojects &#123;
    repositories &#123;
        ...
        maven &#123; url &quot;https://jitpack.io&quot; &#125;
    &#125;
&#125;
</code></pre>
<p>Step 2. 加上这个依赖</p>
<pre><code>dependencies &#123;
        compile &#39;com.github.ForgetAll:LoadingDialog:v1.0.1&#39;
&#125;
</code></pre>
<p>最后我的个人博客：<br><a href="http://xiasuhuei321.com/">http://xiasuhuei321.com</a><br>对了，最近我的博客挂了，周末看下怎么回事吧，我去。<br>其实我还是简书更的比较勤。。。不过象征性的挂一下吧。。。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>View探索</tag>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>Python入门笔记（一）</title>
    <url>/2018/06/02/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>以前虽然用 python 写过一些小东西，但是一直都没有系统的看过 python 的语法。这里想开一个系列笔记，记录一下我比较在意的一些知识点，比较基础，但是也比较跳跃。</p>
<h2 id="列表-amp-序列"><a href="#列表-amp-序列" class="headerlink" title="列表 &amp; 序列"></a>列表 &amp; 序列</h2><p>有两种方式构造列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">list2 = <span class="built_in">list</span>()</span><br></pre></td></tr></table></figure>

<p>跟 Java 中的集合不同，python 中向列表添加元素的方式是 append，并不是 add，有趣的是 Java 中的字符构造 StringBuilder 也是通过 append 方法向 StringBuilder 中追加字符。接下来记一下 python 中关于序列的一些操作，个人感觉是非常方便的，比 Java 要方便的多。</p>
<span id="more"></span>

<p>python 可以通过索引来操作序列中的元素，接下来就通过代码感受一下吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list1=&#x27;</span>, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">// 输出：</span><br><span class="line">list1= [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>这里通过 0 索引来访问第一个元素，中规中矩，没啥，通过 -1 来访问最后一个元素这就比较骚了。还记得 Java 里是怎么集合的最后一个元素的么？list.get(list.size() - 1)，事实上我刚开始写 python 时，我也是这么去拿序列的最后一个元素的：list[len(list) - 1]。当然了，这也许会让你觉得也不过如此，虽然用 -1 去访问最后一个元素，但用另外一种方式也不见得有多不方便。那么继续，还是用上面创建的列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(list1[::<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">// 输出</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>第一行，通过索引拿到前三个元素。第二行，通过-2索引访问倒数第二个到最后一个元素。第三行，访问所有元素，步长为3，也就是每隔3取一次元素。第四行倒序访问所有元素。如果你刷过数组相关的算法题，你应该能明白计算索引取相应的元素是最令人头疼的一件事，而 python 则大大简化了这件事。关于列表只想介绍到这，元组是不可变序列，有些类似于 Java 中用 final 修饰的变量。</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>和 Java 一样，python 也有用于遍历列表的 for 循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line">// 输出</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>有的时候可能需要索引，不仅仅是遍历：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;item=&#x27;</span>, list1[i], <span class="string">&#x27; index=&#x27;</span>, i)</span><br><span class="line">    </span><br><span class="line">// 输出</span><br><span class="line">item= <span class="number">0</span>  index= <span class="number">0</span></span><br><span class="line">item= <span class="number">1</span>  index= <span class="number">1</span></span><br><span class="line">item= <span class="number">2</span>  index= <span class="number">2</span></span><br><span class="line">item= <span class="number">3</span>  index= <span class="number">3</span></span><br><span class="line">item= <span class="number">4</span>  index= <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>while 循环和 Java 中的类似：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="built_in">len</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(list1[x])</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">// 输出</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>python 中的条件判断语句 if - elif，与我平时使用的语言都有些不一样，第一次使用的时候写出 else if 发现还错了，当时还奇怪难道 python 没有 else if。。。这一次暂时就记到这里。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>入门学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 DownloadManager 实现自动下载 APK 和更新（适配到8.0）</title>
    <url>/2018/07/17/%E4%BD%BF%E7%94%A8%20DownloadManager%20%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD%20APK%20%E5%92%8C%E6%9B%B4%E6%96%B0%EF%BC%88%E9%80%82%E9%85%8D%E5%88%B0%208.0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="使用-DownloadManager-实现自动下载-APK-和更新（适配到-8-0）"><a href="#使用-DownloadManager-实现自动下载-APK-和更新（适配到-8-0）" class="headerlink" title="使用 DownloadManager 实现自动下载 APK 和更新（适配到 8.0）"></a>使用 DownloadManager 实现自动下载 APK 和更新（适配到 8.0）</h2><p>最近有一个强制更新的需求，当然对于强制更新，我的内心是拒绝的。但是有的时候的确有应用的场景，比如服务器接口由于一些考量改变了，一些协议也改变了，那么老的客户端可能就会出现闪退的情况，一般可以通过几个版本的迭代解决这个问题，但是如果几个版本后还是有一些用户停留在老版本，那么强制更新就很有必要了。当然了，这里所谓的强制更新也就是你不更新到最新版本，会让你无法使用，并提醒你更新。普通的应用只能做到这个程度了，因为你没有 root 权限是做不到静默更新的。</p>
<p>这里只是记录一下在实现的过程中需要注意的几个点：</p>
<ul>
<li>Android 6.0 权限问题</li>
<li>Android 7.0 File Uri 适配问题</li>
<li>Android 8.0 权限申请问题</li>
<li>利用 md5 防止重复下载 apk</li>
</ul>
<p>当然，并不会每一个都展开写，因为有些东西真的出来挺久了，还没去看的话只能说你已经有点落后于 Android 版本了。本文也不是详细介绍如何使用 DownloadManager 的文，对这玩意感兴趣的可以去看看 api。</p>
<p>这里我们至少需要后台提供哪些信息呢？</p>
<ul>
<li>后台目前的 apk 版本号</li>
<li>下载地址</li>
<li>apk 的 md5</li>
</ul>
<p>这里的版本号，最好对应我们 Android 中的 versionCode，用这个来判断最直观。下文所有实现均为 Kotlin 代码！</p>
<span id="more"></span>


<h2 id="6-0-权限适配"><a href="#6-0-权限适配" class="headerlink" title="6.0 权限适配"></a>6.0 权限适配</h2><p>这里不展开讲，在下载之前记得申请好读写内存权限，目前我用的是 RxPermission。</p>
<h2 id="Android-7-0-File-Uri-适配问题"><a href="#Android-7-0-File-Uri-适配问题" class="headerlink" title="Android 7.0 File Uri 适配问题"></a>Android 7.0 File Uri 适配问题</h2><p>首先在哪用到了 File Uri 呢，在安装 apk 的时候会用到：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> f = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), <span class="string">&quot;xxx.apk&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">intent.setDataAndType(Uri.fromFile(f), <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">context.startActivity(intent)</span><br></pre></td></tr></table></figure>

<p>Android 7.0 以上的版本继续使用这种代码会直接抛异常，所以需要使用 File Provider 来做一下适配，首先在清单文件中注册 provider：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.util.InstallProvider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;applicationId&#125;.installapk.provider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:replace</span>=<span class="string">&quot;android:authorities&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">&quot;@xml/remeet_path&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>看看 xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">external-path</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;download&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">path</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>最后在对应的包下新建对应的 Provider：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haisong.remeet.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.FileProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2018/3/16.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstallProvider</span> <span class="title">extends</span> <span class="title">FileProvider</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整的适配代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">installApk</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> f = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), <span class="string">&quot;xxx.apk&quot;</span>)</span><br><span class="line"><span class="comment">//            val f = File(&quot;sdcard/remeet/apk/remeet.apk&quot;)</span></span><br><span class="line">            <span class="keyword">if</span> (ChatFlow.status == ChatControl.NORMAL) &#123;</span><br><span class="line">                <span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                    <span class="keyword">val</span> apkUri = FileProvider.getUriForFile(context, <span class="string">&quot;<span class="subst">$&#123;context.applicationInfo.packageName&#125;</span>.installapk.provider&quot;</span>, f)</span><br><span class="line">                    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class="line">                    intent.setDataAndType(apkUri, <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    intent.setDataAndType(Uri.fromFile(f), <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                context.startActivity(intent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            XLog.i(TAG, <span class="string">&quot;安装失败&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="Android-8-0-权限申请"><a href="#Android-8-0-权限申请" class="headerlink" title="Android 8.0 权限申请"></a>Android 8.0 权限申请</h2><p>上面的代码适配 7.0，最近在自己 8.0 的手机上跑的时候发现没有弹出安装的界面，惊的我赶紧去看了一眼 8.0 行为变更，没找到，只能搜索了一下，发现了端倪：</p>
<ul>
<li>Android8.0的诸多新特性中有一个非常重要的特性：未知来源应用权限</li>
</ul>
<p>不过我去看了一下也没看到这玩意。。。先不管那么多，的确有这个问题，然后我向清单文件中加了一行代码就完事了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="利用-md5-防止重复下载-apk"><a href="#利用-md5-防止重复下载-apk" class="headerlink" title="利用 md5 防止重复下载 apk"></a>利用 md5 防止重复下载 apk</h2><p>首先奉上计算文件 md5 的方法（Java 实现）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileMD5</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getFileMD5(<span class="keyword">new</span> File(path));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileMD5</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line"></span><br><span class="line">        StringBuffer md5 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] dataBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nread = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((nread = in.read(dataBytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            md.update(dataBytes, <span class="number">0</span>, nread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] mdbytes = md.digest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// convert the byte to hex format</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mdbytes.length; i++) &#123;</span><br><span class="line">            md5.append(Integer.toString((mdbytes[i] &amp; <span class="number">0xff</span>) + <span class="number">0x100</span>, <span class="number">16</span>).substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> md5.toString().toLowerCase();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是这里计算文件的 md5 是一个耗时的操作，所以需要我们新开一个线程去做这件事。</p>
<p>接下来奉上我小改之后的代码，各位可以根据需要自己改，或者看一下我实现的思路：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2018/3/6.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在 wifi 状态下自动下载 apk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后会将 activity 置 null，所以不用担心静态 activity 引用导致的内存泄漏问题</span></span><br><span class="line"><span class="meta">@SuppressWarnings(<span class="meta-string">&quot;all&quot;</span>)</span></span><br><span class="line"><span class="keyword">object</span> UpdateManager &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">&quot;UpdateManager&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> updateReceiver = InstallReceiver()</span><br><span class="line">    <span class="keyword">var</span> activity: Activity? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> versionName: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> md5: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> downloadManager: DownloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) <span class="keyword">as</span> DownloadManager</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> downloadFlag = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始下载监听</span></span><br><span class="line">    <span class="keyword">var</span> downloadStart = &#123;&#125;</span><br><span class="line">    <span class="comment">// 下载结束监听</span></span><br><span class="line">    <span class="keyword">var</span> downloadFinish = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> relogin = &#123;&#125;</span><br><span class="line">    <span class="comment">// 进度监听</span></span><br><span class="line">    <span class="keyword">var</span> progressListener: (progress: <span class="built_in">Float</span>) -&gt; <span class="built_in">Unit</span> = &#123; p -&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">checkUpdate</span><span class="params">(activity: <span class="type">Activity</span>)</span></span> = asyncUI &#123;</span><br><span class="line">        <span class="keyword">this</span><span class="symbol">@UpdateManager</span>.activity = activity</span><br><span class="line">        <span class="comment">// 如果正在更新，那么直接调用 relogin</span></span><br><span class="line">        <span class="keyword">if</span> (Client.isUpdating) &#123;</span><br><span class="line">            relogin.invoke()</span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@asyncUI</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        activity.registerReceiver(updateReceiver, filter)</span></span><br><span class="line">		<span class="comment">// 获取客户端 versionCode</span></span><br><span class="line">        <span class="keyword">val</span> versionCode = getVersionCode()</span><br><span class="line">        XLog.i(TAG, <span class="string">&quot;versionCode=<span class="variable">$versionCode</span>&quot;</span>)</span><br><span class="line">		<span class="comment">// 请求后台接口，这里看自己的接口是如何实现的</span></span><br><span class="line">        <span class="keyword">val</span> res = RemeetService.checkUpdate(CheckUpdate(versionCode, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//        val res = RemeetService.checkUpdate(CheckUpdate(0, 1)) // test</span></span><br><span class="line">                .executeOnBg(LoadingDialog(activity))</span><br><span class="line">                .await()</span><br><span class="line">                .dealErrorAndFailed(ExceptionHandleType.TOAST)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> info = res.<span class="keyword">data</span></span><br><span class="line">        <span class="comment">// 如果后台给的更新标识为 false，那么不下载(可能 apk 有问题，先不执行更新的逻辑)</span></span><br><span class="line">        <span class="keyword">if</span> (!info.downloadFlag) <span class="keyword">return</span><span class="symbol">@asyncUI</span></span><br><span class="line">		</span><br><span class="line">        Client.serverApkMd5 = info.md5</span><br><span class="line">        Client.serverVersionCode = info.versionId</span><br><span class="line">		</span><br><span class="line">        versionName = info.versionName</span><br><span class="line">        md5 = info.md5</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比对服务端版本号，确认服务端是否是高版本</span></span><br><span class="line">        <span class="keyword">if</span> (info.versionId &gt; versionCode) &#123;</span><br><span class="line">            XLog.i(TAG, <span class="string">&quot;客户端需要更新&quot;</span>)</span><br><span class="line"></span><br><span class="line">            asyncUI &#123;</span><br><span class="line">                <span class="comment">// 相当于开启了一个新线程</span></span><br><span class="line">                bg &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 首先检查本地文件</span></span><br><span class="line">                        checkAndDeleteDownloadFiles(info)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                        e.printStackTrace()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.await()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            XLog.i(TAG, <span class="string">&quot;客户端: <span class="variable">$versionCode</span> &gt;= 服务端: <span class="subst">$&#123;info.versionId&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(url: <span class="type">String</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        Client.isUpdating = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">val</span> request = DownloadManager.Request(Uri.parse(url))</span><br><span class="line">        <span class="comment">//设置下载的文件存储的地址，我们这里将下载的apk文件存在/Download目录下面</span></span><br><span class="line">        <span class="keyword">val</span> f = File(<span class="string">&quot;sdcard/remeet/apk&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (!f.exists()) f.mkdirs()</span><br><span class="line">        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, <span class="string">&quot;remeet-<span class="subst">$&#123;getVersionName()&#125;</span>.apk&quot;</span>)</span><br><span class="line">        <span class="comment">//设置现在的文件可以被MediaScanner扫描到。</span></span><br><span class="line">        request.allowScanningByMediaScanner()</span><br><span class="line">        <span class="comment">//设置通知的标题</span></span><br><span class="line">        request.setTitle(<span class="string">&quot;下载&quot;</span>)</span><br><span class="line">        <span class="comment">//设置下载的时候Notification的可见性。</span></span><br><span class="line">        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE)</span><br><span class="line">        <span class="comment">//设置下载文件类型</span></span><br><span class="line">        request.setMimeType(<span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">        <span class="comment">// 指定在WIFI状态下，执行下载操作</span></span><br><span class="line">        request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI)</span><br><span class="line"></span><br><span class="line">        XLog.i(TAG, <span class="string">&quot;正在更新中&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> downloadManager.enqueue(request)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPath</span><span class="params">()</span></span>: Uri &#123;</span><br><span class="line">        <span class="keyword">val</span> f = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)</span><br><span class="line">        <span class="keyword">return</span> Uri.withAppendedPath(Uri.fromFile(f), <span class="string">&quot;xxx.apk&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新下载进度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateProgress</span><span class="params">(id: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> query = DownloadManager.Query()</span><br><span class="line">        <span class="comment">// 500ms 查询一次进度</span></span><br><span class="line">        <span class="keyword">val</span> timer = Timer()</span><br><span class="line">        <span class="keyword">val</span> task = <span class="keyword">object</span> : TimerTask() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="keyword">val</span> cursor = downloadManager.query(query.setFilterById(id))</span><br><span class="line">                <span class="keyword">if</span> (cursor != <span class="literal">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">                    <span class="comment">// 已经下载文件大小</span></span><br><span class="line">                    <span class="keyword">val</span> downloadSize = cursor.getInt(cursor.getColumnIndexOrThrow(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR))</span><br><span class="line">                    <span class="comment">// 下载文件的总大小</span></span><br><span class="line">                    <span class="keyword">val</span> fileSize = cursor.getInt(cursor.getColumnIndexOrThrow(DownloadManager.COLUMN_TOTAL_SIZE_BYTES))</span><br><span class="line">                    <span class="comment">// percent</span></span><br><span class="line">                    <span class="keyword">val</span> percent = downloadSize.toFloat() / fileSize</span><br><span class="line"><span class="comment">//                    XLog.i(TAG, &quot;下载进度：$percent&quot;)</span></span><br><span class="line">                    progressListener.invoke(percent * <span class="number">100</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer.schedule(task, <span class="number">0</span>, <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getVersionCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> info = context.packageManager.getPackageInfo(context.packageName, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> info.versionCode</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getVersionName</span><span class="params">()</span></span> = versionName</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">installApk</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> f = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), <span class="string">&quot;xxx.apk&quot;</span>)</span><br><span class="line"><span class="comment">//            val f = File(&quot;sdcard/remeet/apk/remeet.apk&quot;)</span></span><br><span class="line">            <span class="keyword">if</span> (ChatFlow.status == ChatControl.NORMAL) &#123;</span><br><span class="line">                <span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK</span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">                    <span class="keyword">val</span> apkUri = FileProvider.getUriForFile(context, <span class="string">&quot;<span class="subst">$&#123;context.applicationInfo.packageName&#125;</span>.installapk.provider&quot;</span>, f)</span><br><span class="line">                    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class="line">                    intent.setDataAndType(apkUri, <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    intent.setDataAndType(Uri.fromFile(f), <span class="string">&quot;application/vnd.android.package-archive&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                context.startActivity(intent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            XLog.i(TAG, <span class="string">&quot;安装失败&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">unregisterReceiver</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkAndDeleteDownloadFiles</span><span class="params">(info: <span class="type">Update</span>)</span></span> &#123;</span><br><span class="line">        XLog.i(TAG, <span class="string">&quot;file name: xxx.apk&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> f = File(<span class="string">&quot;/sdcard/Download&quot;</span>)</span><br><span class="line">        XLog.i(TAG, <span class="string">&quot;运行到这了&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (file <span class="keyword">in</span> f.listFiles()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.name == <span class="string">&quot;xxx.apk&quot;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 检查 md5</span></span><br><span class="line">                    <span class="keyword">val</span> fMd5 = MD5.getFileMD5(file.absolutePath)</span><br><span class="line">                    XLog.i(TAG, <span class="string">&quot;服务端 md5: <span class="variable">$md5</span>\n客户端本地文件 md5: <span class="variable">$fMd5</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> (fMd5 == md5) &#123;</span><br><span class="line">                        <span class="comment">// md5 相同无需重新下载 apk</span></span><br><span class="line">                        XLog.i(TAG, <span class="string">&quot;本地已有下载完成的最新apk&quot;</span>)</span><br><span class="line"><span class="comment">//                        downloadStart.invoke()</span></span><br><span class="line">                        downloadFlag = <span class="literal">false</span></span><br><span class="line">                        showInstallDialog(info)</span><br><span class="line"><span class="comment">//                        installApk()</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果 md5 不相等，重新下载</span></span><br><span class="line">                        downloadFlag = <span class="literal">true</span></span><br><span class="line">                        file.delete()</span><br><span class="line">                        XLog.i(TAG, <span class="string">&quot;本地文件不完整，重新下载&quot;</span>)</span><br><span class="line">                        showDownloadDialog(info)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (downloadFlag) &#123;</span><br><span class="line">                XLog.i(TAG, <span class="string">&quot;本地无此文件，开始下载&quot;</span>)</span><br><span class="line">                showDownloadDialog(info)</span><br><span class="line"><span class="comment">//                downloadStart.invoke()</span></span><br><span class="line"><span class="comment">//                update(info.updateUrl.let &#123;</span></span><br><span class="line"><span class="comment">//                    if (it.startsWith(&quot;http&quot;) || it.startsWith(&quot;https&quot;))</span></span><br><span class="line"><span class="comment">//                        it</span></span><br><span class="line"><span class="comment">//                    else</span></span><br><span class="line"><span class="comment">//                        &quot;http://$it&quot;</span></span><br><span class="line"><span class="comment">//                &#125;)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            XLog.i(TAG, <span class="string">&quot;Download 文件夹不存在！？&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private fun updateDialog() &#123;</span></span><br><span class="line"><span class="comment">//        activity!!.runOnUiThread &#123;</span></span><br><span class="line"><span class="comment">//            if (ChatFlow.status != ChatFlow.CHATTING)</span></span><br><span class="line"><span class="comment">//                activity!!.showDialog &#123;</span></span><br><span class="line"><span class="comment">//                    title(&quot;提示&quot;)</span></span><br><span class="line"><span class="comment">//                    content(&quot;是否更新到最新版本？&quot;)</span></span><br><span class="line"><span class="comment">//                    positiveText(&quot;更新&quot;)</span></span><br><span class="line"><span class="comment">//                    negativeText(&quot;取消&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    onPositive &#123; _, _ -&gt;</span></span><br><span class="line"><span class="comment">//                        installApk()</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isWifiConnected</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) <span class="keyword">as</span> ConnectivityManager</span><br><span class="line">        <span class="keyword">val</span> info = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="literal">null</span>) <span class="keyword">return</span> info.isConnected</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isMobileConnect</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) <span class="keyword">as</span> ConnectivityManager</span><br><span class="line">        <span class="keyword">val</span> info = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="literal">null</span>) <span class="keyword">return</span> info.isConnected</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clearCallback</span><span class="params">()</span></span> &#123;</span><br><span class="line">        downloadStart = &#123;&#125;</span><br><span class="line">        downloadFinish = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showInstallDialog</span><span class="params">(info: <span class="type">Update</span>)</span></span> &#123;</span><br><span class="line">        asyncUI &#123;</span><br><span class="line">            activity?.showDialog &#123;</span><br><span class="line">                title(<span class="string">&quot;发现新版本，已经下载完毕&quot;</span>)</span><br><span class="line">                content(info.updateContent)</span><br><span class="line">                positiveText(<span class="string">&quot;安装&quot;</span>)</span><br><span class="line">                canceledOnTouchOutside(<span class="literal">false</span>)</span><br><span class="line">                keyListener &#123; _, keyCode, e -&gt;</span><br><span class="line">                    <span class="keyword">if</span> (e.keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">                        XLog.i(TAG, <span class="string">&quot;拦截返回事件&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span><span class="symbol">@keyListener</span> <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@keyListener</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                onPositive &#123; _, _ -&gt;</span><br><span class="line">                    asyncUI &#123;</span><br><span class="line">                        installApk()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showDownloadDialog</span><span class="params">(info: <span class="type">Update</span>)</span></span> &#123;</span><br><span class="line">        asyncUI &#123;</span><br><span class="line">            activity?.showDialog &#123;</span><br><span class="line">                title(<span class="string">&quot;发现新版本&quot;</span>)</span><br><span class="line">                content(info.updateContent)</span><br><span class="line">                positiveText(<span class="string">&quot;立刻下载&quot;</span>)</span><br><span class="line">                canceledOnTouchOutside(<span class="literal">false</span>)</span><br><span class="line">                keyListener &#123; _, keyCode, e -&gt;</span><br><span class="line">                    <span class="keyword">if</span> (e.keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">                        XLog.i(TAG, <span class="string">&quot;拦截返回事件&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span><span class="symbol">@keyListener</span> <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@keyListener</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                onPositive &#123; _, _ -&gt;</span><br><span class="line">                    downloadStart.invoke()</span><br><span class="line">                    updateProgress(update(info.updateUrl.let &#123;</span><br><span class="line">                        <span class="keyword">if</span> (it.startsWith(<span class="string">&quot;http&quot;</span>) || it.startsWith(<span class="string">&quot;https&quot;</span>))</span><br><span class="line">                            it</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="string">&quot;http://<span class="variable">$it</span>&quot;</span></span><br><span class="line">                    &#125;))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstallReceiver</span> : <span class="type">BroadcastReceiver</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>?, intent: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        XLog.i(<span class="string">&quot;InstallReceiver&quot;</span>, <span class="string">&quot;下载完成&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (intent?.action.equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE)) &#123;</span><br><span class="line">            Client.isUpdating = <span class="literal">false</span></span><br><span class="line">            UpdateManager.downloadFinish.invoke()</span><br><span class="line"><span class="comment">//                updateDialog()</span></span><br><span class="line">            UpdateManager.installApk()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能有一些无用的函数，这个类入口是 checkUpdate，顺着checkUpdate的线一直看下去就能了解整个流程了。</p>
]]></content>
  </entry>
  <entry>
    <title>几种文字匹配算法</title>
    <url>/2017/11/20/%E5%87%A0%E7%A7%8D%E6%96%87%E5%AD%97%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>最近 Android 做了一个全文关键字高亮的功能，直接用了<br> Java 现成的 API 解决了，在查阅资料的过程中得知还有几种匹配算法：BF、RK、KMP、BM、Sunday，有空就做了一些了解。这里记录一下防止忘记，阮一峰大神关于这些算法的博客写的很好。</p>
<h1 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h1><p>暴力检索，这种方法最容易想到，也是最容易实现的，从首字母开始挨个的将关键字和做比对。用下面的图片就能只管的说明（图片来自阮一峰大神的博客）<br><img src="http://upload-images.jianshu.io/upload_images/1976147-1b605eaf1912776a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BF"></p>
<p>代码实现：</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.string.textmatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力检索</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFMatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暴力检索，输出匹配到的关键字的起始索引（包括起始索引在内，因为有的是不包括结尾下标在内，所以这里说明一下）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originText 原始文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword    要匹配的关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BFMatch</span><span class="params">(String originText, String keyword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> originChar;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; originText.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; keyword.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + j &gt;= originText.length()) <span class="keyword">break</span>;</span><br><span class="line">                originChar = originText.charAt(i + j);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (originChar != keyword.charAt(j)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j == keyword.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;找到匹配字符串，起始：&quot;</span> + i +</span><br><span class="line">                            <span class="string">&quot; 终止：&quot;</span> + (i + keyword.length() - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        BFMatch(<span class="string">&quot;asdfj9iwhefpnehbnfhodhsvb&quot;</span>, <span class="string">&quot;j9&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：<br>找到匹配字符串，起始：4 终止：5</p>
<h2 id="RK"><a href="#RK" class="headerlink" title="RK"></a>RK</h2><p>RK 算法是对 BF 算法的一个改进，看了我上面对 BF 的实现不难发现，每次匹配都需要比对每一个字符是否一致，是否有更加有效率的方法呢？有的，RK 对于 BF 的改进就在于尝试进行一次比较来判断两者是否相等。RK 算法首先计算子串的哈希值，然后在原字符串中取出同样长度的字符串计算哈希值，如果二者的哈希值不等那么他们一定不同。如果哈希值相同，由于哈希冲突的存在，也需要再次比对一下是否相同。一般情况下我们需要匹配的文本含有的关键字占全文的数量应该不是很高，所以这种高效率去除不同的情况效率是高于 BF 的。看一下实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.string.textmatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RKMatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暴力检索的改进，输出匹配到的关键字的起始索引（包括起始索引在内，因为有的是不包括结尾下标在内，所以这里说明一下）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originText 原始文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword    要匹配的关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RKMatch</span><span class="params">(String originText, String keyword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> keyHash = keyword.hashCode();</span><br><span class="line">        <span class="keyword">int</span> keyLength = keyword.length();</span><br><span class="line"></span><br><span class="line">        String subString;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; originText.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyLength + i &gt;= originText.length()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            subString = originText.substring(i, i + keyLength);</span><br><span class="line">            <span class="keyword">if</span> (subString.hashCode() == keyHash) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; keyLength; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (subString.charAt(j) != keyword.charAt(j)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (j == keyLength - <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;找到匹配字符串，起始：&quot;</span> + i +</span><br><span class="line">                                <span class="string">&quot; 终止：&quot;</span> + (i + keyword.length() - <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        RKMatch(<span class="string">&quot;asdfj9iwhefpnehbnfhodhsvb&quot;</span>, <span class="string">&quot;j9&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：<br>找到匹配字符串，起始：4 终止：5</p>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>哇，真是大学时的噩梦啊（笑），字符串匹配的最经典算法之一，曾被票选为当今世界最伟大的十大算法之一。恩，先回到正题吧，不闲扯了，KMP 算法我看了一下，觉得比较难的部分就是部分匹配值的计算了。BF 和 RK 在匹配不上时都是顺序向后移动一位继续匹配，而 KMP 不是，是按照计算的部分匹配值来向后移动。这里不具体解释原理，直说按照怎样的步骤去实现计算部分匹配值：</p>
<p>“部分匹配值”是指字符串前缀和后缀所共有元素的长度。前缀是指除最后一个字符外，一个字符串全部头部组合；后缀是指除第一个字符外，一个字符串全部尾部组合。以”ABCDABD”为例：<br>“AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；<br>“ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；<br>“ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；<br>“ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1；<br>“ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2；<br>“ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。 </p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算部分匹配值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] calcPartMatch(String keyword) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] partMatchVal = <span class="keyword">new</span> <span class="keyword">int</span>[keyword.length()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keyword.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            partMatchVal[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String subKey = keyword.substring(<span class="number">0</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 求前缀</span></span><br><span class="line">        list1.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; subKey.length(); j++) &#123;</span><br><span class="line">            list1.add(subKey.substring(<span class="number">0</span>, j));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求后缀</span></span><br><span class="line">        list2.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; subKey.length(); j++) &#123;</span><br><span class="line">            list2.add(subKey.substring(j, subKey.length()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\ni = &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前缀：&quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后缀：&quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求交集</span></span><br><span class="line">        list1.retainAll(list2);</span><br><span class="line">        <span class="keyword">if</span> (list1.size() == <span class="number">0</span>) partMatchVal[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            partMatchVal[i] = list1.get(<span class="number">0</span>).length();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n长度为：&quot;</span> + partMatchVal[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> partMatchVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入 ada ，输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 1</span><br><span class="line">前缀：a</span><br><span class="line">后缀：d</span><br><span class="line"></span><br><span class="line">长度为：0</span><br><span class="line"></span><br><span class="line">i = 2</span><br><span class="line">前缀：a</span><br><span class="line">前缀：ad</span><br><span class="line">后缀：da</span><br><span class="line">后缀：a</span><br><span class="line"></span><br><span class="line">长度为：1</span><br></pre></td></tr></table></figure>
<p>计算得出的部分匹配值就是0、0、1</p>
<p>KMP算法实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程比较复杂，注释里比较难写清，具体可见</span></span><br><span class="line"><span class="comment"> * http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 具体的操作流程就是：</span></span><br><span class="line"><span class="comment"> * 1.计算 keyword 的部分匹配值</span></span><br><span class="line"><span class="comment"> * 2.进行匹配操作，碰到部分匹配成功，下一次 起始点索引 = 原位置 + 已匹配的字符数 - 对应的部分匹配值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kmpMatch</span><span class="params">(String originText, String keyword)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 部分匹配值</span></span><br><span class="line">    <span class="keyword">int</span>[] partMatch = calcPartMatch(keyword);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; originText.length(); ) &#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="comment">// 匹配字符数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; keyword.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + j &gt;= originText.length()) <span class="keyword">break</span>;</span><br><span class="line">            c = originText.charAt(i + j);</span><br><span class="line">            <span class="keyword">if</span> (c != keyword.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (j == keyword.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;找到匹配字符串，起始：&quot;</span> + i +</span><br><span class="line">                        <span class="string">&quot; 终止：&quot;</span> + (i + keyword.length() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i += count - partMatch[count - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; originText.length()) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入：kmpMatch(“asdfasdfasdfasdfadae4rqerfasdfv”, “ada”);<br>输出：找到匹配字符串，起始：16 终止：18</p>
<p>这里还有 BM 和 Sunday 没有实现。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2016/12/10/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="反射简介"><a href="#反射简介" class="headerlink" title="反射简介"></a>反射简介</h3><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能成为JAVA语言的反射机制。</p>
<p>在《Java编程思想》中有RTTI（Run-Time Type Identification），通过运行时类型信息程序能使用基类的指针或引用来检查这些指针或引用所指对象的实际派生类型。不过RTTI的定义我是在百度百科上看到的，看了一下很多都是C++的内容，这与这本书的作者先前有C++的背景有关。不过在这里我并不想区分RTTI与我这想要学习的Java中的反射，在学习Java的过程中俺只认反射……</p>
<p>首先谈谈我对于反射的一些认知吧，反射对于** 客户端程序员 **来说可能并没有多大的发挥空间，而且因为反射的性能并不理想，在很多场景都是需要避免使用反射的。但是试想一下我现在要实现一个Json字符串映射到Java实体类的东西，这个时候就需要通过反射来拿到实体类的属性信息了，之后再处理Json字符串，将对应的值赋给实体类对应的属性。</p>
<p>在了解Java反射之前首先需要了解一个东西：Class</p>
<span id="more"></span>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>类是程序的而一部分，每个类都有一个Class对象。在Java中，所有的类都是在对其第一次使用时，动态加载到JVM中的。因为Java的这个特性，曾经在网上看到过将Java理解为解释型语言的，不过究竟该如何理解才好，可以给出一个大神的博客：<a href="http://rednaxelafx.iteye.com/blog/492667">R大</a>，感兴趣可以自行阅读。</p>
<p>回到本文，当程序创建第一个对类的静态成员的引用时，就会加载这个类。Java程序在它开始运行前并非完全被加载，其各个部分是在必需时才加载。</p>
<p>前面提到了每个类都有一个Class对象，这个类的所有对象都由其产生的Class对象产生。为了产生这个Class对象，JVM会使用类加载器将这个类加载到JVM中。</p>
<p>下面直接上code来说明一些问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassType</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClassType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态的参数初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;静态的参数初始化&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态的参数初始化</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;非静态的参数初始化&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class testTypeForName = Class.forName(<span class="string">&quot;TestClassType&quot;</span>);</span><br><span class="line">        TestClassType t = (TestClassType) testTypeForName.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d491dc0eeb138f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<p>当我使用Class.forName时这个类被载入内存，静态代码块的代码被执行，当我们使用Class对象创建一个该类的对象时，会先初始化非静态的属性和非静态的代码块，之后调用构造器。在《Java编程思想》说构造器也是类的静态方法，这我认为是作者的疏忽。关于这一块的讨论可以戳这里<a href="https://www.zhihu.com/question/35860619/answer/64802279">传送门</a></p>
<p>继续来补全，Class可以说是java反射的核心类，以上简单的介绍了一下Class，以下继续了解反射。</p>
<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><ul>
<li><p>成员属性<br>getFields()：获得类的public类型的属性<br>getDeclaredFields()：获得类的所有属性<br>getField(String name)<br>getDeclaredField(String name)</p>
</li>
<li><p>成员方法<br>getMethods()：获得类的public类型的方法<br>getDeclaredMethods()：获得类的所有方法<br>getMethod(String name, Class[] parameterTypes)：获得类的特定方法getDeclaredMethod(String name, Class[] parameterTypes)：获得类的特定方法</p>
</li>
<li><p>构造方法：<br>getConstructors()：获得类的public类型的构造方法。<br>getDeclaredConstructors()：获得类的所有构造方法。<br>getConstructor(Class[] parameterTypes)：获得类的特定构造方法getDeclaredConstructor(Class[] params)；获得类的特定方法</p>
</li>
</ul>
<p>下面简单的使用其中的一些方法，首先是用来测试的类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by luojun on 2017/1/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getaName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;共有构造方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有构造方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by luojun on 2017/1/9.</span></span><br><span class="line"><span class="comment"> * desc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;Person&gt; personClz = Person.class;</span><br><span class="line">        Constructor&lt;Person&gt; cons = personClz.getDeclaredConstructor();</span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Person person = cons.newInstance();</span><br><span class="line"></span><br><span class="line">        Method m1 = personClz.getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用反射获取到的方法名：&quot;</span> + m1.getName());</span><br><span class="line">        m1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Method setAge = personClz</span><br><span class="line">                .getDeclaredMethod(<span class="string">&quot;setAge&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        setAge.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        setAge.invoke(person, <span class="number">16</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用反射初始化年龄之后年龄的值：&quot;</span> + person.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-be84be535122c485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出"></p>
<p>由于自己现在并非些工具之人，所以对于反射的需求也不是很大，暂时就了解到这。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>初试EventBus</title>
    <url>/2017/06/05/%E5%88%9D%E8%AF%95EventBus/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>EventBus一直都有听说过，但是之前都没有用过。因为自己的项目里并没有特别复杂的事件传递，自己写个接口回调弄一下解决需求就ok了。最近有需求要了解一下EventBus，将自己的所得记录一下。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先在app的build.gradle中添加引用代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile &#x27;org.greenrobot:eventbus:3.0.0&#x27;</span><br></pre></td></tr></table></figure>
<p>这样就可以在项目中使用EventBus了。</p>
<span id="more"></span>

<p>这里简单的测试一下post普通的事件和粘性事件，简单的介绍一下我所使用的测试例，有两个Activity，MainActivity和SecondActivity。使用步骤如下：</p>
<ul>
<li>register &amp; unregister</li>
</ul>
<p>官方的介绍中是在Activity的onStart和onStop这两个生命周期中调用了register和unregister，这个根据你自己的需求。如果你与需要在Activity不可见时也要能接收到事件，那么无疑在onDestroy中unregister更好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着定义要传递的事件，这里只是简单的测试一下，所以只简单的复写了一下toString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;onMessageEvent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于SecondActivity在MainActivity之后启动，所以需要poststicky(粘性)事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(<span class="keyword">new</span> MessageEvent());</span><br></pre></td></tr></table></figure>
<p>在SecondActivity中使用@Subscribe注解标注一个方法，参数为刚才定义的事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEvent</span><span class="params">(MainActivity.MessageEvent e)</span> </span>&#123;</span><br><span class="line">    Log.e(TAG, e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个EventBus的使用流程就是这样了，当然，不要急着去试，你直接用上面的代码肯定是不行的，为什么呢？可以看一下@Subscribe这个注解的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subscribe &#123;</span><br><span class="line">    <span class="function">ThreadMode <span class="title">threadMode</span><span class="params">()</span> <span class="keyword">default</span> ThreadMode.POSTING</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If true, delivers the most recent sticky event (posted with</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> EventBus#postSticky(Object)&#125;) to this subscriber (if event available).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sticky</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Subscriber priority to influence the order of event delivery.</span></span><br><span class="line"><span class="comment">     * Within the same delivery thread (&#123;<span class="doctag">@link</span> ThreadMode&#125;), higher priority subscribers will receive events before</span></span><br><span class="line"><span class="comment">     * others with a lower priority. The default priority is 0. Note: the priority does *NOT* affect the order of</span></span><br><span class="line"><span class="comment">     * delivery among subscribers with different &#123;<span class="doctag">@link</span> ThreadMode&#125;s! */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到有个sticky()方法默认返回值是false，而上面的注释也说了为真的时候会分发sticky event。有一点也要注意，这个注解上面的@Retention(RetentionPolicy.RUNTIME)注解说明这个Subscribe注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在。如果你足够了解反射和注解，你就能想到EventBus肯定是利用反射来调用注解方法的。</p>
<p>说了这么多，正确的代码是怎样的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subscribe(sticky = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEvent</span><span class="params">(MainActivity.MessageEvent e)</span> </span>&#123;</span><br><span class="line">    Log.e(TAG, e.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4c3ce17ba4b80785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出"></p>
<p>可以看到的确是接收到了事件。基本的使用方式就是这样。</p>
<p>Android需要在主线程更新UI，那么EventBus如何切换线程？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subscribe(threadMode = ThreadMode.MAIN)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(MessageEvent event)</span> </span>&#123;</span><br><span class="line">    textField.setText(event.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在注解中声明threadMode = ThreadMode.Main就可以了，这样你就可以在接收到事件的时候更新UI了。ThreadMode还有POSTING、BACKGROUND和ASYNC这几个值。POSTING是默认值，就是不切换线程，直接发送事件。</p>
<p>更多关于EventBus的使用可以参考官方文档：<a href="http://greenrobot.org/eventbus/documentation/">http://greenrobot.org/eventbus/documentation/</a></p>
<h2 id="EventBus是如何工作的？"><a href="#EventBus是如何工作的？" class="headerlink" title="EventBus是如何工作的？"></a>EventBus是如何工作的？</h2><p>EventBus使用起来是比较简单的，刚在上面也说了EventBus通过注解配合反射来实现传递事件的功能，接下来就简要分析一下post()的流程。EventBus中的post方法里首先做了一些简单的操作和判断，接着调用了postSingleEvent()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</span><br><span class="line">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;No subscribers registered for event &quot;</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class="line">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到首先拿到了event的Class对象，接着判断eventInheritance值，这个值默认是true，那么接着就调用了lookupAllEventTypes方法，这个方法不具体分析代码，他的功能是将传入event的所有父类或者接口的Class对象添加到一个集合中。他这样做的原因我认为是考虑到了多态问题，用户在用的时候可能会用父类Event作为注解方法的参数，而post的时候则post子类或者接口实现类之类的东西。接着遍历拿到的Class对象集合，调用postSingleEventForEventType方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">            postingState.event = event;</span><br><span class="line">            postingState.subscription = subscription;</span><br><span class="line">            <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先创建了一个线程安全的集合，线程安全啥的这里不展开讨论，加锁的代码中subscriptionsByEventType究竟是个什么东西呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br></pre></td></tr></table></figure>
<p>光看这个并没有了解到什么，然而这是个map，只要搜一下subscriptionsByEventType.put就可以看到赋值的操作了。经过搜索，在代码中发现啊subscribe这个方法中有调用。经过进一步的搜索，发现在register方法中调用了subscribe方法。是的，我上面讲post流程直接跳过了register这个流程，现在得补回来了。</p>
<p>register方法中调用了SubscriberMethod的findSubscriberMethods方法，具体的实现逻辑在findUsingReflectionInSingleClass方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">        Method[] methods;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></span><br><span class="line">            methods = findState.clazz.getDeclaredMethods();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">            <span class="comment">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></span><br><span class="line">            methods = findState.clazz.getMethods();</span><br><span class="line">            findState.skipSuperClasses = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">                Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</span><br><span class="line">                    <span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</span><br><span class="line">                            ThreadMode threadMode = subscribeAnnotation.threadMode();</span><br><span class="line">                            findState.subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode,</span><br><span class="line">                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                    String methodName = method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span> + method.getName();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">&quot;@Subscribe method &quot;</span> + methodName +</span><br><span class="line">                            <span class="string">&quot;must have exactly 1 parameter but has &quot;</span> + parameterTypes.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                String methodName = method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span> + method.getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName +</span><br><span class="line">                        <span class="string">&quot; is a illegal @Subscribe method: must be public, non-static, and non-abstract&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">````</span><br><span class="line">这里可以很清晰的看到就是利用了反射来拿到注解的方法。简单的了解到如何拿到注解方法，继续回到postSingleEventForEventType方法，方法遍历了subscriptions，并将subscriptions集合的元素、event和是否是主线程的布尔值作为参数传递给postToSubscription方法：</span><br><span class="line">```<span class="function">java</span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> POSTING:</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MAIN:</span><br><span class="line">                <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                    invokeSubscriber(subscription, event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BACKGROUND:</span><br><span class="line">                <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                    backgroundPoster.enqueue(subscription, event);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    invokeSubscriber(subscription, event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ASYNC:</span><br><span class="line">                asyncPoster.enqueue(subscription, event);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unknown thread mode: &quot;</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里可以看到对不同的threadMode进行了不同的处理，最终通过反射调用了注解方法。整个流程到此就简单的过了一遍，EventBus是通过反射来工作的，不同于dagger2用的是编译时注解，EventBus用的是Java本身提供的注解和反射，对性能会有影响，不过比起其易用方便的特性来说，还是值得用的。</p>
<p>这里只是简单的过了一下流程，中间跳过了很多代码，也没有很深入的分析源码。EventBus的源码并不算特别多，如果各位对反射和注解比较了解，可以读一下EventBus的源码。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>库</tag>
        <tag>EventBus</tag>
      </tags>
  </entry>
  <entry>
    <title>在自定义View时碰到的奇怪问题</title>
    <url>/2017/08/29/%E5%9C%A8%E8%87%AA%E5%AE%9A%E4%B9%89View%E6%97%B6%E7%A2%B0%E5%88%B0%E7%9A%84%E5%A5%87%E6%80%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在撸新的东西玩，自定义View我也算是半个老司机了。首先在onMeasure中处理了wrap_content的情况，然后我惊奇的在log中发现，我测量出来的结果竟然是1080？这是什么操作？后来调试发现测量宽度时进入了精确模式，没跑了肯定是match_parent。我是怎么把View添加到父View的呢？代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ll_container!!.addView(v)</span><br></pre></td></tr></table></figure>
<p>这是一个LinearLayout，不说多的点进addView看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">        addView(child, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add a null child view to a ViewGroup&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LayoutParams params = child.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            params = generateDefaultLayoutParams();</span><br><span class="line">            <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;generateDefaultLayoutParams() cannot return null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addView(child, index, params);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>可以看到首先addView(View)方法调用了重载方法，并在在添加之前判断了LayoutParams，如果为null则生成一个，不为null则添加到ViewGroup中。我这里没有设置LayoutParams，所以必定为null，那看一下生成参数的代码吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateDefaultLayoutParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>纳尼？？？看到这真是黑人问号了，俩wrap_content进入了exactly测量模式，除非Android系统爆炸还差不多。后来突然想起来Java有一种玩意叫做后期绑定，可能是LinearLayout复写了这个生成参数的方法，点进LinearLayout搜索了一下，果然如此：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateDefaultLayoutParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mOrientation == HORIZONTAL) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没办法，刚好设置的vertical方向，果然width设置了match_parent。看来以后还是要多了解一下ViewGroup。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>将博客从简书迁移到到 Hexo</title>
    <url>/2018/05/29/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8E%E7%AE%80%E4%B9%A6%E8%BF%81%E7%A7%BB%E5%88%B0%20Hexo/</url>
    <content><![CDATA[<p>这两天抽空把简书的文章都迁移到了自己的博客中，这里小记一下。首先说明我这里的配置环境：</p>
<ul>
<li>本地安装好 hexo 配套环境</li>
<li>阿里云服 Ubuntu 服务器中安装 git 和 nginx</li>
</ul>
<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>原来是利用 github + hexo 来搭建自己的博客的，后来折腾了一下 wordpress，恩，感觉的确是够折腾的，还是改回 hexo 好了。在准备改回来的时候，我转念一想，github 也就是作为一个 git 仓库，那么我能否利用自己的服务器来作为静态页面的容器呢？说干就干，试了一下果然可以。首先在服务器建立一个 git 仓库（这里省略本地和服务器环境配置的过程）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir ~/blog</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git init --bare ~/blog/hexo.git</span></span><br></pre></td></tr></table></figure>
<p>之后配置钩子，在每次收到 post 后将文件更新到 nginx 的资源目录下，钩子在 git 目录的 hooks 目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> ~/blog/hexo.git/hooks</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim post-receive</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>之后输入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/home/xiasuhuei321/blog/hexo.git checkout -f</span><br></pre></td></tr></table></figure>
<p>这里 var/www/hexo 是我服务器中创建的资源存放位置，这里根据各位自己的实际情况来操作。之后wq退出vim保存，到这里，服务器的配置就基本完成了，还是比较简单的。</p>
<p>本地配置也比较简单，利用 hexo 命令创建一个本地目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir ~/Desktop/blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/Desktop/blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>
<p>由于每次生成静态界面和发布都需要输入hexo g,hexo d这两个命令，可以写一个 shell 脚本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim post.sh</span></span><br></pre></td></tr></table></figure>

<p>输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>这里需要修改一下 hexo 的配置文件，找到目录下的_config.yml，找到以下内容并填入自己的配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">xiasuhuei321@你的服务器ip:/home/xiasuhuei321/blog/hexo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>这里要注意yml对格式的要求比较严格，缩进和冒号后的空格不能有错，保存修改后执行之前编写的post.sh脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./post.sh</span><br></pre></td></tr></table></figure>
<p>到这里，如果你的操作都正确，这个时候去访问你的服务器ip，是会看到hexo生成的那篇默认文章的。接下来就是迁移简书的文章了。</p>
<h2 id="迁移简书文章"><a href="#迁移简书文章" class="headerlink" title="迁移简书文章"></a>迁移简书文章</h2><p>迁移简书文章还是比较简单的，进入设置里面，可以打包下载自己所有的文章，包括草稿，不过那个创作时间可不包括在文章里面，是简书自己记录的，hexo 在头部是可以加上创作时间的。我个人对于这个也是比较在乎的，所以写了个小脚本来自动为文章的md文件加上这段头。hexo这段头的格式是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Python入手（二）</span><br><span class="line">date: 2017-10-31 00:52:20</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这里想要拿到时间，进主页观察一下布局：<br><img src="../../../../images/jianshuzhuye.jpg" alt="时间"><br>利用 chrome 自带的工具分析起来很方便，这里用 python 的requests 和 BeatifulSoup 库来请求和解析 html。当然，我这里并没有选择用主页的 url 来解析，而是选择了自己当初创建的分类，而自己打包下载文章实际上也是根据这种分类来的。需要注意的是，如果你的文章标题里有空格，文件名里会自动转成 - ，我在这里小小的吃了个亏。还有一点要注意的就是请求访问请求文章的时候一次只会返回九篇，如果超过九篇，则需要额外的请求<br><img src="../../../../images/ewai.jpg" alt="需要额外请求"></p>
<p>类似于图上的这种，我这里只有两个分类超过了九篇，而且我写的脚本也不是全自动的，需要自己手填 url ，所以明白了这一点之后就很简单了，脚本如下，各位可以根据自己的需要改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">articlePath = <span class="string">&quot;/Users/luojun/Desktop/笔记/user-1976147-1527572719/Android学习笔记&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://www.jianshu.com/nb/4067642?order_by=added_at&amp;page=4&quot;</span></span><br><span class="line">mdStr = <span class="string">&#x27;---\n&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;title:\n&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;date:\n&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;---\n&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://www.example.com/&quot;</span>,</span><br><span class="line">           <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.170 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">bs = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleArticle</span>(<span class="params"><span class="built_in">str</span>, title</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(articlePath + <span class="string">&#x27;/&#x27;</span> + title + <span class="string">&#x27;.md&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        specStart = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="number">9</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t.startswith(<span class="string">&#x27;```&#x27;</span>):</span><br><span class="line">                s += <span class="string">&#x27;&lt;!--more--&gt;\n&#x27;</span> + t</span><br><span class="line">                specStart = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            s += t</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        leftS = f.read()</span><br><span class="line">        f.seek(<span class="number">0</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>)</span><br><span class="line">        f.write(s)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> specStart:</span><br><span class="line">            f.write(<span class="string">&#x27;&lt;!--more--&gt;\n&#x27;</span>)</span><br><span class="line">        f.write(leftS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文章列表模块</span></span><br><span class="line">container = bs.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;list-container&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 获取标题和时间</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> container.find_all(<span class="string">&#x27;li&#x27;</span>):</span><br><span class="line">    title = item.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;title&#x27;</span>&#125;).get_text()</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line">    time = item.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;time&#x27;</span>&#125;)[<span class="string">&#x27;data-shared-at&#x27;</span>]</span><br><span class="line">    time2 = time.replace(<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    time3 = time2.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">0</span>].lstrip(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    mdStr2 = mdStr.replace(<span class="string">&#x27;title:&#x27;</span>, <span class="string">&#x27;title: &#x27;</span> + title)</span><br><span class="line">    mdStr3 = mdStr2.replace(<span class="string">&#x27;date:&#x27;</span>, <span class="string">&#x27;date: &#x27;</span> + time3)</span><br><span class="line">    handleArticle(mdStr3, title)</span><br><span class="line">    <span class="built_in">print</span>(mdStr3)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;finish\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里因为自己用啥的，所以变量啥的命名都比较随意~</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>实现RecyclerView下拉刷新</title>
    <url>/2017/01/18/%E5%AE%9E%E7%8E%B0RecyclerView%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近项目里有需求要用到下拉刷新，以前写好的代码最好别动太多~在github上发现了一个XRecyclerView能满足的需求，而且也不必对我原来的代码做多大的修改。<br>但是光会用还不够，万一碰到啥满足不了自己需求或者是坑自己还得有办法解决啊。所以打算通过自己写一个，以此来加深自己对XRecyclerView的理解。</p>
<p>当然了，我只是抱着学习的目的实现一下，重复造轮子是不好的~这篇文主要是理一下自己的思路的，代码不会贴非常完整的，完整代码地址文末有。最后自己也稍微完善了一下代码，权当是练习一下自己的所学所得吧。</p>
<h2 id="简单的实现部分逻辑"><a href="#简单的实现部分逻辑" class="headerlink" title="简单的实现部分逻辑"></a>简单的实现部分逻辑</h2><p>首先想一下我最初的需求，希望尽量少的改动自己的代码，XRecyclerView做到了这一点，他内部是有一个WrapAdapter继承于RecyclerView.Adapter。并且XRecyclerView重写了setAdapter这个方法，当你调用setAdapter方法时，会先在WrapAdapter内部持有一个adapter的引用，之后调用RecyclerView的setAdapter将这个WrapAdapter设置给RecyclerView，这么做有一个好处，就是可以自己先在onCreateViewHolder和onBindViewHolder方法里对刷新顶部和你添加的头部布局进行处理和绑定，在这之后再调用adapter的相应方法。</p>
<span id="more"></span>
<p>如果你对于RecyclerView的工作机制还不是很熟悉，可能会疑惑我以上的这段话。可以先简单的理解为：onCreateViewHolder是生成整个列表中的一个个元素的，而onBindViewHolder则是在这个元素被滑动到可见（进入屏幕）的时候被调用，你可以在这个方法进行具体的元素视图的设置操作。如果这么说你还不明白，我的这篇<a href="http://www.jianshu.com/p/d7ec36aa8e4b">探究RecyclerView的ViewHolder复用</a>可能会对你有所帮助。</p>
<p>既然知道了这么写的好处，那么我自然也得弄一个：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterWrapper</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Adapter mAdapter;</span><br><span class="line"></span><br><span class="line">    AdapterWrapper(Adapter adapter) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mAdapter = adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来当然是看看这玩意能不能用了，写一个RecyclerVIew的子类，就叫做MRecyclerView吧：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/1/4.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRecyclerView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRecyclerView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRecyclerView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        setAdapter(<span class="keyword">new</span> AdapterWrapper(<span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterWrapper</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Adapter mAdapter;</span><br><span class="line"></span><br><span class="line">        AdapterWrapper(Adapter adapter) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mAdapter = adapter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HeadViewHolder(LayoutInflater.from(mContext)</span><br><span class="line">                    .inflate(R.layout.item_test, parent, <span class="keyword">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getItemViewType(position);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HeadViewHolder</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeadViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置LayoutManage的代码</span></span><br><span class="line">MRecyclerView mr = (MRecyclerView) findViewById(R.id.mrv);</span><br><span class="line">mr.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>
<p>这里暂时只是简单的实践，所以没有更进一步的实现，先看一下效果是怎样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-4059fed913ac1784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<p>还行，感觉思路应该是对的。接着尝试加上一个刷新的头布局。这个可以通过设置ViewType和不同的ViewHolder来解决，首先复写AdapterWrap内的getItemViewType方法，这里因为暂时不考虑外部adapter的设置，所以代码比较简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFRESH_HEADER = <span class="number">10086</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> position == <span class="number">0</span> ? REFRESH_HEADER : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着将onCreateViewHolder的逻辑改改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (viewType == REFRESH_HEADER) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeadViewHolder(LayoutInflater.from(mContext)</span><br><span class="line">                .inflate(R.layout.item_refresh_header, parent, <span class="keyword">false</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeadViewHolder(LayoutInflater.from(mContext)</span><br><span class="line">                .inflate(R.layout.item_test, parent, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下啥样子</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-83e614ab6b4f59ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加一个下拉刷新"></p>
<p>恩，不错，有点样子了，不过这里只是添加了一个item进去而已，并没有平时常见的下拉刷新的效果。关于如何实现这种效果，我刚开始以为是将这个refresh head放到屏幕之外，以前也尝试过ListView下拉刷新，不过忘得差不多了就是……看了一下XRecyclerView的实现方式，很巧妙，是将refresh head的初始高度设置为0，随着下拉高度而逐渐展现refrsh head。这个好啊~我果断也用这种方式实现了。</p>
<p>不过还是说明下，现在只是简单的实现，并非完善的代码，各位通过这个代码简单的了解如何实现就好了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.AnimationDrawable;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/1/4.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REFRESH_HEADER = <span class="number">10086</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mLastY = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMeasuredHeight = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> HeadViewHolder h;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> releaseToRefresh = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> RefreshListener r;</span><br><span class="line">    <span class="keyword">private</span> AnimationDrawable drawable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRecyclerView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRecyclerView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRecyclerView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        setAdapter(<span class="keyword">new</span> AdapterWrapper(<span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line"><span class="comment">//        LayoutParams lp = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,0);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterWrapper</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Adapter mAdapter;</span><br><span class="line"></span><br><span class="line">        AdapterWrapper(Adapter adapter) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mAdapter = adapter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (viewType == REFRESH_HEADER) &#123;</span><br><span class="line">                h = <span class="keyword">new</span> HeadViewHolder(LayoutInflater.from(mContext)</span><br><span class="line">                        .inflate(R.layout.item_refresh_header, parent, <span class="keyword">false</span>));</span><br><span class="line">                LayoutParams lp = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, <span class="number">0</span>);</span><br><span class="line">                h.itemView.setLayoutParams(lp);</span><br><span class="line">                <span class="keyword">return</span> h;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HeadViewHolder(LayoutInflater.from(mContext)</span><br><span class="line">                        .inflate(R.layout.item_test, parent, <span class="keyword">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> position == <span class="number">0</span> ? REFRESH_HEADER : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mLastY == -<span class="number">1</span>) &#123;</span><br><span class="line">            mLastY = e.getRawY();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mMeasuredHeight == -<span class="number">1</span>) &#123;</span><br><span class="line">            mMeasuredHeight = h.getMeasureHeight();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (e.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">float</span> deltaY = e.getRawY() - mLastY;</span><br><span class="line">                mLastY = e.getRawY();</span><br><span class="line">                onMove(deltaY / <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                mLastY = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (releaseToRefresh) refresh();</span><br><span class="line">                <span class="keyword">else</span> refreshComplete();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HeadViewHolder</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HeadViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMeasureHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            itemView.measure(ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                    ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">            <span class="keyword">return</span> itemView.getMeasuredHeight();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisibleHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (height &lt; <span class="number">0</span>) height = <span class="number">0</span>;</span><br><span class="line">            LayoutParams lp = (LayoutParams) itemView.getLayoutParams();</span><br><span class="line">            lp.height = height;</span><br><span class="line">            itemView.setLayoutParams(lp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVisibleHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            LayoutParams lp = (LayoutParams) itemView.getLayoutParams();</span><br><span class="line">            <span class="keyword">return</span> lp.height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ImageView <span class="title">getArrowImg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (ImageView) itemView.findViewById(R.id.iv_progress);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ImageView <span class="title">getRefreshImg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (ImageView) itemView.findViewById(R.id.iv_refresh);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            TextView refreshTitle = (TextView) itemView.findViewById(R.id.tv_refresh_text);</span><br><span class="line">            refreshTitle.setText(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (releaseToRefresh) &#123;</span><br><span class="line">            ImageView arrowImg = h.getArrowImg();</span><br><span class="line">            ObjectAnimator rotate = ObjectAnimator.ofFloat(arrowImg, <span class="string">&quot;rotation&quot;</span>, <span class="number">180f</span>, <span class="number">0f</span>);</span><br><span class="line">            rotate.setDuration(<span class="number">300</span>);</span><br><span class="line">            rotate.start();</span><br><span class="line">        &#125;</span><br><span class="line">        releaseToRefresh = <span class="keyword">false</span>;</span><br><span class="line">        handler.sendEmptyMessageDelayed(<span class="number">1</span>, <span class="number">800</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Handler handler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    h.setVisibleHeight(<span class="number">0</span>);</span><br><span class="line">                    h.changeText(<span class="string">&quot;下拉刷新&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) drawable.stop();</span><br><span class="line">                    ImageView refreshImg = h.getRefreshImg();</span><br><span class="line">                    ImageView arrowImg = h.getArrowImg();</span><br><span class="line">                    arrowImg.setVisibility(VISIBLE);</span><br><span class="line">                    refreshImg.setVisibility(GONE);</span><br><span class="line">                    h.changeText(<span class="string">&quot;刷新完成&quot;</span>);</span><br><span class="line">                    refreshComplete();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMove</span><span class="params">(<span class="keyword">float</span> deltaY)</span> </span>&#123;</span><br><span class="line">        h.setVisibleHeight((<span class="keyword">int</span>) deltaY + h.getVisibleHeight());</span><br><span class="line">        <span class="keyword">if</span> (h.getVisibleHeight() &gt; mMeasuredHeight) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!releaseToRefresh) &#123;</span><br><span class="line">                <span class="comment">//旋转箭头</span></span><br><span class="line">                ImageView arrowImg = h.getArrowImg();</span><br><span class="line">                ObjectAnimator rotate = ObjectAnimator.ofFloat(arrowImg, <span class="string">&quot;rotation&quot;</span>, <span class="number">0f</span>, <span class="number">180f</span>);</span><br><span class="line">                h.changeText(<span class="string">&quot;释放刷新&quot;</span>);</span><br><span class="line">                rotate.setDuration(<span class="number">300</span>);</span><br><span class="line">                rotate.start();</span><br><span class="line">                releaseToRefresh = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ImageView refreshImg = h.getRefreshImg();</span><br><span class="line">        ImageView arrowImg = h.getArrowImg();</span><br><span class="line">        arrowImg.setVisibility(GONE);</span><br><span class="line">        refreshImg.setVisibility(VISIBLE);</span><br><span class="line">        drawable = (AnimationDrawable) refreshImg.getDrawable();</span><br><span class="line">        drawable.start();</span><br><span class="line">        h.changeText(<span class="string">&quot;刷新中...&quot;</span>);</span><br><span class="line">        handler.sendEmptyMessageDelayed(<span class="number">2</span>,<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPullToRefreshListener</span><span class="params">(RefreshListener r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RefreshListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看看效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-08f08540404b8537.gif?imageMogr2/auto-orient/strip" alt="效果图"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>还有很多的细节没有完善和处理，比如适配不同的layoutmanage之类的，操作刷新布局也都是通过ViewHolder来的，其实是有必要抽出一个类的，真的还有非常多不完善的地方，不过只是简单实现和了解一下下拉刷新而已。我自己也简单的封装了一个MRecyclerView，感兴趣的可以看看。</p>
<p><a href="https://github.com/ForgetAll/MRecyclerView">https://github.com/ForgetAll/MRecyclerView</a></p>
<p>当然了，由于并非是想要做一个完善的三方，所以只是简单的实现，很多情况并没有考虑到其中。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>小结</title>
    <url>/2021/10/28/%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>很久没写过技术类的文章了，最近打算重新拾起来，以前写的虽然比较浅，但是毕竟也记录了自己成长的过程，所以还是都放到这个博客上。后续写的可能更多的会和 go、java 相关，以上。</p>
<p>2021-10-28 09:05:05</p>
]]></content>
  </entry>
  <entry>
    <title>手把手教你打造支持手势放大缩小的ImageView</title>
    <url>/2016/09/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%89%93%E9%80%A0%E6%94%AF%E6%8C%81%E6%89%8B%E5%8A%BF%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E7%9A%84ImageView/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近有了新的任务，学习的时间比以前少了不少，Java回炉的文估计是得缓缓了，不过每周一篇尽量保质保量。最近感觉我文写的有点不好，因为我写东西除非必要，不然概念性的东西我基本上都是一笔带过……最近感觉这对看我文的人好像不是很友好，恩，我决定改一改，尽量写的详细而有趣一些。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-0e3fbb0aeb3d89e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.jpg"></p>
<p>好了废话时间过了，前面也说了最近有了新任务，我现在是搞定用户信息这一块。一般来说现在用户都会有个头像什么的，光有个头像还不够，你还得能点击看个大图吧？光看个大图也不够啊，不说多的，你最起码得支持用户手势放大缩小什么的吧？当时脑海里第一个想到的是PhotoView，不过整个项目好像也只有这一块涉及到用户手势放大缩小，算了，自己实现一个吧。当然了，经常刷hongyang大神博客的我自然知道hongyang大神博客里有写过<a href="http://blog.csdn.net/lmj623565791/article/details/39474553">这东西</a>。所以趁周末有空果断刷之~</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>做一个东西之前我们肯定要分析需求，分析完之后我们就可以利用我们会的，或者知道可以实现但是现在不会的去尝试解决这个需求。放大缩小图片，脑子里第一个反应就是矩阵，Android里貌似有个可以通过矩阵处理图像的东西，不过说真的，以前也没有用过几次，不过好歹有个想法了。至于让图片跟随用户手势放大缩小，肯定是需要支持手势检测了。恩，我的思路暂时就是这样了，接下来先去了解一下手势检测。</p>
<span id="more"></span>
<h3 id="手势检测"><a href="#手势检测" class="headerlink" title="手势检测"></a>手势检测</h3><p>当用户触摸屏幕时，会产生许多手势，down、up、scroll、fling等。一般情况下我们通过实现OnTouchListener是可以满足我们处理一般手势的需求的，说实话，实现手势放大缩小的ImageView是可以通过自己在OnTouch方法里面处理距离，滑动什么的去算缩放的。但是人总是要对自己好一点，如果有更简单的实现方式为什么不用呢？Android中提供了GestureDetector给程序员去判断不同的手势。另外也提供了** ScaleGestureDetector **来检测缩放手势。虽然后者很像前者的子类，但事实上并不是，后者也是一个独立的类。下面用一个简单的demo来演示一下这两者的触发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luo_pc.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.GestureDetector;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.ScaleGestureDetector;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">GestureDetector</span>.<span class="title">OnGestureListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ScaleGestureDetector</span>.<span class="title">OnScaleGestureListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义手势检测</span></span><br><span class="line">    GestureDetector detector = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//缩放检测</span></span><br><span class="line">    ScaleGestureDetector scDetector = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button testGet = (Button) findViewById(R.id.bt_test_ges);</span><br><span class="line">        Button testScges = (Button) findViewById(R.id.bt_test_scges);</span><br><span class="line">        testGet.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        testScges.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        detector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.bt_test_ges:</span><br><span class="line">                detector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">                scDetector = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.bt_test_scges:</span><br><span class="line">                scDetector = <span class="keyword">new</span> ScaleGestureDetector(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">                detector = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------implement OnGestureListener&#x27;s method-----------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent me)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (detector != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> detector.onTouchEvent(me);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> scDetector.onTouchEvent(me);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户按下屏幕就会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDown</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;onDown&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户按下触摸屏、快速移动后松开,由1个MotionEvent ACTION_DOWN,    </span></span><br><span class="line">    <span class="comment">//多个ACTION_MOVE, 1个ACTION_UP触发    </span></span><br><span class="line">    <span class="comment">//e1：第1个ACTION_DOWN MotionEvent    </span></span><br><span class="line">    <span class="comment">//e2：最后一个ACTION_MOVE MotionEvent    </span></span><br><span class="line">    <span class="comment">//velocityX：X轴上的移动速度，像素/秒    </span></span><br><span class="line">    <span class="comment">//velocityY：Y轴上的移动速度，像素/秒    </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onFling</span><span class="params">(MotionEvent arg0, MotionEvent arg1, <span class="keyword">float</span> arg2,<span class="keyword">float</span> arg3)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;onFling&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户长按触摸屏，由多个MotionEvent ACTION_DOWN触发   </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;onLongPress&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户按下触摸屏，并拖动，由1个MotionEvent ACTION_DOWN, 多个ACTION_MOVE触发   </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScroll</span><span class="params">(MotionEvent arg0, MotionEvent arg1, <span class="keyword">float</span> arg2,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">float</span> arg3)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;onScroll&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是按下的时间超过瞬间，而且在按下的时候没有松开或者是拖动的，</span></span><br><span class="line">    <span class="comment">// 那么onShowPress就会执行 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowPress</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;onShowPress&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户（轻触触摸屏后）松开，由一个1个MotionEvent ACTION_UP触发    </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;onSingleTapUp&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------implement OnScaleGestureListener&#x27;s method----------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;onScale&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;onScaleBegin&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;onScaleEnd&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>图方便，我将整个MainActivity搬上来了，你可以直接复制，然后加上对应的布局和导包就行了，接下来看一下运行现象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-468253778fcf4118.gif?imageMogr2/auto-orient/strip" alt="GestureDetector"></p>
<p>上面测试的是GestureDetector，接下来测试一下ScaleGestureDetector</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-012ce9fecd780969.gif?imageMogr2/auto-orient/strip" alt="ScaleGestureDetector"></p>
<p>如果你想要测试更多，比如GestureDetector里另外一个接口可以把我的代码复制一下改一改就好了，这了就不作过多的赘述了，代码会说话。</p>
<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>这里只对Matrix作简单的介绍。Android中Matrix是一个3 x 3的矩阵（说到矩阵都是二维的，不要看到3 x 3就想到3维去了）。先看一下Matrix的getValues和setValues方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Copy 9 values from the matrix into the array.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getValues</span><span class="params">(<span class="keyword">float</span>[] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (values.length &lt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    native_getValues(native_instance, values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Copy 9 values from the array into the matrix.</span></span><br><span class="line"><span class="comment">    Depending on the implementation of Matrix, these may be</span></span><br><span class="line"><span class="comment">    transformed into 16.16 integers in the Matrix, such that</span></span><br><span class="line"><span class="comment">    a subsequent call to getValues() will not yield exactly</span></span><br><span class="line"><span class="comment">    the same values.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(<span class="keyword">float</span>[] values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (values.length &lt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</span><br><span class="line">    &#125;</span><br><span class="line">    native_setValues(native_instance, values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到或者设置一个有9个元素的数组，继续往下看发现调用的是个native修饰方法，好吧，不继续看了，了解以上也差不多够了。其内部有</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-60bae941f66ec446.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Matrix"><br>Matrix的对图像的处理可分为四类基本变换：<br>Translate           平移变换<br>Rotate                旋转变换<br>Scale                  缩放变换<br>Skew                  错切变换<br> <br>从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。</p>
<p>从字面上理解那9个量，什么X轴缩放，什么扭曲，什么X轴偏移量，还带不认识的，没关系，我们现在做的操作比较简单，不需要用到那么多的参数。比如我们现在想设置偏移量(200,200)<br>我们可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">martrix.postTranslate(<span class="number">200</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>写完上面的东西，我已经差不多是个废人了……<br><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&quality=100&size=b4000_4000&sec=1474718985&di=55b557b4105f18a4d4f0b49234b20930&src=http://news.tom.com/dimg/2016/0810/img-1472989920829.jpg" alt="我已经差不多是个废人了"><br>毕竟当年线性代数学的不咋滴，加上之前虽然有用过Matrix但是并不是很多，接下来进入喜闻乐见的实战时间。首先是不加任何限制，直接实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luo_pc.view.CustomView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo_xiasuhuei321@163.com on 2016/9/24.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.ScaleGestureDetector;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZZoomImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span>, <span class="title">ScaleGestureDetector</span>.<span class="title">OnScaleGestureListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//suppress the unused warning because maybe it will be used sometime later</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ZZoomImageView&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大放大倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static final float SCALE_MAX = 4.0f;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认缩放</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    private float initScale = 1.0f;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手势检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ScaleGestureDetector scaleGestureDetector = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Matrix scaleMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理矩阵的9个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    float[] martixValue = new float[9];</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        setScaleType(ScaleType.MATRIX);</span><br><span class="line">        scaleGestureDetector = <span class="keyword">new</span> ScaleGestureDetector(context, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前缩放比例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public float getScale() &#123;</span></span><br><span class="line"><span class="comment">//        scaleMatrix.getValues(martixValue);</span></span><br><span class="line"><span class="comment">//        return martixValue[Matrix.MSCALE_X];</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------implement OnTouchListener----------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scaleGestureDetector.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------implement OnScaleGestureListener------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        float scale = getScale();</span></span><br><span class="line">        <span class="keyword">float</span> scaleFactor = detector.getScaleFactor();</span><br><span class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//        Log.e(TAG,&quot;君甚咸，此鱼何能及君也？&quot;);</span></span><br><span class="line"><span class="comment">//        if (scaleFactor * scale &lt; initScale)</span></span><br><span class="line"><span class="comment">//            scaleFactor = initScale / scale;</span></span><br><span class="line"><span class="comment">//        if (scaleFactor * scale &gt; SCALE_MAX)</span></span><br><span class="line"><span class="comment">//            scaleFactor = SCALE_MAX / scale;</span></span><br><span class="line">        <span class="comment">//设置缩放比例</span></span><br><span class="line">        scaleMatrix.postScale(scaleFactor, scaleFactor, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        setImageMatrix(scaleMatrix);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下跑起来是啥样的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-253a184ca49a2447.gif?imageMogr2/auto-orient/strip" alt="GIF.gif"></p>
<h3 id="将图片放到中心"><a href="#将图片放到中心" class="headerlink" title="将图片放到中心"></a>将图片放到中心</h3><p>嗯，我要是把这个用在项目里，老大要是看到了估计我就没有以后了……首先，是没有限制，可以无限缩小放大，第二是缩放中心点，默认都是ImageView中心，最后是刚开始加载出来我的图片有部分没加载，而且图片不在imageview的中心！我ImageView设置的可是俩match_parent啊。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-f5fe3fe46fc8dc97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="坑爹.png"><br>有问题没事，我们一样一样，慢慢解决。首先是图片位置，图片位置的设定我们可以在图片加载的时候将他放到ImageView的中心去，同样在这个过程中，我们可以判断图片的大小，如果图片大于ImageView尺寸则将其大小调整至ImageView的大小。首先我们在ImageView的构造器中可能是无法获取到ImageView和图片的真实尺寸的，我们可以通过ViewTreeObserver在布局完成可以获取真实尺寸的时候完成对图片的调整。而OnGlobalLayoutListener是ViewTreeObserver的内部接口，当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到。所以新增代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先让我们的类实现OnGlobalLayoutListener接口</span></span><br><span class="line"><span class="comment">public class ZZoomImageView extends ImageView implements View.OnTouchListener, ScaleGestureDetector.OnScaleGestureListener,</span></span><br><span class="line"><span class="comment">        ViewTreeObserver.OnGlobalLayoutListener</span></span><br></pre></td></tr></table></figure>
<p>然后我们在此控件的onAttachedToWindow中设置监听，在onDetachedFromWindow移除这个监听：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttachedToWindow();</span><br><span class="line">    getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//suppress deprecate warning because i have dealt with it </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">        getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getViewTreeObserver().removeGlobalOnLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后是最重要的，在回调中对图片进行处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!once)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Drawable d = getDrawable();</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//获取imageview宽高</span></span><br><span class="line">    <span class="keyword">int</span> width = getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = getHeight();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图片宽高</span></span><br><span class="line">    <span class="keyword">int</span> imgWidth = d.getIntrinsicWidth();</span><br><span class="line">    <span class="keyword">int</span> imgHeight = d.getIntrinsicHeight();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> scale = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果图片的宽或高大于屏幕，缩放至屏幕的宽或者高</span></span><br><span class="line">    <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &lt;= height)</span><br><span class="line">        scale = (<span class="keyword">float</span>) width / imgWidth;</span><br><span class="line">    <span class="keyword">if</span> (imgHeight &gt; height &amp;&amp; imgWidth &lt;= width)</span><br><span class="line">        scale = (<span class="keyword">float</span>) height / imgHeight;</span><br><span class="line">    <span class="comment">//如果图片宽高都大于屏幕，按比例缩小</span></span><br><span class="line">    <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &gt; height)</span><br><span class="line">        scale = Math.min((<span class="keyword">float</span>) imgWidth / width, (<span class="keyword">float</span>) imgHeight / height);</span><br><span class="line">    Log.e(TAG, <span class="string">&quot;scale&quot;</span> + scale);</span><br><span class="line">    <span class="comment">//将图片移动至屏幕中心</span></span><br><span class="line">    scaleMatrix.postTranslate((width - imgWidth) / <span class="number">2</span>, (height - imgHeight) / <span class="number">2</span>);</span><br><span class="line">    scaleMatrix.postScale(scale, scale, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">    setImageMatrix(scaleMatrix);</span><br><span class="line">    once = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对图片的处理核心思想就是判断图片尺寸和当前控件尺寸，图片尺寸比控件大，就对图片进行缩放处理，并且最后将图片移动至控件中心处。代码上的注释写的都很详细了，各位看官可以自行阅读。现在来看看变成啥样了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9c3d1f5b02aa555f.gif?imageMogr2/auto-orient/strip" alt="ZZ-改"></p>
<h3 id="限制缩放"><a href="#限制缩放" class="headerlink" title="限制缩放"></a>限制缩放</h3><p>很好图是到中间去了，那现在的问题就是无限缩小和放大的问题。这个问题解决思路是很简单的，做个限制就行了。</p>
<p>嗯，新增如下几个变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大放大倍数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SCALE_MAX = <span class="number">4.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认缩放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> initScale = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理矩阵的9个值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">float</span>[] martixValue = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</span><br></pre></td></tr></table></figure>
<p>上面费了那么多口水讲到的matrix的九个值啥的，终于要出现了，是不是很激动~（才怪），接下来搞个方法获取缩放比例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前缩放比例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    scaleMatrix.getValues(martixValue);</span><br><span class="line">    <span class="keyword">return</span> martixValue[Matrix.MSCALE_X];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后为了获取正确的初始缩放比例，在我们刚刚写的** onGlobalLayout **中加句话:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initScale = scale;</span><br></pre></td></tr></table></figure>
<p>当然了，得是在获取了scale值之后再添，因为我们虽然设置了初始缩放比例，但是实际中可能因为图片大小发生了缩放行为，所以我们需要再次确定初始缩放比例。接下来就是对缩放行为进行限制了，修改onScale代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> scale = getScale();</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;matrix scale----&gt;&quot;</span> + scale);</span><br><span class="line">        <span class="keyword">float</span> scaleFactor = detector.getScaleFactor();</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;scaleFactor----&gt;&quot;</span> + scaleFactor);</span><br><span class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//        Log.e(TAG,&quot;君甚咸，此鱼何能及君也？&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> ((scale &lt; SCALE_MAX &amp;&amp; scaleFactor &gt; <span class="number">1.0f</span>)</span><br><span class="line">                || (scale &gt; initScale &amp;&amp; scaleFactor &lt; <span class="number">1.0f</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scaleFactor * scale &lt; initScale)</span><br><span class="line">                scaleFactor = initScale / scale;</span><br><span class="line">            <span class="keyword">if</span> (scaleFactor * scale &gt; SCALE_MAX)</span><br><span class="line">                scaleFactor = SCALE_MAX / scale;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;scaleFactor2----&gt;&quot;</span> + scaleFactor);</span><br><span class="line">            <span class="comment">//设置缩放比例</span></span><br><span class="line">            scaleMatrix.postScale(scaleFactor, scaleFactor, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">            setImageMatrix(scaleMatrix);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>对于以上的代码，你可能会对两个scale有所疑惑，一个scale是从matrix中获得的，一个是从缩放检测中获得的。开始我看到hongyang大神的这段代码我也是有所疑惑的，但是之后我自己写了一遍，打了一下log，发现前一个在到达我们设置的最大值时，值便会固定为4，后一个值会在1左右。那么很明显前一个值是图片相对于初始尺寸的缩放，后一个是每一次缩放的实际比例。理解了这个之后便容易解决了，使用如上代码便可以限制缩放了。如果你对于缩放比例不满意，嗯，自己设置就是了，反正也不复杂。效果图就等下一个功能一起实现再放了。</p>
<p>以上一个简单，还算能用的缩放ImageView就完成了，现在的问题是缩放中心是控件的中心，如果我想设置缩放中心是我按下去的地方呢？很简单改一句代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scaleMatrix.postScale(scaleFactor, scaleFactor, </span><br><span class="line">            getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">scaleMatrix.postScale(scaleFactor, scaleFactor, </span><br><span class="line">            detector.getFocusX(), detector.getFocusY());</span><br></pre></td></tr></table></figure>
<p>但是这一改出事了……现在是能根据手势缩放中心进行缩放了，但是缩放到最小时图片位置可能发生了变化……现在还要解决的就是缩放时图片位置变化，新增如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在缩放时，控制范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBorderAndCenterWhenScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Matrix matrix = scaleMatrix;</span><br><span class="line">    RectF rectF = <span class="keyword">new</span> RectF();</span><br><span class="line">    Drawable d = getDrawable();</span><br><span class="line">    <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</span><br><span class="line">        rectF.set(<span class="number">0</span>, <span class="number">0</span>, d.getIntrinsicWidth(), d.getIntrinsicHeight());</span><br><span class="line">        matrix.mapRect(rectF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> deltaX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> deltaY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = getHeight();</span><br><span class="line">    <span class="comment">// 如果宽或高大于屏幕，则控制范围</span></span><br><span class="line">    <span class="keyword">if</span> (rectF.width() &gt;= width) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rectF.left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deltaX = -rectF.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rectF.right &lt; width) &#123;</span><br><span class="line">            deltaX = width - rectF.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rectF.height() &gt;= height) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rectF.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deltaY = -rectF.top;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rectF.bottom &lt; height) &#123;</span><br><span class="line">            deltaY = height - rectF.bottom;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果宽或高小于屏幕，则让其居中</span></span><br><span class="line">    <span class="keyword">if</span> (rectF.width() &lt; width) &#123;</span><br><span class="line">        deltaX = width * <span class="number">0.5f</span> - rectF.right + <span class="number">0.5f</span> * rectF.width();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rectF.height() &lt; height) &#123;</span><br><span class="line">        deltaY = height * <span class="number">0.5f</span> - rectF.bottom + <span class="number">0.5f</span> * rectF.height();</span><br><span class="line">    &#125;</span><br><span class="line">    scaleMatrix.postTranslate(deltaX, deltaY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在onScale方法里调用以上检测的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((scale &lt; SCALE_MAX &amp;&amp; scaleFactor &gt; <span class="number">1.0f</span>)</span><br><span class="line">        || (scale &gt; initScale &amp;&amp; scaleFactor &lt; <span class="number">1.0f</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (scaleFactor * scale &lt; initScale)</span><br><span class="line">        scaleFactor = initScale / scale;</span><br><span class="line">    <span class="keyword">if</span> (scaleFactor * scale &gt; SCALE_MAX)</span><br><span class="line">        scaleFactor = SCALE_MAX / scale;</span><br><span class="line">    Log.e(TAG, <span class="string">&quot;scaleFactor2----&gt;&quot;</span> + scaleFactor);</span><br><span class="line">    <span class="comment">//设置缩放比例</span></span><br><span class="line">    scaleMatrix.postScale(scaleFactor, scaleFactor,</span><br><span class="line">            detector.getFocusX(), detector.getFocusY());</span><br><span class="line">    checkBorderAndCenterWhenScale();</span><br><span class="line">    setImageMatrix(scaleMatrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最终成型"><a href="#最终成型" class="headerlink" title="最终成型"></a>最终成型</h3><p>以上代码算出初步的能用了，不过还有一点值得注意的地方，如果你在onTouch这个方法里的代码是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> scaleGestureDetector.onTouchEvent(event);</span><br></pre></td></tr></table></figure>
<p>那么所有的事件都会被消费，因为我点到scaleGestureDetector的onTouch方法里，没看到return false的东西，所以你设置的oncilck事件之类的都没什么卵用。</p>
<p>对于我来说这样是不行的，因为我希望用户点击一次之后可以退出当前界面，所以你可以调用sacleGestureDetector.onTouchEvent(event)但是返回false，不消耗这个事件，让onClick来处理点击事件。当我想的很美的时候，却发现这么做虽然点击事件会被处理，而且缩放也正常，但是缩放的操作会被判断为点击事件，也就是说这么干不行了。我的脑海中第二个想到的解决方案是回调，既然系统的回调不行了，那我自己设置一个时间，在这个时间之内就是click事件，我在这个事件的回调里把当前界面退出了不就行了。实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ClickCloseListener c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCloseListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickCloseListener</span><span class="params">(ClickCloseListener c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按下的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">long</span> downTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * down 和 up之间的间隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">long</span> closeTime = <span class="number">100L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置按下的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//suppress unused warning for no reason</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.closeTime = time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">    scaleGestureDetector.onTouchEvent(event);</span><br><span class="line">    <span class="comment">//如果监听为null，消费该事件，不让onclick生效</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            downTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            downTime = System.currentTimeMillis() - downTime;</span><br><span class="line">            <span class="keyword">if</span> (downTime &lt; closeTime)</span><br><span class="line">                c.close();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后看一下效果图吧~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-93a6200cf26316bb.gif?imageMogr2/auto-orient/strip" alt="ZZ-最终打死都不改版"></p>
<p>当然了，自己搞的点击事件有点不靠谱，时间间隔设置为100ms，有点短了，你可以自己设置，不过这篇文到这里也就结束了。本来还想连什么移动一起加上，嗯，现在发现好像篇幅超出了我的控制。暂且还是算了吧~而且这个姑且也算是能用了，只不过适用的场景只是查看大图的一个单独的界面。这个简单的小东西就写到这了。完整代码就放在这把，也懒得上传github了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luo_pc.view.CustomView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Luo_xiasuhuei321@163.com on 2016/9/24.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.ScaleGestureDetector;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewTreeObserver;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZZoomImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span>, <span class="title">ScaleGestureDetector</span>.<span class="title">OnScaleGestureListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewTreeObserver</span>.<span class="title">OnGlobalLayoutListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//suppress the unused warning because maybe it will be used sometime later</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ZZoomImageView&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大放大倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SCALE_MAX = <span class="number">4.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认缩放</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> initScale = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手势检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ScaleGestureDetector scaleGestureDetector = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Matrix scaleMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理矩阵的9个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">float</span>[] martixValue = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZoomImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        setScaleType(ScaleType.MATRIX);</span><br><span class="line">        scaleGestureDetector = <span class="keyword">new</span> ScaleGestureDetector(context, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttachedToWindow();</span><br><span class="line">        getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//suppress deprecate warning because i have dealt with it </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">            getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getViewTreeObserver().removeGlobalOnLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前缩放比例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        scaleMatrix.getValues(martixValue);</span><br><span class="line">        <span class="keyword">return</span> martixValue[Matrix.MSCALE_X];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在缩放时，控制范围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBorderAndCenterWhenScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Matrix matrix = scaleMatrix;</span><br><span class="line">        RectF rectF = <span class="keyword">new</span> RectF();</span><br><span class="line">        Drawable d = getDrawable();</span><br><span class="line">        <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rectF.set(<span class="number">0</span>, <span class="number">0</span>, d.getIntrinsicWidth(), d.getIntrinsicHeight());</span><br><span class="line">            matrix.mapRect(rectF);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> deltaX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> deltaY = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        <span class="comment">// 如果宽或高大于屏幕，则控制范围</span></span><br><span class="line">        <span class="keyword">if</span> (rectF.width() &gt;= width) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rectF.left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                deltaX = -rectF.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rectF.right &lt; width) &#123;</span><br><span class="line">                deltaX = width - rectF.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rectF.height() &gt;= height) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rectF.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                deltaY = -rectF.top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rectF.bottom &lt; height) &#123;</span><br><span class="line">                deltaY = height - rectF.bottom;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果宽或高小于屏幕，则让其居中</span></span><br><span class="line">        <span class="keyword">if</span> (rectF.width() &lt; width) &#123;</span><br><span class="line">            deltaX = width * <span class="number">0.5f</span> - rectF.right + <span class="number">0.5f</span> * rectF.width();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rectF.height() &lt; height) &#123;</span><br><span class="line">            deltaY = height * <span class="number">0.5f</span> - rectF.bottom + <span class="number">0.5f</span> * rectF.height();</span><br><span class="line">        &#125;</span><br><span class="line">        scaleMatrix.postTranslate(deltaX, deltaY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------implement OnTouchListener----------------------------//</span></span><br><span class="line">    <span class="keyword">private</span> ClickCloseListener c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCloseListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickCloseListener</span><span class="params">(ClickCloseListener c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按下的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">long</span> downTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * down 和 up之间的间隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">long</span> closeTime = <span class="number">100L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置按下的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//suppress unused warning for no reason</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.closeTime = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        scaleGestureDetector.onTouchEvent(event);</span><br><span class="line">        <span class="comment">//如果监听为null，消费该事件，不让onclick生效</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                downTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                downTime = System.currentTimeMillis() - downTime;</span><br><span class="line">                <span class="keyword">if</span> (downTime &lt; closeTime)</span><br><span class="line">                    c.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------implement OnScaleGestureListener------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> scale = getScale();</span><br><span class="line">        <span class="keyword">float</span> scaleFactor = detector.getScaleFactor();</span><br><span class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//        Log.e(TAG,&quot;君甚咸，此鱼何能及君也？&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> ((scale &lt; SCALE_MAX &amp;&amp; scaleFactor &gt; <span class="number">1.0f</span>)</span><br><span class="line">                || (scale &gt; initScale &amp;&amp; scaleFactor &lt; <span class="number">1.0f</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scaleFactor * scale &lt; initScale)</span><br><span class="line">                scaleFactor = initScale / scale;</span><br><span class="line">            <span class="keyword">if</span> (scaleFactor * scale &gt; SCALE_MAX)</span><br><span class="line">                scaleFactor = SCALE_MAX / scale;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;scaleFactor2----&gt;&quot;</span> + scaleFactor);</span><br><span class="line">            <span class="comment">//设置缩放比例</span></span><br><span class="line">            scaleMatrix.postScale(scaleFactor, scaleFactor,</span><br><span class="line">                    detector.getFocusX(), detector.getFocusY());</span><br><span class="line">            checkBorderAndCenterWhenScale();</span><br><span class="line">            setImageMatrix(scaleMatrix);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> once = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!once)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Drawable d = getDrawable();</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//获取imageview宽高</span></span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取图片宽高</span></span><br><span class="line">        <span class="keyword">int</span> imgWidth = d.getIntrinsicWidth();</span><br><span class="line">        <span class="keyword">int</span> imgHeight = d.getIntrinsicHeight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> scale = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果图片的宽或高大于屏幕，缩放至屏幕的宽或者高</span></span><br><span class="line">        <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &lt;= height)</span><br><span class="line">            scale = (<span class="keyword">float</span>) width / imgWidth;</span><br><span class="line">        <span class="keyword">if</span> (imgHeight &gt; height &amp;&amp; imgWidth &lt;= width)</span><br><span class="line">            scale = (<span class="keyword">float</span>) height / imgHeight;</span><br><span class="line">        <span class="comment">//如果图片宽高都大于屏幕，按比例缩小</span></span><br><span class="line">        <span class="keyword">if</span> (imgWidth &gt; width &amp;&amp; imgHeight &gt; height)</span><br><span class="line">            scale = Math.min((<span class="keyword">float</span>) imgWidth / width, (<span class="keyword">float</span>) imgHeight / height);</span><br><span class="line">        initScale = scale;</span><br><span class="line">        <span class="comment">//将图片移动至屏幕中心</span></span><br><span class="line">        scaleMatrix.postTranslate((width - imgWidth) / <span class="number">2</span>, (height - imgHeight) / <span class="number">2</span>);</span><br><span class="line">        scaleMatrix.postScale(scale, scale, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        setImageMatrix(scaleMatrix);</span><br><span class="line">        once = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>参考资料：</p>
<ul>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/39474553">Android 手势检测实战 打造支持缩放平移的图片预览效果（上）</a></li>
<li><a href="http://blog.csdn.net/lee576/article/details/7979436">初学Android,手势检测(四十七)</a></li>
<li><a href="http://blog.csdn.net/flash129/article/details/8234599">Android Matrix详解</a></li>
<li><a href="http://blog.csdn.net/ouyang_peng/article/details/8800994">我的Android进阶之旅——&gt;android Matrix图片随意的放大缩小,拖动</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>View探索</tag>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title>汉诺塔问题</title>
    <url>/2018/06/06/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>汉诺塔问题描述：<br>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>
<p>关于这个问题，简单的分析一个3层的例子，有a、b、c三根柱子，其中a柱子放着三个盘子1，2，3，c是盘子移动的目的地，b是用来辅助移动的柱子：</p>
<ul>
<li>将 1 从 a 柱子移动到 c</li>
<li>将 2 从 a 柱子移动到 b</li>
<li>将 1 从 c 柱子移动到 b</li>
<li>将 3 从 a 柱子移动到 c</li>
<li>将 1 从 b 柱子移动到 a</li>
<li>将 2 从 b 柱子移动到 c</li>
<li>将 1 从 a 柱子移动到 c<span id="more"></span></li>
</ul>
<p><img src="http://xiasuhuei321.com/images/blog/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/peitu.png" alt="配图"></p>
<p>上面只是一个3层汉诺塔的问题，实际上我们要做的是找出规律，而不是尝试向更高层数推进，因为这个问题是比较复杂的，复杂度是O(2^n)，层数稍微高一点，推起来就很费事了。所以我们要先学会放弃，放弃跟踪递归全程的企图。那这里该怎么办呢？假设有 n 层盘子：</p>
<ul>
<li>将前 n-1 层正确的移动到 b 柱子</li>
<li>将 n 移动到 c</li>
<li>将前 n-1 层的移动分解成将 n-1 移动到 c 和将 n-2 正确的移动到 b</li>
<li>以此类推，直到最后将第一层的盘子移动到 c</li>
</ul>
<p>上面是思路，下面来具体分析一下：</p>
<ul>
<li>将第 n 层的盘子移动到 c，此时 n 由 a -&gt; c</li>
<li>接上，此时前 n-1 层由 a -&gt; b</li>
<li>完成上述后，前 n-1 层的盘子在 b，那么此时 b 便成为了起源柱子，a 成为了辅助柱子，重复上述步骤</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">n, a, b, c</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(a + <span class="string">&#x27;--&gt;&#x27;</span> + c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        move(n - <span class="number">1</span>, a, c, b)</span><br><span class="line">        <span class="built_in">print</span>(a + <span class="string">&#x27;--&gt;&#x27;</span> + c)</span><br><span class="line">        move(n - <span class="number">1</span>, b, a, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">move(<span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">a--&gt;c</span><br><span class="line">a--&gt;b</span><br><span class="line">c--&gt;b</span><br><span class="line">a--&gt;c</span><br><span class="line">b--&gt;a</span><br><span class="line">b--&gt;c</span><br><span class="line">a--&gt;c</span><br></pre></td></tr></table></figure>

<p>用递归写出来的程序通常比较简洁，但是如果不能想通其中的关键也比较容易一头雾水。递归问题的关键是结束条件和如何让问题规模缩小，在分析问题的时候不要陷入展开步骤的泥沼，不然很容易深陷其中不得解。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>接口小结</title>
    <url>/2016/11/21/%E6%8E%A5%E5%8F%A3%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近对于接口的应用也算比较多吧，所以来总结一波我对于接口的使用和感悟。</p>
<h3 id="比抽象类更加抽象"><a href="#比抽象类更加抽象" class="headerlink" title="比抽象类更加抽象"></a>比抽象类更加抽象</h3><p>说到接口，就不得不提抽象类了。这二者有很多相似和很多不同的地方，但是要我说这二者最大的不同，就是标题了：接口比抽象类更加抽象。这个结论通常情况下都是成立的，除非你的抽象类什么都没……但是一般情况下你也不会弄这么个没意义的抽象类。一般来说在设计抽象类时都会考虑到这个抽象类应当实现什么功能和恰当的设计其抽象方法，前者是此抽象类的意义，后者通常是交给使用者去实现其需要的具体的功能。接口则不然，他只需要考虑一个类实现了这个接口的类“是怎样的”，需要我们做的就是恰当的设计一个接口该拥有哪些方法（这一点在java8之后略有不同，因为接口方法可以有默认的实现了），并不需要在接口里去具体的实现。从这一点看来接口比抽象类更加的抽象。</p>
<p>另外抽象类还有一个使用的技巧——防止类被实例化，这一点在《Thinking in java》中亦有提及，因为接口和抽象类都不能被实例化。这点是个概念问题，我们代码中看起来是实例化接口或者抽象类，实际上都是用的一个匿名类的对象。</p>
<h3 id="解耦利器"><a href="#解耦利器" class="headerlink" title="解耦利器"></a>解耦利器</h3><span id="more"></span>
<p>使用接口非常重要的一点就是：解耦。</p>
<p>在平时写代码的时候我们都会不自觉的敲出如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>前面的List便是一个接口，在实现相应的方法的时候，我们也会将参数尽可能的写成其接口。这使得我们的代码不依赖于具体的数据类型，只要是List的实现类即可。在这个角度看来，其的确实现了代码的解耦。</p>
<p>在Java中，回调大多是用接口来实现的，结合一个android中的实例来做一些更加深入的思考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">view.setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">      <span class="comment">//........</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是android种一个典型的回调的例子。OnClickListener是一个接口，在view的内部会持有一个OnClickListener的引用，在你设置了这个OnClickListener之后，如果有点击事件发生，会回调这个接口方法。这是回调简单的流程概述，那么再深入思考一下，这种形式不能用调用类的方法来实现么？</p>
<p>答案当然是可以，首先你要理解一点：接口是不会干活的（恩，还是先将java8排除在外好了）。当我们在设置OnClickListener的时候，我们是通过匿名内部类来实现了一个接口。回调可以分成两个角度来叙述，首先从系统角度来说，回调是一些特殊事件发生时（比如点击事件），我会通知你我这事发生了。从我们开发者角度来说，就是我希望能在特殊事件发生时（点击事件），我能有一个方法来做一些事（响应客户端的点击事件）。那么在实现的时候我们就可以在对应的位置调用一个方法（通常是空方法），然后让开发者实现这个方法不就万事大吉了么？事实上也是如此，就算不用接口我们用一个带方法内容为空的类来试试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String s)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码可以清晰的看出这是个类，只不过我起的名字是那玩意。接下来看具体的实现，为了方便我都写了静态方法，就不用再写第三个类了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> OnClickListener listener;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener listener)</span></span>&#123;</span><br><span class="line">    A.listener = listener;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这个方法代表被点击了</span></span><br><span class="line">    System.out.println(<span class="string">&quot;被点击了&quot;</span>);</span><br><span class="line">    listener.onClick(<span class="string">&quot;被点击了---&gt;回调发生了&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">    </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      click();</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c00e44762e5e0ab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回调.png"></p>
<p>由上可见，类也能实现回调，只要用户重写相应的方法就行了。事实上接口不也是如此么？只不过我们将重写接口方法称作实现罢了。</p>
<p>以上其实我觉得并不能全算为接口的功劳，这些解耦的功劳** 多态 ** 能分一半。</p>
<h3 id="多继承-amp-协议"><a href="#多继承-amp-协议" class="headerlink" title="多继承 &amp; 协议"></a>多继承 &amp; 协议</h3><p>Java中没有多重继承，只是单继承，但是利用接口，我们可以变相的实现多继承。还是刚才android中经典的例子，我们有时为了点击事件的统一编写，可能会这么干：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setOnClickListener(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>这个this就是我们的Activity或者其他的玩意，那么我们可以思考一下，这时的Activity既是Activity某个父类的子类，也是OnClickListener类。</p>
<p>回到刚开始所说的，接口的特性是啥？就是实现这个接口的类“看起来都是这样的”，有没有一种很熟悉的既视感？是了，我们常用的数据格式json、xml不都是“看起来都是这样的”么，只要是符合规范和双方协定的json或者xml，不管其具体内容是什么，我们都可以解析和使用。那么在设计和实现接口时也应当如此。比如Java集合框架的Collection接口就约定在实现boolean add(E e)方法时，如果拒绝添加一个元素应当抛出一个异常而不是返回false。当我们需要自己实现一个Collection接口的类时应当遵循这些约定，不然其他遵循这些约定而设计的方法可能会不适用于你的类。</p>
<p>以上是基于设计方面的一些小结，事实上我们并没有多少机会去设计接口……通常我们实现的接口都是用来被回调的，也就是实现某个功能而已。但是咋说呢，多了解点，让眼界开阔点也好。</p>
<p>最后觉得我好像该去看看设计模式了……</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>探究RecyclerView的ViewHolder复用</title>
    <url>/2016/12/25/%E6%8E%A2%E7%A9%B6RecyclerView%E7%9A%84ViewHolder%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<h3 id="啥是RecyclerView"><a href="#啥是RecyclerView" class="headerlink" title="啥是RecyclerView"></a>啥是RecyclerView</h3><ul>
<li>A flexible view for providing a limited window into a large data set.<br>一个在大小有限的窗口内展示大量数据集的view。恩，我的翻译一向不咋滴。。所以原文也放上了。</li>
</ul>
<p>RecyclerView网上很多文都说是用来取代ListView和GridView的，事实上RecyclerView的确可以做到ListView和GridView能做的事，而且他将ViewHolder和Adapter都作为内部类，写在了RecyclerView中。先不管这把所有类都写在RecyclerView内部的做法是否好，但是ViewHolder作为RecyclerView内部复用的单位，直接避免了不必要的findViewById，而在ListView中则需要我们自己定义ViewHolder。</p>
<h3 id="一个使用RecyclerView的示例"><a href="#一个使用RecyclerView的示例" class="headerlink" title="一个使用RecyclerView的示例"></a>一个使用RecyclerView的示例</h3><p>在进行探究之前，首先回顾一下我们是如何使用一个RecyclerView的。<br>第一步在布局文件里加上RecyclerView：</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/rv_list&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span> /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>第二步，给RecyclerView的item编写布局：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:padding=<span class="string">&quot;8dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@drawable/test&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>第三步，为RecyclerView写一个Adapter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView.ViewHolder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2016/12/25.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestAdapter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ItemViewHolder(LayoutInflater.from(mContext).inflate(R.layout.item_test, parent, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ItemViewHolder</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ItemViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里只是简单的演示，代码写的都非常的简单。。各位都不要模仿。。。</p>
<p>第四步，给RecyclerView设置对应的布局和Adapter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2016/12/25.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView mList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_test);</span><br><span class="line"></span><br><span class="line">        mList = (RecyclerView) findViewById(R.id.rv_list);</span><br><span class="line">        mList.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        mList.setAdapter(<span class="keyword">new</span> TestAdapter(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后看下效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-a6926d5d97f2a18f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="呆毛王"></p>
<p>通过以上的流程，对RecyclerView的简单使用就过完了，在这个流程中，可以看出编写Adapter是一个关键，事实上RecyclerView和ListView都一样，都是通过Adapter来设置和管理每一个item的。</p>
<h3 id="ViewHolder与复用"><a href="#ViewHolder与复用" class="headerlink" title="ViewHolder与复用"></a>ViewHolder与复用</h3><p>在复写RecyclerView.Adapter的时候，需要我们复写两个方法：</p>
<ul>
<li>onCreateViewHolder</li>
<li>onBindViewHolder</li>
</ul>
<p>这两个方法从字面上看就是创建ViewHolder和绑定ViewHolder的意思，来看一下源码中对我们实现的这两个方法的注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Called when RecyclerView needs a new &#123;<span class="doctag">@link</span> ViewHolder&#125; of the given type to represent</span></span><br><span class="line"><span class="comment">  * an item.</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;</span></span><br><span class="line"><span class="comment">  * This new ViewHolder should be constructed with a new View that can represent the items</span></span><br><span class="line"><span class="comment">  * of the given type. You can either create a new View manually or inflate it from an XML</span></span><br><span class="line"><span class="comment">  * layout file.</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;</span></span><br><span class="line"><span class="comment">  * The new ViewHolder will be used to display items of the adapter using</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #onBindViewHolder(ViewHolder, int, List)&#125;. Since it will be re-used to display</span></span><br><span class="line"><span class="comment">  * different items in the data set, it is a good idea to cache references to sub views of</span></span><br><span class="line"><span class="comment">  * the View to avoid unnecessary &#123;<span class="doctag">@link</span> View#findViewById(int)&#125; calls.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> parent The ViewGroup into which the new View will be added after it is bound to</span></span><br><span class="line"><span class="comment">  *               an adapter position.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> viewType The view type of the new View.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> A new ViewHolder that holds a View of the given view type.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> #getItemViewType(int)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> #onBindViewHolder(ViewHolder, int)</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure>
<p>当RecyclerView需要一个新的类型的item的ViewHolder的时候调用这个方法。</p>
<p>第二段描述是讲如何创建这个ViewHolder，跳过。</p>
<p>新的ViewHolder将会被用来通过adapter调用onBindViewHolder展示item。由于它将会被复用去展示在数据集中的不同items，所以缓存View的子view引用去避免不必要的对findViewById方法的调用是一个好主意。</p>
<p>看了上面的这段话，我产生了一个疑问，第一段话的意思仿佛是只有在需要新的类型的ViewHolder的时候才需要调用这个方法。如果是这样，的确可以从侧面说明他是以ViewHolder为单位来实现复用的。为了验证我的想法，我在onCreateViewHolder和onBindViewHolder方法中加入了计数的代码，看一下log：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-b7751291a4c323a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="log"></p>
<p>从中可以看出并不是像我想的那样，只调用了一次，稍微想一下也很容易想明白，因为他是通过ViewHolder复用不假，我这里只有一种ViewType，上下滑动的时候需要的ViewHolder种类是只有一种，但是需要的ViewHolder对象数量并不止一个。所以在后面创建了5个ViewHolder之后，需要的数量够了，无论我怎么滑动，他都只需要复用以前创建的对象就行了。</p>
<p>在这里，感觉ViewHolder的类型和对象数量有点像Java中Class和对象的关系。Java中第一次将.class装载入JVM虚拟机的时候，会生成一个Class对象，以后所有这个类的对象都由Class生成。是不是有点像呢？</p>
<p>看到了这个log之后，我的第一反应是在这个ViewHolder对象的数量“够用”之后就停止调用onCreateViewHolder方法，看一下源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method calls &#123;<span class="doctag">@link</span> #onCreateViewHolder(ViewGroup, int)&#125; to create a new</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ViewHolder&#125; and initializes some private fields to be used by RecyclerView.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #onCreateViewHolder(ViewGroup, int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> VH <span class="title">createViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    TraceCompat.beginSection(TRACE_CREATE_VIEW_TAG);</span><br><span class="line">    <span class="keyword">final</span> VH holder = onCreateViewHolder(parent, viewType);</span><br><span class="line">    holder.mItemViewType = viewType;</span><br><span class="line">    TraceCompat.endSection();</span><br><span class="line">    <span class="keyword">return</span> holder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现这里并没有限制，那么是不是在调用这个createViewHolder方法的时候做了限制呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">View <span class="title">getViewForPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= mState.getItemCount()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Invalid item position &quot;</span> + position</span><br><span class="line">                + <span class="string">&quot;(&quot;</span> + position + <span class="string">&quot;). Item count:&quot;</span> + mState.getItemCount());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> fromScrap = <span class="keyword">false</span>;</span><br><span class="line">    ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 0) If there is a changed scrap, try to find from there</span></span><br><span class="line">    <span class="keyword">if</span> (mState.isPreLayout()) &#123;</span><br><span class="line">        holder = getChangedScrapViewForPosition(position);</span><br><span class="line">        fromScrap = holder != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1) Find from scrap by position</span></span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        holder = getScrapViewForPosition(position, INVALID_TYPE, dryRun);</span><br><span class="line">        <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validateViewHolderForOffsetPosition(holder)) &#123;</span><br><span class="line">                <span class="comment">// recycle this scrap</span></span><br><span class="line">                <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                    <span class="comment">// we would like to recycle this but need to make sure it is not used by</span></span><br><span class="line">                    <span class="comment">// animation logic etc.</span></span><br><span class="line">                    holder.addFlags(ViewHolder.FLAG_INVALID);</span><br><span class="line">                    <span class="keyword">if</span> (holder.isScrap()) &#123;</span><br><span class="line">                        removeDetachedView(holder.itemView, <span class="keyword">false</span>);</span><br><span class="line">                        holder.unScrap();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder.wasReturnedFromScrap()) &#123;</span><br><span class="line">                        holder.clearReturnedFromScrapFlag();</span><br><span class="line">                    &#125;</span><br><span class="line">                    recycleViewHolderInternal(holder);</span><br><span class="line">                &#125;</span><br><span class="line">                holder = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fromScrap = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        <span class="keyword">if</span> (offsetPosition &lt; <span class="number">0</span> || offsetPosition &gt;= mAdapter.getItemCount()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Inconsistency detected. Invalid item &quot;</span></span><br><span class="line">                    + <span class="string">&quot;position &quot;</span> + position + <span class="string">&quot;(offset:&quot;</span> + offsetPosition + <span class="string">&quot;).&quot;</span></span><br><span class="line">                    + <span class="string">&quot;state:&quot;</span> + mState.getItemCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> type = mAdapter.getItemViewType(offsetPosition);</span><br><span class="line">        <span class="comment">// 2) Find from scrap via stable ids, if exists</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">            holder = getScrapViewForId(mAdapter.getItemId(offsetPosition), type, dryRun);</span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// update position</span></span><br><span class="line">                holder.mPosition = offsetPosition;</span><br><span class="line">                fromScrap = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span> &amp;&amp; mViewCacheExtension != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We are NOT sending the offsetPosition because LayoutManager does not</span></span><br><span class="line">            <span class="comment">// know it.</span></span><br><span class="line">            <span class="keyword">final</span> View view = mViewCacheExtension</span><br><span class="line">                    .getViewForPositionAndType(<span class="keyword">this</span>, position, type);</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                holder = getChildViewHolder(view);</span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;getViewForPositionAndType returned&quot;</span></span><br><span class="line">                            + <span class="string">&quot; a view which does not have a ViewHolder&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder.shouldIgnore()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;getViewForPositionAndType returned&quot;</span></span><br><span class="line">                            + <span class="string">&quot; a view that is ignored. You must call stopIgnoring before&quot;</span></span><br><span class="line">                            + <span class="string">&quot; returning this view.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123; <span class="comment">// fallback to recycler</span></span><br><span class="line">            <span class="comment">// try recycler.</span></span><br><span class="line">            <span class="comment">// Head to the shared pool.</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;getViewForPosition(&quot;</span> + position + <span class="string">&quot;) fetching from shared &quot;</span></span><br><span class="line">                        + <span class="string">&quot;pool&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            holder = getRecycledViewPool().getRecycledView(type);</span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">                holder.resetInternal();</span><br><span class="line">                <span class="keyword">if</span> (FORCE_INVALIDATE_DISPLAY_LIST) &#123;</span><br><span class="line">                    invalidateDisplayListInt(holder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder = mAdapter.createViewHolder(RecyclerView.<span class="keyword">this</span>, type);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;getViewForPosition created new ViewHolder&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is very ugly but the only place we can grab this information</span></span><br><span class="line">    <span class="comment">// before the View is rebound and returned to the LayoutManager for post layout ops.</span></span><br><span class="line">    <span class="comment">// We don&#x27;t need this in pre-layout since the VH is not updated by the LM.</span></span><br><span class="line">    <span class="keyword">if</span> (fromScrap &amp;&amp; !mState.isPreLayout() &amp;&amp; holder</span><br><span class="line">            .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST)) &#123;</span><br><span class="line">        holder.setFlags(<span class="number">0</span>, ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);</span><br><span class="line">        <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">            <span class="keyword">int</span> changeFlags = ItemAnimator</span><br><span class="line">                    .buildAdapterChangeFlagsForAnimations(holder);</span><br><span class="line">            changeFlags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;</span><br><span class="line">            <span class="keyword">final</span> ItemHolderInfo info = mItemAnimator.recordPreLayoutInformation(mState,</span><br><span class="line">                    holder, changeFlags, holder.getUnmodifiedPayloads());</span><br><span class="line">            recordAnimationInfoIfBouncedHiddenView(holder, info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> bound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mState.isPreLayout() &amp;&amp; holder.isBound()) &#123;</span><br><span class="line">        <span class="comment">// do not update unless we absolutely have to.</span></span><br><span class="line">        holder.mPreLayoutPosition = position;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!holder.isBound() || holder.needsUpdate() || holder.isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG &amp;&amp; holder.isRemoved()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Removed holder should be bound and it should&quot;</span></span><br><span class="line">                    + <span class="string">&quot; come here only in pre-layout. Holder: &quot;</span> + holder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        holder.mOwnerRecyclerView = RecyclerView.<span class="keyword">this</span>;</span><br><span class="line">        mAdapter.bindViewHolder(holder, offsetPosition);</span><br><span class="line">        attachAccessibilityDelegate(holder.itemView);</span><br><span class="line">        bound = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mState.isPreLayout()) &#123;</span><br><span class="line">            holder.mPreLayoutPosition = position;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</span><br><span class="line">    <span class="keyword">final</span> LayoutParams rvLayoutParams;</span><br><span class="line">    <span class="keyword">if</span> (lp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        rvLayoutParams = (LayoutParams) generateDefaultLayoutParams();</span><br><span class="line">        holder.itemView.setLayoutParams(rvLayoutParams);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!checkLayoutParams(lp)) &#123;</span><br><span class="line">        rvLayoutParams = (LayoutParams) generateLayoutParams(lp);</span><br><span class="line">        holder.itemView.setLayoutParams(rvLayoutParams);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rvLayoutParams = (LayoutParams) lp;</span><br><span class="line">    &#125;</span><br><span class="line">    rvLayoutParams.mViewHolder = holder;</span><br><span class="line">    rvLayoutParams.mPendingInvalidate = fromScrap &amp;&amp; bound;</span><br><span class="line">    <span class="keyword">return</span> holder.itemView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出的确是有条件的。当然，在此不具体分析，不然可能会深入细节无法自拔。</p>
<h3 id="Recycler-amp-amp-RecycledViewPool"><a href="#Recycler-amp-amp-RecycledViewPool" class="headerlink" title="Recycler &amp;&amp; RecycledViewPool"></a>Recycler &amp;&amp; RecycledViewPool</h3><p>说实话，上面分析完，我也有点没方向，因为毕竟整个RecyclerView一万多行代码在那，不知道看哪了，不过好在网上有篇文曾干过和我差不多的事<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0307/4032.html">RecyclerView源码分析</a>，前人指了条路，跟着看一下源码好了。</p>
<p>Recycler：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Recycler is responsible for managing scrapped or detached item views for reuse.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A &quot;scrapped&quot; view is a view that is still attached to its parent RecyclerView but</span></span><br><span class="line"><span class="comment"> * that has been marked for removal or reuse.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Typical use of a Recycler by a &#123;<span class="doctag">@link</span> LayoutManager&#125; will be to obtain views for</span></span><br><span class="line"><span class="comment"> * an adapter&#x27;s data set representing the data at a given position or item ID.</span></span><br><span class="line"><span class="comment"> * If the view to be reused is considered &quot;dirty&quot; the adapter will be asked to rebind it.</span></span><br><span class="line"><span class="comment"> * If not, the view can be quickly reused by the LayoutManager with no further work.</span></span><br><span class="line"><span class="comment"> * Clean views that have not &#123;<span class="doctag">@link</span> android.view.View#isLayoutRequested() requested layout&#125;</span></span><br><span class="line"><span class="comment"> * may be repositioned by a LayoutManager without remeasurement.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>Recycler负责管理废弃（scrapped）或者分离（detach）的item。</p>
<p>scrapped指的是仍然在RecyclerView上但是已经被标记了移除或者复用。</p>
<p>一个对Recycler的经典的使用时LayoutManager，它通过Recycler为adapter的数据集的特定位置获取一个view。如果这个view将被复用但被认为是“dirty”的，那么这个adapter将调用方法重新绑定它。如果不是，这个view可以迅速的被LayoutManager复用而不用进一步的处理。Clean view无需调用request layout，不需要重新测量就能复用。</p>
<p>RecycledViewPool：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RecycledViewPool lets you share Views between multiple RecyclerViews.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If you want to recycle views across RecyclerViews, create an instance of RecycledViewPool</span></span><br><span class="line"><span class="comment"> * and use &#123;<span class="doctag">@link</span> RecyclerView#setRecycledViewPool(RecycledViewPool)&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * RecyclerView automatically creates a pool for itself if you don&#x27;t provide one.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RecycledViewPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SparseArray&lt;ArrayList&lt;ViewHolder&gt;&gt; mScrap =</span><br><span class="line">            <span class="keyword">new</span> SparseArray&lt;ArrayList&lt;ViewHolder&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> SparseIntArray mMaxScrap = <span class="keyword">new</span> SparseIntArray();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mAttachCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX_SCRAP = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mScrap.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxRecycledViews</span><span class="params">(<span class="keyword">int</span> viewType, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        mMaxScrap.put(viewType, max);</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; scrapHeap = mScrap.get(viewType);</span><br><span class="line">        <span class="keyword">if</span> (scrapHeap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (scrapHeap.size() &gt; max) &#123;</span><br><span class="line">                scrapHeap.remove(scrapHeap.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">getRecycledView</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;ViewHolder&gt; scrapHeap = mScrap.get(viewType);</span><br><span class="line">        <span class="keyword">if</span> (scrapHeap != <span class="keyword">null</span> &amp;&amp; !scrapHeap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = scrapHeap.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">final</span> ViewHolder scrap = scrapHeap.get(index);</span><br><span class="line">            scrapHeap.remove(index);</span><br><span class="line">            <span class="keyword">return</span> scrap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mScrap.size(); i ++) &#123;</span><br><span class="line">            ArrayList&lt;ViewHolder&gt; viewHolders = mScrap.valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (viewHolders != <span class="keyword">null</span>) &#123;</span><br><span class="line">                count += viewHolders.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putRecycledView</span><span class="params">(ViewHolder scrap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewType = scrap.getItemViewType();</span><br><span class="line">        <span class="keyword">final</span> ArrayList scrapHeap = getScrapHeapForType(viewType);</span><br><span class="line">        <span class="keyword">if</span> (mMaxScrap.get(viewType) &lt;= scrapHeap.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG &amp;&amp; scrapHeap.contains(scrap)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;this scrap item already exists&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scrap.resetInternal();</span><br><span class="line">        scrapHeap.add(scrap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Adapter adapter)</span> </span>&#123;</span><br><span class="line">        mAttachCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mAttachCount--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Detaches the old adapter and attaches the new one.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * RecycledViewPool will clear its cache if it has only one adapter attached and the new</span></span><br><span class="line"><span class="comment">     * adapter uses a different ViewHolder than the oldAdapter.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldAdapter The previous adapter instance. Will be detached.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newAdapter The new adapter instance. Will be attached.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> compatibleWithPrevious True if both oldAdapter and newAdapter are using the same</span></span><br><span class="line"><span class="comment">     *                               ViewHolder and view types.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAdapterChanged</span><span class="params">(Adapter oldAdapter, Adapter newAdapter,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">boolean</span> compatibleWithPrevious)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oldAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            detach();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!compatibleWithPrevious &amp;&amp; mAttachCount == <span class="number">0</span>) &#123;</span><br><span class="line">            clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            attach(newAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArrayList&lt;ViewHolder&gt; <span class="title">getScrapHeapForType</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;ViewHolder&gt; scrap = mScrap.get(viewType);</span><br><span class="line">        <span class="keyword">if</span> (scrap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scrap = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            mScrap.put(viewType, scrap);</span><br><span class="line">            <span class="keyword">if</span> (mMaxScrap.indexOfKey(viewType) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mMaxScrap.put(viewType, DEFAULT_MAX_SCRAP);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scrap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>老规矩，先看注释：RecycledViewPool让你在多个RecyclerView之间共享View。如果你想要在RecyclerView间循环利用view，创建一个RecyclerViewPool的实例然后调用setRecyclerViewPool方法。</p>
<p>如果你不提供一个那么RecyclerView将为他自己自动的创建一个RecycledViewPool。</p>
<p>接下来看下里面的代码，内部有一个SparseArray一个SparseIntArray，看到这终于感觉快看到点子上了，毕竟看起来就像是两个放东西的容器，应该是离真相不远了。先看下SparseArray是个啥，点进去看注释第一句就是 SparseArrays map integers to Objects ，这是一个integer和对象的映射，他内部也是有两个数组一个是integer作为键的int[] mKeys的int类型的数组，另外一个是Object[] mValues的对象数组。而结合他在RecycledViewPool中的定义 SparseArray&lt;ArrayList<ViewHolder>&gt; mScrap;这种定义，表明是一个integer映射ViewHolder的集合。这个该怎么理解呢？在我们的实际使用中，很可能会有非常多种类的viewType，那么这个时候同一类的ViewHolder就保存在同一个ArrayList中，而在RecyclerView内部ViewType都是通过int类型的数字来代表的，正好符合。由此可以大致可以确定这个mScrap就是保存ViewHolder的关键了。</p>
<p>而SparseIntArray则是Integer映射Integer，在这可以结合setMaxRecycledViews方法中的第一行代码 mMaxScrap.put(viewType,max)，可以看出这是表明了一种ViewType对应的可保存对象集合的最大尺寸。</p>
<p>大致了解了下RecycledViewPool，然后回头去看一下之前被我跳过的getViewForPosition：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">View <span class="title">getViewForPosition</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span> dryRun)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= mState.getItemCount()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Invalid item position &quot;</span> + position</span><br><span class="line">                + <span class="string">&quot;(&quot;</span> + position + <span class="string">&quot;). Item count:&quot;</span> + mState.getItemCount());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> fromScrap = <span class="keyword">false</span>;</span><br><span class="line">    ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 0) If there is a changed scrap, try to find from there</span></span><br><span class="line">    <span class="keyword">if</span> (mState.isPreLayout()) &#123;</span><br><span class="line">        holder = getChangedScrapViewForPosition(position);</span><br><span class="line">        fromScrap = holder != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1) Find from scrap by position</span></span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        holder = getScrapViewForPosition(position, INVALID_TYPE, dryRun);</span><br><span class="line">        <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validateViewHolderForOffsetPosition(holder)) &#123;</span><br><span class="line">                <span class="comment">// recycle this scrap</span></span><br><span class="line">                <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">                    <span class="comment">// we would like to recycle this but need to make sure it is not used by</span></span><br><span class="line">                    <span class="comment">// animation logic etc.</span></span><br><span class="line">                    holder.addFlags(ViewHolder.FLAG_INVALID);</span><br><span class="line">                    <span class="keyword">if</span> (holder.isScrap()) &#123;</span><br><span class="line">                        removeDetachedView(holder.itemView, <span class="keyword">false</span>);</span><br><span class="line">                        holder.unScrap();</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder.wasReturnedFromScrap()) &#123;</span><br><span class="line">                        holder.clearReturnedFromScrapFlag();</span><br><span class="line">                    &#125;</span><br><span class="line">                    recycleViewHolderInternal(holder);</span><br><span class="line">                &#125;</span><br><span class="line">                holder = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fromScrap = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        <span class="keyword">if</span> (offsetPosition &lt; <span class="number">0</span> || offsetPosition &gt;= mAdapter.getItemCount()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Inconsistency detected. Invalid item &quot;</span></span><br><span class="line">                    + <span class="string">&quot;position &quot;</span> + position + <span class="string">&quot;(offset:&quot;</span> + offsetPosition + <span class="string">&quot;).&quot;</span></span><br><span class="line">                    + <span class="string">&quot;state:&quot;</span> + mState.getItemCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> type = mAdapter.getItemViewType(offsetPosition);</span><br><span class="line">        <span class="comment">// 2) Find from scrap via stable ids, if exists</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">            holder = getScrapViewForId(mAdapter.getItemId(offsetPosition), type, dryRun);</span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// update position</span></span><br><span class="line">                holder.mPosition = offsetPosition;</span><br><span class="line">                fromScrap = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span> &amp;&amp; mViewCacheExtension != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We are NOT sending the offsetPosition because LayoutManager does not</span></span><br><span class="line">            <span class="comment">// know it.</span></span><br><span class="line">            <span class="keyword">final</span> View view = mViewCacheExtension</span><br><span class="line">                    .getViewForPositionAndType(<span class="keyword">this</span>, position, type);</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                holder = getChildViewHolder(view);</span><br><span class="line">                <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;getViewForPositionAndType returned&quot;</span></span><br><span class="line">                            + <span class="string">&quot; a view which does not have a ViewHolder&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder.shouldIgnore()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;getViewForPositionAndType returned&quot;</span></span><br><span class="line">                            + <span class="string">&quot; a view that is ignored. You must call stopIgnoring before&quot;</span></span><br><span class="line">                            + <span class="string">&quot; returning this view.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123; <span class="comment">// fallback to recycler</span></span><br><span class="line">            <span class="comment">// try recycler.</span></span><br><span class="line">            <span class="comment">// Head to the shared pool.</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;getViewForPosition(&quot;</span> + position + <span class="string">&quot;) fetching from shared &quot;</span></span><br><span class="line">                        + <span class="string">&quot;pool&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            holder = getRecycledViewPool().getRecycledView(type);</span><br><span class="line">            <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">                holder.resetInternal();</span><br><span class="line">                <span class="keyword">if</span> (FORCE_INVALIDATE_DISPLAY_LIST) &#123;</span><br><span class="line">                    invalidateDisplayListInt(holder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder = mAdapter.createViewHolder(RecyclerView.<span class="keyword">this</span>, type);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;getViewForPosition created new ViewHolder&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is very ugly but the only place we can grab this information</span></span><br><span class="line">    <span class="comment">// before the View is rebound and returned to the LayoutManager for post layout ops.</span></span><br><span class="line">    <span class="comment">// We don&#x27;t need this in pre-layout since the VH is not updated by the LM.</span></span><br><span class="line">    <span class="keyword">if</span> (fromScrap &amp;&amp; !mState.isPreLayout() &amp;&amp; holder</span><br><span class="line">            .hasAnyOfTheFlags(ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST)) &#123;</span><br><span class="line">        holder.setFlags(<span class="number">0</span>, ViewHolder.FLAG_BOUNCED_FROM_HIDDEN_LIST);</span><br><span class="line">        <span class="keyword">if</span> (mState.mRunSimpleAnimations) &#123;</span><br><span class="line">            <span class="keyword">int</span> changeFlags = ItemAnimator</span><br><span class="line">                    .buildAdapterChangeFlagsForAnimations(holder);</span><br><span class="line">            changeFlags |= ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT;</span><br><span class="line">            <span class="keyword">final</span> ItemHolderInfo info = mItemAnimator.recordPreLayoutInformation(mState,</span><br><span class="line">                    holder, changeFlags, holder.getUnmodifiedPayloads());</span><br><span class="line">            recordAnimationInfoIfBouncedHiddenView(holder, info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> bound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mState.isPreLayout() &amp;&amp; holder.isBound()) &#123;</span><br><span class="line">        <span class="comment">// do not update unless we absolutely have to.</span></span><br><span class="line">        holder.mPreLayoutPosition = position;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!holder.isBound() || holder.needsUpdate() || holder.isInvalid()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG &amp;&amp; holder.isRemoved()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Removed holder should be bound and it should&quot;</span></span><br><span class="line">                    + <span class="string">&quot; come here only in pre-layout. Holder: &quot;</span> + holder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offsetPosition = mAdapterHelper.findPositionOffset(position);</span><br><span class="line">        holder.mOwnerRecyclerView = RecyclerView.<span class="keyword">this</span>;</span><br><span class="line">        mAdapter.bindViewHolder(holder, offsetPosition);</span><br><span class="line">        attachAccessibilityDelegate(holder.itemView);</span><br><span class="line">        bound = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mState.isPreLayout()) &#123;</span><br><span class="line">            holder.mPreLayoutPosition = position;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</span><br><span class="line">    <span class="keyword">final</span> LayoutParams rvLayoutParams;</span><br><span class="line">    <span class="keyword">if</span> (lp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        rvLayoutParams = (LayoutParams) generateDefaultLayoutParams();</span><br><span class="line">        holder.itemView.setLayoutParams(rvLayoutParams);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!checkLayoutParams(lp)) &#123;</span><br><span class="line">        rvLayoutParams = (LayoutParams) generateLayoutParams(lp);</span><br><span class="line">        holder.itemView.setLayoutParams(rvLayoutParams);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rvLayoutParams = (LayoutParams) lp;</span><br><span class="line">    &#125;</span><br><span class="line">    rvLayoutParams.mViewHolder = holder;</span><br><span class="line">    rvLayoutParams.mPendingInvalidate = fromScrap &amp;&amp; bound;</span><br><span class="line">    <span class="keyword">return</span> holder.itemView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在具体分析这个方法之前，先给出这个类内部几个参数的大致意思：<br>private ArrayList<ViewHolder> mAttachedScrap<br>private ArrayList<ViewHolder> mChangedScrap  与RecyclerView分离的ViewHolder列表。<br>private ArrayList<ViewHolder> mCachedViews  ViewHolder缓存列表。<br>private ViewCacheExtension mViewCacheExtension  开发者控制的ViewHolder缓存<br>private RecycledViewPool mRecyclerPool  提供复用ViewHolder池。</p>
<p>可以看到源码中已经给了我们步骤提示：</p>
<ul>
<li>If there is a changed scrap, try to find from there<br>从mChangedScrap中寻找ViewHolder</li>
<li><ol>
<li>Find from scrap by position<br>如果上一步未找到ViewHolder，则从mAttachedScrap中通过position找</li>
</ol>
</li>
<li><ol start="2">
<li>Find from scrap via stable ids, if exists<br>如果上一步未找到且存在stable id，则通过id在mAttachedScrap中找ViewHolder</li>
</ol>
</li>
<li>如果上一步未找到且mViewCacheExtension不为空，则在mViewCacheExtension中找ViewHolder</li>
<li>如果上一步未找到则通过RecycledCiewPool寻找ViewHolder</li>
<li>如果上一步未找到则通过Adapter的createViewHolder创建一个新的ViewHolder</li>
</ul>
<p>如此一来经历了以上的步骤，一个ViewHolder便会先从缓存中读取，如果都无法匹配到，则会新创建一个。如此便实现了ViewHolder的复用。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>无关技术，自己的小结，各位可以跳过~<br>最近有点小忙，而且也一直在看Java的一些东西，处于积累的阶段吧，所以文章更新的没以前勤快了。不过我还是希望自己能够坚持写下去，这次只阅读了RecyclerView的部分源码，感觉自己还有很多的不足，以后还会继续探究RecyclerView的其他东西。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>View探索</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析ArrayList</title>
    <url>/2016/11/15/%E6%B5%85%E6%9E%90ArrayList/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>Java的集合框架完备而又牛叉，其实现值得我这样的小白去一探究竟。当然了，在这我暂时不会很深入的去阅读整个集合框架，而是通过一两个实现去摸一下他的套路，希望最终我能摸到点集合框架的门路。在本文中，我将会带你阅读：</p>
<ul>
<li>ArrayList内部的基本实现</li>
<li>add()方法</li>
<li>get()方法</li>
</ul>
<p>是的，你没看错，就看这三个……当然了，ArrayList远不止如此，但现在我只会去探究一下其基本实现。</p>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><span id="more"></span>
<p>首先回忆一下平时我们是如何初始化一个ArrayList的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>得益于Java的多态使得我们可以写出如上的代码，那么无参的ArrayList的构造函数是啥样的呢？</p>
<pre><code>/**
 * Constructs an empty list with an initial capacity of ten.
 */
public ArrayList() &#123;
    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
</code></pre>
<p>接下来看看他是怎么初始化的，左边那个值是个什么东西，右边那个值又是个什么东西。</p>
<p>首先是左边：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;<span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>

<p>如果用transient声明一个实例变量，当对象存储时，它的值不需要位置。换句话说就是，用transient关键字标记的成员变量不参与序列化的过程。</p>
<p>回过头来再看看，这是个Object的数组，这就是ArrayList元素被存储的地方。ArrayList的容量就是这个数组的长度。再来看看上面那个构造函数的右边具体是个什么东西：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment"> * first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>从上面的代码可以看出来就是个空的Object数组，果然很符合空的ArrayList（笑）。接下来解析代码将会在我们调用了无参的构造函数的基础上去分析，那么让我们通过几个常用的方法去看看ArrayList内部究竟是如何使用这个Object数组的。</p>
<h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向list的末尾追加一个指定的元素，第一行代码看样子和ArrayList的尺寸有点关系，第二句代码很明显就是追加元素的操作了。那么回过头来，看看第一句代码究竟干了啥：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先从名字上分析分析……确定内部的容量，果然是和尺寸有关系的。看下具体的代码，如果elementData等于DEFAULTCAPACITY_EMPTY_ELEMENTDATA，那么会从minCapacity和DEFAULT_CAPACITY中比较大的值中挑一个出来赋给minCapacity，接着调用ensureExplicitCapacity方法</p>
<p>首先DEFAULTCAPACITY_EMPTY_ELEMENTDATA这个在前面的空构造函数中已经看到过了，如果你调用的是空的构造函数，那么在这里elementData的值明显是和这个值相等的。那么看看DEFAULT_CAPACITY是个啥东西：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>很明显就是个常数值，很明显，当你调用空的构造函数创建一个ArrayList时，其内部Object数组是一个空值，当你调用add()方法时(add(E e,int index)方法稍有不同)，他会先判断你的ArrayList是否是一个空值，如果是的话，它会给minCapacity赋上10的值然后调用ensureExplicitCapacity()方法，那么来看看那个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一行代码可以先抛开。if里判断minCapacity的值是否大于elementData的长度，那么看一下grow这个方法的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment"> * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码不多，一行一行看过来。第一行拿到内部对象数组的长度，第二行计算出新的容量。计算方式是：旧容量+旧容量/2，也就是每次扩充当前内部对象数组长度的一半。当然了，如果刚开始你的内部对象数组的长度是0的话，那你得出的值也还是0。那么newCapacity-minCapacity的值将会小于0，那么nweCapacity的值将会是10。之后便是调用Arrays.copyOf方法，这个方法最终会调用一个native方法实现将指定的数组拷贝到一个拥有新的尺寸的数组中，那么整个ensureCapacityInternal方法咱就过了一遍了。</p>
<p>在调用无参构造函数的情况下，内部的object数组尺寸是0，在调用了一系列方法之后构造了一个值为10的数组出来，最终将值插入相应的位置。</p>
<h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  index index of the element to return</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>老规矩，一行一行来看首先第一行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>边界检查，小于0或者大于内部数组的长度就报个越界的错误。</p>
<p>之后就是从数组取出这个下标的值。。没啥好说的。。数组取个值。。。</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element at the specified position in this list.</span></span><br><span class="line"><span class="comment"> * Shifts any subsequent elements to the left (subtracts one from their</span></span><br><span class="line"><span class="comment"> * indices).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index the index of the element to be removed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the element that was removed from the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一行仍旧是边界检查。modCount++还是忽视……之后取出对应下标的元素，拿到需要移动的元数量，如果数量大于0，调用arraycopy将内部数组elementData中index之后的元素统统向前移动一个位置。之后将内部数组的最后一个位置置空，方便gc去回收这块内存。在Java中强引用的内存无法被回收，所以需要我们手动的将在逻辑上已删除的元素置空。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析HashMap</title>
    <url>/2017/01/11/%E6%B5%85%E6%9E%90HashMap/</url>
    <content><![CDATA[<p>基于数组的ArrayList长于按索引获取对应元素，而在中间位置插入和删除元素，都涉及了对数组整体的移动、复制等操作，相比于链表的插入删除来说代价比较大。基于链表的LinkedList长于随机插入删除，Java的双向链表（LinekdList）只能从头到尾或者从尾到头遍历链表获取元素，相较于ArrayList也是比较慢的。那么有没有一种折中的解决方案，使得插入删除和取元素都比较便捷呢？我认为HashMap可以算是这么一种折中的解决方案。</p>
<h2 id="HashMap概述"><a href="#HashMap概述" class="headerlink" title="HashMap概述"></a>HashMap概述</h2><p>HashMap是一个实现了Map接口的哈希表，允许使用null值和null键。除了非同步和允许使用null之外，HashMap类与Hashtable大致相同。HashMap不保证映射的顺序，不保证该顺序恒久不变。</p>
<p>HashMap不是线程安全的，如果想要使用线程安全的HashMap，可以通以下代码来得到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap());</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><p>HashMap在实现上采用了类似“链表的数组”这种数据结构，也有将之称为“拉链法”的，实现方式如图。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-108f2fc31286cd0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拉链法"></p>
<p>当HashMap根据key计算的hash值一样时，就发生了碰撞，这时就会根据如图所示的结构存储存储对应的对象。而这种碰撞发生非常多的话，那么HashMap读取对象的速度就会变慢。在java 8之后，如果一个“桶”的记录过大（TREEIFY_THRESHOLD = 8），HashMap会动态的使用一个专门的treemap实现来替换它。这样可以降低频繁发生碰撞时读对象的时间复杂度，当然，这需要你插入的key实现了Comparable接口，否则这样的优化是你享受不到的~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单向链表的数据结构</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    <span class="comment">// 下个节点的引用</span></span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在构造函数中初始化</span></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复写equal方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重要的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">   * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment">   * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment">   * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 存储元素的实体数组</span></span><br><span class="line">  <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">  * The number of key-value mappings contained in this map. </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// map的容量</span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line">  <span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line">  <span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line">  <span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line">  <span class="comment">// 当实际大小超过此值时，会进行扩容 threshold = 容量 * 加载因子</span></span><br><span class="line">  <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The load factor for the hash table.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 哈希表的加载因子，加载因子在这种实现方式中是数组被填充的程度，哈希表</span></span><br><span class="line">  <span class="comment">// 填充的越满，发生冲突的机会越大。在Java的实现中默认的加载因子是0.75</span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure>
<p>接下来看一下HashMap默认的无参构造函数，看一下HashMap是如何初始化的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据注释来看说是用默认的初始化容量（16）和默认的加载因子（0.75）来构造一个空的哈希Map。虽然注释是这么说的，但是并没有看到其他的动作，特别是上面提到的table这个数组，在构造函数中没有初始化的动作，其实他是在插入元素的时候才真正的初始化这个数组。来看一下我们平时调用的map.put(key,value)是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体的实现是putVal，那么看下这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 如果table为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 事实上调用了resize()，初始化的动作就是在resize方法中完成的</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 这里根据哈希计算数组下标还是有点玄机的，留待之后讨论</span></span><br><span class="line">    <span class="comment">// 这里如果数组对应的索引下还没有插入值，将值插入</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 如果已经有值了，即发生了冲突</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 如果键值相同</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// HashMap如果频繁的发生碰撞，那么速度就会变慢，在java8 之后</span></span><br><span class="line">        <span class="comment">// 如果同一个索引频繁的发生碰撞，那么就会将这个索引底下的链表</span></span><br><span class="line">        <span class="comment">// 转换为红黑树，提升搜索的速度。很好，很牛逼的改进！</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不想注释了，自己看吧</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上简单的看了下HashMap是如何插入一个值的，在计算索引上，HashMap并没有采用我们平时的哈希值对数组长度取余。而是采用了效率比较高的 &amp; 运算，h &amp; (length - 1)，在注释中也说了，哈希表的长度必须是2的次幂，这么做的好处是什么呢？首先是h &amp; (length - 1)，length是2的次幂，那么length - 1用二进制表示的话必定全是1，而采用&amp;运算的话，无论是0或1和1进行&amp;运算，其结果既可能是0，也可能是1，这样就保证了运算后的均匀性。</p>
<p>在以上的注释中也提到了对table的初始化是在resize方法中完成的，那么看看resize方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment"> * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment"> * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment"> * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment"> * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 原数组不空</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果oldCap已经为最大容量</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每次扩容是之前的2倍，一直是2的次幂</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重新创建table数组，原数组为空，oldThr不为空</span></span><br><span class="line">    <span class="comment">// 扩展为oldThr大小</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">// 原数组为空，oldThr为空，全部使用默认值</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 桶中只有一个元素</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果第一个节点是TreeNode</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来再看一下get方法是如何获取到值得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> (key==null ? k==null :</span></span><br><span class="line"><span class="comment"> * key.equals(k))&#125;, then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise</span></span><br><span class="line"><span class="comment"> * it returns &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A return value of &#123;<span class="doctag">@code</span> null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class="line"><span class="comment"> * indicate that the map contains no mapping for the key; it&#x27;s also</span></span><br><span class="line"><span class="comment"> * possible that the map explicitly maps the key to &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> #containsKey containsKey&#125; operation may be used to</span></span><br><span class="line"><span class="comment"> * distinguish these two cases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.get and related methods</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// hash &amp; (length - 1)得到红黑树的树根或者是链表头</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)<span class="comment">// 红黑树</span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123; <span class="comment">// 链表</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浅析暂时就到这了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析LinkedList</title>
    <url>/2016/11/17/%E6%B5%85%E6%9E%90LinkedList/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文所看的源码是在idea里面查看的，一些代码和Java的源码可能有所不同……但是思想应该是一致的。<br>上一篇<a href="http://www.jianshu.com/p/5495e870ba2b">浅析ArrayList</a>简要的了解了一下ArrayList是如何实现的，ArrayList内部是用一个Object数组对象来作为容器盛放各个对象的。而LinkedList则不然，其内部实现就类似于数据结构中的双向链表。只不过在Java中可能你不能直接使用“指针”，所以得通过Java的“引用”来实现这个双向链表。那么今天也让我们通过几个比较经典的方法来看一下其内部实现。</p>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很经典的一个数据结构……（笑）</p>
<span id="more"></span>
<p>考虑到了代码的兼容性加入了泛型，这些都是可以暂时不看的，对我们了解其实现没什么大的影响。</p>
<p>这个类内部一个next一个prev分别代表了当前节点的前驱和后继，大白话就是这节点的前一个元素和后一个元素，item是保存的值。</p>
<h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addLast&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>向链表的尾部插入一个值，那么继续看看linkLast(e)是怎么实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出这个方法会将节点插入链表的尾部。在LinkedList内部有一个指向尾部的引用，所以插入尾部实现起来十分简单。先将尾节点引用指向新节点，之后判断一下头节点是否为空，如果是空的话，那么说明这个链表还没有节点，那么将第一个节点的引用指向这个节点，如果非空的话就将新的节点插入到最后一个节点的后面。</p>
<h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index of the element to return</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法会返回一个特定位置的node所存储的值。代码很少一共就两行，先看第一行的代码是个啥：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tells if the argument is the index of an existing element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过两个方法我们可以看出这个方法会检查你所给的index是否在这个链表内，如果不是会抛出索引越界的异常。</p>
<p>接下来看看第二行代码是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出这个方法还是对这个索引进行了简单的计算，如果这个索引大于链表的尺寸的一半那么他会从尾部开始遍历直到找到这个index对应的node。反之他会从这个链表的头部开始遍历。毕竟双向链表，从哪都行~</p>
<p>暂时只写这么多吧，准备周末再去看下集合框架中的那几个接口，回头来再详细的看一些东西。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析并发</title>
    <url>/2017/05/23/%E6%B5%85%E6%9E%90%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近因为自己毕业的一些事情断更了简书，一转眼已经有两个月了，是时候给自己充一波电了。本篇主要 <del>复习</del> 总结一些多线程中的基础知识，开篇打算理清一些概念性的东西，如有理解错误的地方，欢迎各位指正。</p>
<h2 id="什么是并发，为什么要用并发？"><a href="#什么是并发，为什么要用并发？" class="headerlink" title="什么是并发，为什么要用并发？"></a>什么是并发，为什么要用并发？</h2><p>并发与并行是一对相似而又有区别的的两个概念。并行是指两个或多个事件在同一时刻发生，只有在多CPU环境下才有可能发生。并发是指在一段时间内宏观上有多个程序在同时运行，但实际上每个程序只是在CPU分配的时间片内运行，每一时刻也只能由一道程序执行。</p>
<p>使用并发编程的目的是为了让程序运行的更快，但是，并不是启动更多的线程就能让程序运行的更快，这取决于代码的质量和应用场景。抛开并发代码的质量不谈，如果应用场景不得当，并发也不一定比串行的程序快，因为线程有创建和上下文切换的开销。这里不再深入，如果感兴趣可以《Java并发编程艺术》第一章中找到例子。</p>
<h2 id="Thread和一些问题"><a href="#Thread和一些问题" class="headerlink" title="Thread和一些问题"></a>Thread和一些问题</h2><span id="more"></span>
<p>首先上一段最基本的对于线程的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(Thread.currentThread().getName()))</span><br><span class="line">                .start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Thread-0</span></span><br><span class="line"><span class="comment">// Thread-1</span></span><br></pre></td></tr></table></figure>
<p>上面的例子创建了两个线程，分别打印了两条线程的名字。Thread的构造函数可以接受一个Runable参数，这个Runnable主要就是执行用户任务的代码。代码很简单，没什么好多说的。接下来还是来看一段代码和输出结果，来引入并发可能引发的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TICKET_TOTAL = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sale();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tickets--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                    <span class="string">&quot;卖出 第&quot;</span> + (TICKET_TOTAL - tickets) + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        SaleTicket saleTicket = <span class="keyword">new</span> SaleTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(saleTicket, <span class="string">&quot;一号窗口&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(saleTicket, <span class="string">&quot;二号窗口&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(saleTicket, <span class="string">&quot;三号窗口&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-3520a0f4863817d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="卖票.png"></p>
<p>代码比较简单，模拟卖票，只要有余票就可以继续卖。可以看到当我使用三个线程模拟三个窗口卖票时出现了一个奇怪的现象，就是有一个时刻三个窗口都卖出了第八张票，这显然不符合正常的预期。聪明的你肯定能想到是我代码写的不对，的确，我的代码并不是线程安全的代码。关于线程安全，有很多定义，在维基百科上是这么说的：指某个<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">函数</a>、<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%BA%93">函数库</a>在<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>环境中被调用时，能够正确地处理多个<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B">线程</a>之间的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F&action=edit&redlink=1">共享变量</a>，使程序功能正确完成。非常正确，然而看完什么信息也没得到的定义……不过没事，现在就算放一个信息量巨大的定义给你，你也看不懂，先了解下就好。</p>
<p>接下来需要思考一些问题，为什么上面的代码会不安全？这个锅我们可以轻易的丢给多线程、并发，“因为多线程并发访问修改tickets变量，导致结果不可预期”，这么说也没错，不过太笼统了。这段代码是在我的电脑上跑的，我的电脑只有一个CPU，虽说是并发，但是到CPU层面上，也是串行执行的，那么为什么会出现上面图片中奇怪的情况呢？</p>
<ul>
<li><p>在Java中线程有自己的工作内存，工作内存中保存了被该线程使用到的变量的主内存副本，所以对该副本的操作并不能直接影响到主内存，还需要将这个操作的结果同步到主内存中，其他线程才能“感知到”。</p>
</li>
<li><p>cpu在执行指令的过程中很有由于这个线程时间片耗尽而切换线程。虽然tickets–只是一行代码，但是，** 他并非原子操作 **。所以很有可能出现的情况就是这个操作虽然让这个线程里的i减了1，但是还没有来得及同步到主内存中，CPU便切换线程导致下一个线程中的i还是未减1的值。</p>
</li>
</ul>
<p>上面两点的信息量还是比较大的，要理解上面两点，首先得了解一下Java的内存模型。</p>
<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>关于Java的内存模型，我只会简单的介绍一下，不会当然暂时也没那个能力深入……</p>
<p>计算机的存储设备与处理器的运算速度有几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存来作为内存与处理器之间的缓冲。基于高速缓存的存储交互很好的解决了处理器与内存的速度矛盾，但是也为计算机系统带来了更高的复杂度，因为它引入了一个新的问题：缓存一致性。</p>
<p>在多处理器系统中，每个处理器的运算任务都有自己的高速缓存，而它们又共享同一块主内存。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致，如果真的发生这种情况，那同步回到主内存时以谁为准？</p>
<p>所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-c7789c7bebbd0d15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图"></p>
<h2 id="原子操作与volatile关键字"><a href="#原子操作与volatile关键字" class="headerlink" title="原子操作与volatile关键字"></a>原子操作与volatile关键字</h2><p>之前提到i–并不是原子操作，下面一段代码和输出可以证明i++并非原子操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serialNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSerialNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialNum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + getSerialNum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        AtomicTest atomicTest = <span class="keyword">new</span> AtomicTest();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(atomicTest).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-105a5680d9d40f53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出"><br>这里的输出出现了同样的serialNum，这说明在A线程进行serialNum++的读改操作，而尚未写入时，另一个线程B进行了读改操作，由此证明i++的读改写操作不具有原子性。</p>
<p>说了这么多原子性，还没有正式的说一下原子性的概念：原子操作是不可分割的，在执行完毕之前不会被任何其它任务或事件中断。</p>
<p>原子性对于并发来说非常有意义，涉及到线程安全就会考虑到他。对于线程安全还有两点非常重要：可见性和有序性。</p>
<ul>
<li>可见性：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看到修改值。</li>
</ul>
<p>关于可见性，之前简单介绍过Java内存模型结合我之前的例子就能理解，在买车票时，3个线程共享tickets变量，但由于每个线程都在自己的工作内存中操作变量，可能有没有及时同步到主内存的，所以有的线程没有读取到最新的值，导致操作和我们的预期不一样。</p>
<p>Java中，使用volatile关键字可以保证变量的“可见性”。但是使用volatile可以解决我上面卖车票的问题吗？答案是否定的，volatile可以解决变量可见性的问题，但是sale方法是非原子操作的问题还是存在的。volatile的另一个作用就是禁止指令重排序优化。那么什么是指令重排呢？</p>
<p>指令重排是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理。当然这种重排肯定是按照一定规则进行的，不然毫无规则的重排，也没谁能编程了。以下是一些处理器的重排规则：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9eea14f12ee974d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重排规则"></p>
<p>指令重排这里就不再深入的探讨了，有序性是指指令重排不会影响到单线程程序的执行，但多线程并发执行的正确性会受到影响。</p>
<p>在平时写非并发代码时我们从未考虑过指令重排这事，所以前半句我们可以根据自己的经验认为他是对的，那么后半句该怎么理解呢？在《深入理解Java虚拟机》是这么说的：如果在一个线程中观察另一个线程，所有的操作都是无序的。下面以一个简单的例子说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep() </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure>

<p>语句1和2没有数据依赖，是可以被重排的，如果发生了重排，对于线程1来说没关系，操作都是有序的。而对于线程2来说则可能是观测到inited为true，但是因为指令重排的关系，context还没有被初始化，而导致使用了错误的context。</p>
<p>综上，可知对于线程安全来说，需要综合考虑原子性、可见性以及有序性。在Java内存模型(Java Memory Model，简称JMM)中有一个很重要的概念：happens-before，一般翻译为“先行先发生”，如果一个动作happens-before另一个动作，则第一个动作对第二个动作可见，且第一个动作的执行顺序排在第二个操作之前。但是如果冲排序之后的执行结果与按happens-before关系来执行的结果一直，那么这种重排序并不非法（允许这种重排）。关于这事不难理解，作为应用开发者，我们并不关心底层到底怎么实现，只要保证程序运行时的语义不发生变化就可以了。happens-before是判断是否存在数据竞争、线程是否安全的主要依据。</p>
<p>在JSR133文档中介绍了以下几种包含了happens-before的操作/规则：</p>
<ul>
<li>一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>
<li>对一个锁的解锁happens-before后续的加锁。</li>
<li>对某个volatile字段的写操作happens-before任意后续对字段的读操作。</li>
<li>在某个线程对象上调用start()方法happens-before该启动了的线程中的任意动作。</li>
<li>如果A线程执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功的返回。</li>
<li>如果A happens-before B，且B happens-before C，那么A happens-before C。</li>
</ul>
<p>关于happens-before也是可以大写特写的，但是我这里就不多写了，等我有更多的实践再来吹一番。</p>
<p>本次学习总结，感觉还是学习了不少东西，刚开始写的时候几乎坚持不下去，因为我发现基本上就只能写各种资料上的东西，也因为我几乎没有实践经验。不过怎么说呢，有些东西光阅读大量的资料，自己理解了多少其实还是未知，但是如果你能把这些写出来（不是无脑抄），那一定经过了自己的思考，可以吸收更多的东西。在Java中的并发还是比较复杂的，关于并发介绍的比较清楚的当属《Java并发编程的艺术》，如果有能力的话可以直接去阅读JSR133文档。我都没有读完，如果以后真的有使用的场景，我会更深入的去学习的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>《Java核心》：并发相关章节</li>
<li>《Java编程思想》：并发相关章节</li>
<li>《Java并发编程艺术》：部分章节</li>
<li>《深入理解Java虚拟机》：并发相关章节</li>
<li>《计算机操作系统》</li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析</a></li>
<li><a href="http://blog.csdn.net/norahliu/article/details/58595039">i++是否是原子操作</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>用SurfaceView实现下雨和下雪（Kotlin）</title>
    <url>/2017/09/08/%E7%94%A8SurfaceView%E5%AE%9E%E7%8E%B0%E4%B8%8B%E9%9B%A8%E5%92%8C%E4%B8%8B%E9%9B%AA%EF%BC%88Kotlin%EF%BC%89/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近打算做一波东西巩固一下自己近期所学所得。话不多说，先看一下最终完成的效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-265cf400679f4b6c.gif?imageMogr2/auto-orient/strip" alt="下雨.gif"></p>
<p>这里比较懒……第二个图片中还是降雨……不过这不是关键点……<br><img src="http://upload-images.jianshu.io/upload_images/1976147-34137411bb9316fd.gif?imageMogr2/auto-orient/strip" alt="下雪.gif"></p>
<span id="more"></span>
<p>录制的mp4，转成了gif。第一个gif设置了帧率，所以看起来可能掉帧比较严重，但是实际上并不会，因为这里我也注意了1s要绘制60帧的问题。阅读本文需要一些基本的<code>View</code>知识和会一些基础Kotlin语法。说实话，就知识点来说，跟Kotlin是没多大关系的，只要懂基本的语法就可以了。</p>
<h2 id="理清思路"><a href="#理清思路" class="headerlink" title="理清思路"></a>理清思路</h2><p>在动手前先要理一下思路，从以下几个方面来分析一下该采用什么方案来实现这个效果：</p>
<ul>
<li><p>工作线程：首先要想到的是：这个下雨的效果需要通过不停的绘制来实现，如果在主线程做这个操作，很有可能会阻塞主线程，导致ANR或者异常卡顿。所以需要一个能在子线程进行绘制的View，毫无疑问SurfaceView可以满足这个需求。</p>
</li>
<li><p>如何实现：分析一下一颗雨滴的实现。首先，简单的效果其实可以用画线的方式代替。并不是每个人都有写轮眼，动态视力那么好的，一旦动起来谁还知道他是条线还是雨滴……当然了，Canvas绘制的API有很多，并不一定非要用这种方式来实现。所以在在设计类的时候我们将draw的方法设置成可以让子类复写就可以了，你不满意我的实现？没问题，我给你改的自由~ </p>
</li>
<li><p>下落的实现：让雨滴动起来，有两种方式，一种是纯按坐标来绘制，另外一种是利用属性动画，自己重写估值器，动态改变y值。最终我还是采用了前一种方案，后一种属性动画的方案我为什么放弃了呢？原因是：这里的绘制的方式是靠外部不断的触发绘制事件来实现动态绘制的，很显然第一种方式更加符合这里的情况。</p>
</li>
</ul>
<p>以上就是我初期的一些关于实现的思考了，接下来是代码实现分析。</p>
<h2 id="代码实现分析"><a href="#代码实现分析" class="headerlink" title="代码实现分析"></a>代码实现分析</h2><p>先放代码结构图：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-55208e1a1f5b71c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码结构"><br>WeatherShape所有天气的父类，Rain和Snow是两个具体实现类。<br>看一下父类的代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.gank_kotlin.customview.weather</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint</span><br><span class="line"><span class="keyword">import</span> android.graphics.PointF</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.context</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.extension.getScreenWidth</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/9/5.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * desc: All shape&#x27;s parent class.It describes a shape will have</span></span><br><span class="line"><span class="comment"> * what feature.It&#x27;s draw flows are:</span></span><br><span class="line"><span class="comment"> * 1.Outside the class init some value such as the start and the</span></span><br><span class="line"><span class="comment"> * end point.</span></span><br><span class="line"><span class="comment"> * 2.Invoke draw(Canvas) method, in this method, there are still</span></span><br><span class="line"><span class="comment"> * two flows:</span></span><br><span class="line"><span class="comment"> * 1) Get random value to init paint, this will affect the shape</span></span><br><span class="line"><span class="comment"> * draw style.</span></span><br><span class="line"><span class="comment"> * 2) When the shape is not used, invoke init method, and when it</span></span><br><span class="line"><span class="comment"> * is not used invoke drawWhenInUse(Canvas) method. It should be</span></span><br><span class="line"><span class="comment"> * override by user and to implement draw itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherShape</span></span>(<span class="keyword">val</span> start: PointF, <span class="keyword">val</span> end: PointF) &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> TAG = <span class="string">&quot;WeatherShape&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是正在被使用的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> isInUse = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是随机刷新的Shape</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> isRandom = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下落的速度，特指垂直方向，子类可以实现自己水平方向的速度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> speed = <span class="number">0.05f</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * shape的宽度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">5f</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shapeAlpha = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> paint = Paint().apply &#123;</span><br><span class="line">        strokeWidth = width</span><br><span class="line">        isAntiAlias = <span class="literal">true</span></span><br><span class="line">        alpha = alpha</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总共下落的时间</span></span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="number">0L</span></span><br><span class="line">    <span class="comment">// 原始x坐标位置</span></span><br><span class="line">    <span class="keyword">var</span> originX = <span class="number">0f</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据自己的规则计算加速度，如果是匀速直接 return 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAcceleration</span><span class="params">()</span></span>: <span class="built_in">Float</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绘制自身，这里在Shape是非使用的时候进行一些初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInUse) &#123;</span><br><span class="line">            lastTime += randomPre()</span><br><span class="line">            initStyle()</span><br><span class="line">            isInUse = <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawWhenInUse(canvas)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shape在使用的时候调用此方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawWhenInUse</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Shape风格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">initStyle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> random = Random()</span><br><span class="line">        <span class="comment">// 获取随机透明度</span></span><br><span class="line">        shapeAlpha = random.nextInt(<span class="number">155</span>) + <span class="number">50</span></span><br><span class="line">        <span class="comment">// 获得起点x偏移</span></span><br><span class="line">        <span class="keyword">val</span> translateX = random.nextInt(<span class="number">10</span>).toFloat() + <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> (!isRandom) &#123;</span><br><span class="line">            start.x = translateX + originX</span><br><span class="line">            end.x = translateX + originX</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是随机Shape，将x坐标随机范围扩大到整个屏幕的宽度</span></span><br><span class="line">            <span class="keyword">val</span> randomWidth = random.nextInt(context.getScreenWidth())</span><br><span class="line">            start.x = randomWidth.toFloat()</span><br><span class="line">            end.x = randomWidth.toFloat()</span><br><span class="line">        &#125;</span><br><span class="line">        speed = randomSpeed(random)</span><br><span class="line">        <span class="comment">// 初始化length的工作留给之后对应的子类去实现</span></span><br><span class="line">        <span class="comment">// 初始化color也留给子类去实现</span></span><br><span class="line">        paint.apply &#123;</span><br><span class="line">            alpha = shapeAlpha</span><br><span class="line">            strokeWidth = width</span><br><span class="line">            isAntiAlias = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果有什么想要做的，刚好可以在追加上完成，就使用这个函数</span></span><br><span class="line">        wtc(random)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Empty body, this will be invoke in initStyle</span></span><br><span class="line"><span class="comment">     * method.If current initStyle method can satisfy your need</span></span><br><span class="line"><span class="comment">     * but you still add something, by override this method</span></span><br><span class="line"><span class="comment">     * will be a good idea to solve the problem.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">wtc</span><span class="params">(random:<span class="type">Random</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">randomSpeed</span><span class="params">(random: <span class="type">Random</span>)</span></span>: <span class="built_in">Float</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个随机的提前量，让shape在竖屏上有一个初始的偏移</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">randomPre</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> random = Random()</span><br><span class="line">        <span class="keyword">val</span> pre = random.nextInt(<span class="number">1000</span>).toLong()</span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说起这个代码，恩，还是经历过一番重构的……周六去找同学玩的路上顺便重构了一下，将一些可以放到基类中的操作都抽取到了基类中。这样虽然灵活不足，但是子类可以很方便的通过继承实现一个需要类似功能的东西，就比如这里的下雨和下雪。顺便吐槽一下……我注释的风格不太好，中英混搭……如果你仔细观察，可以看到gif中的雨点或者雪花形态可能都有一些些的不一样，是的，每一滴雨和雪花，都经过了一些随机的转变。</p>
<p>里面比较重要的两个属性是isInUse和isRandom，本来想用一个容器来作为Shape的管理类，统一管理，但是这样肯定会让使用和复用的流程更加复杂。最后还是决定用简单一点的方法，Shape内部保存一个使用状态和是否是随机的。isRandoma表示这个Shape是否是随机的，随机在目前的代码中会体现在Shape的x坐标上。如果随机标识是true，那么x坐标将是0 ~ ScreenWidth中的任意值。那么不是随机的呢？在我的实现中，同一类Shape将会被分为两类，一类常量组。会拥有相对固定的x值，但是也会有10~15px的随机偏移。另一类就是随机组，x值全屏自己随机，这样就尽量让屏幕各处都有雨滴（雪花）但会有疏密之别。initStyle就是这一随机的过程，有兴趣可以看看实现~</p>
<p>start和end是Shape的左上角点和右下角点，如果你对于Cavans的api有了解，就应该知道通过对start和end的转换和计算，可以绘制出大部分的形状。</p>
<p>接下来看一下具体实现的Snow类：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.gank_kotlin.customview.weather</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.*</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.context</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.extension.getScreenHeight</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/9/5.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snow</span></span>(start: PointF, end: PointF) : WeatherShape(start, end) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 圆心，用户可以改变这个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> center = calcCenter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 半径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> radius = <span class="number">10f</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAcceleration</span><span class="params">()</span></span>: <span class="built_in">Float</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0f</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawWhenInUse</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 通过圆心与半径确定圆的位置及大小</span></span><br><span class="line">        <span class="keyword">val</span> distance = speed * lastTime</span><br><span class="line">        center.y += distance</span><br><span class="line">        start.y += distance</span><br><span class="line">        end.y += distance</span><br><span class="line">        lastTime += <span class="number">16</span></span><br><span class="line">        canvas.drawCircle(center.x, center.y, radius, paint)</span><br><span class="line">        <span class="keyword">if</span> (end.y &gt; context.getScreenHeight()) clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">calcCenter</span><span class="params">()</span></span>: PointF &#123;</span><br><span class="line">        <span class="keyword">val</span> center = PointF(<span class="number">0f</span>, <span class="number">0f</span>)</span><br><span class="line">        center.x = (start.x + end.x) / <span class="number">2f</span></span><br><span class="line">        center.y = (start.y + end.y) / <span class="number">2f</span></span><br><span class="line">        <span class="keyword">return</span> center</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">randomSpeed</span><span class="params">(random: <span class="type">Random</span>)</span></span>: <span class="built_in">Float</span> &#123;</span><br><span class="line">        <span class="comment">// 获取随机速度0.005 ~ 0.01</span></span><br><span class="line">        <span class="keyword">return</span> (random.nextInt(<span class="number">5</span>) + <span class="number">5</span>) / <span class="number">1000f</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">wtc</span><span class="params">(random: <span class="type">Random</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 设置颜色渐变</span></span><br><span class="line">        <span class="keyword">val</span> shader = RadialGradient(center.x, center.y, radius,</span><br><span class="line">                Color.parseColor(<span class="string">&quot;#FFFFFF&quot;</span>), Color.parseColor(<span class="string">&quot;#D1D1D1&quot;</span>),</span><br><span class="line">                Shader.TileMode.CLAMP)</span><br><span class="line">        <span class="comment">// 外部设置的起始点其实并不对，先计算出半径</span></span><br><span class="line">        radius = random.nextInt(<span class="number">10</span>) + <span class="number">15f</span></span><br><span class="line">        <span class="comment">// 根据半径计算start end</span></span><br><span class="line">        end.x = start.x + radius</span><br><span class="line">        end.y = start.y + radius</span><br><span class="line">        <span class="comment">// 计算圆心</span></span><br><span class="line">        calcCenter()</span><br><span class="line"></span><br><span class="line">        paint.apply &#123;</span><br><span class="line">            setShader(shader)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        isInUse = <span class="literal">false</span></span><br><span class="line">        lastTime = <span class="number">0</span></span><br><span class="line">        start.y = -radius * <span class="number">2</span></span><br><span class="line">        end.y = <span class="number">0f</span></span><br><span class="line"></span><br><span class="line">        center = calcCenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类只要理解了圆心的计算和绘制，基本也就没什么东西了。首先排除干扰项，getAcceleration这玩意在设计之初是用来通过加速度计算路程的，后来发现……算了，还是匀速吧……于是都return 0f了。这里wtc()函数和drawWhenInUse可能会看的你一脸懵逼，什么函数名，drawWhenInUse倒是见名知意，这wtc()是什么玩意？这里wtc是相当于一种追加初始化，完全状态的函数名应该是wantToChange()。这些个函数调用流程是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-a48d7db586a5fd1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"></p>
<p>其中draw(canvas)是父类的方法，对供外部调用的方法，在isInUse标识位为false时对Shape进行初始化操作，具体的就是调用initStyle()方法，而wtc()则会在initStyle()方法的最后调用。如果你有什么想要追加的初始化，可以通过这个函数实现。而drawWhenInUse(canvas)方法则是需要实现动态绘制的函数了。我这里就是在wtc()函数中进行了一些初始化操作，并且根据圆的特性重新计算了start、end和圆心。</p>
<p>接下来，就看看我们到底是怎么把这些充满个性（口胡）的雪绘制到屏幕上：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.gank_kotlin.customview.weather</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color</span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat</span><br><span class="line"><span class="keyword">import</span> android.graphics.PorterDuff</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceHolder</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceView</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.extension.LogUtil</span><br><span class="line"><span class="keyword">import</span> java.lang.Exception</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/9/5.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherView</span></span>(context: Context, attributeSet: AttributeSet?, defaultStyle: <span class="built_in">Int</span>) :</span><br><span class="line">        SurfaceView(context, attributeSet, defaultStyle), SurfaceHolder.Callback &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">&quot;WeatherView&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context, attributeSet: AttributeSet?) : <span class="keyword">this</span>(context, attributeSet, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context) : <span class="keyword">this</span>(context, <span class="literal">null</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 低级并发，Kotlin中支持的不是很好，所以用一下黑科技</span></span><br><span class="line">    <span class="keyword">val</span> lock = Object()</span><br><span class="line">    <span class="keyword">var</span> type = Weather.RAIN</span><br><span class="line">    <span class="keyword">var</span> weatherShapePool = WeatherShapePool()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Volatile</span> <span class="keyword">var</span> canRun = <span class="literal">false</span></span><br><span class="line">    <span class="meta">@Volatile</span> <span class="keyword">var</span> threadQuit = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> thread = Thread &#123;</span><br><span class="line">        <span class="keyword">while</span> (!threadQuit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!canRun) &#123;</span><br><span class="line">                synchronized(lock) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        LogUtil.i(TAG, <span class="string">&quot;条件尚不充足，阻塞中...&quot;</span>)</span><br><span class="line">                        lock.wait()</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 正式开始表演</span></span><br><span class="line">                <span class="keyword">val</span> canvas = holder.lockCanvas()</span><br><span class="line">                <span class="keyword">if</span> (canvas != <span class="literal">null</span>) &#123;</span><br><span class="line">                    canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)</span><br><span class="line">                    draw(canvas, type, startTime)</span><br><span class="line">                &#125;</span><br><span class="line">                holder.unlockCanvasAndPost(canvas)</span><br><span class="line">                <span class="keyword">val</span> drawTime = System.currentTimeMillis() - startTime</span><br><span class="line">                <span class="comment">// 平均16ms一帧才能有顺畅的感觉</span></span><br><span class="line">                <span class="keyword">if</span> (drawTime &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">16</span> - drawTime)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line"><span class="comment">//                e.printStackTrace()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.apply &#123; name = <span class="string">&quot;WeatherThread&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">surfaceChanged</span><span class="params">(holder: <span class="type">SurfaceHolder</span>?, format: <span class="type">Int</span>, width: <span class="type">Int</span>, height: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// surface发生了变化</span></span><br><span class="line"><span class="comment">//        canRun = true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">surfaceDestroyed</span><span class="params">(holder: <span class="type">SurfaceHolder</span>?)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 在这里释放资源</span></span><br><span class="line">        canRun = <span class="literal">false</span></span><br><span class="line">        LogUtil.i(TAG, <span class="string">&quot;surfaceDestroyed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">surfaceCreated</span><span class="params">(holder: <span class="type">SurfaceHolder</span>?)</span></span> &#123;</span><br><span class="line">        threadQuit = <span class="literal">false</span></span><br><span class="line">        canRun = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没有执行wait的话，这里notify会抛异常</span></span><br><span class="line">            synchronized(lock) &#123;</span><br><span class="line">                lock.notify()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        LogUtil.i(TAG, <span class="string">&quot;init开始&quot;</span>)</span><br><span class="line">        holder.addCallback(<span class="keyword">this</span>)</span><br><span class="line">        holder.setFormat(PixelFormat.RGBA_8888)</span><br><span class="line"><span class="comment">//        initData()</span></span><br><span class="line">        setZOrderOnTop(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//        setZOrderMediaOverlay(true)</span></span><br><span class="line">        thread.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(canvas: <span class="type">Canvas</span>, type: <span class="type">Weather</span>, startTime: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// type什么的先放一边，先实现一个</span></span><br><span class="line">        weatherShapePool.drawSnow(canvas)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">        RAIN,</span><br><span class="line">        SNOW</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        threadQuit = <span class="literal">true</span></span><br><span class="line">        canRun = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            synchronized(lock) &#123;</span><br><span class="line">                lock.notify()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>init{}是kotlin中提供给我们用于初始化的代码块，在init进行了一些初始化操作并让线程start了。看一下线程中执行的代码，首先会判断一个叫做canRun的标识，这个标识会在surface被创建的时候置为true，否则将会通过一个对象让这个线程等待。而在surface被创建后，则会调用notify方法让线程重新开始工作。之后是进行绘制的工作，绘制前后会有一个计时的动作，计算时间是否小于16ms，如果不足，则让thread sleep 补足插值。因为16ms一帧的绘制速度就足够了，不需要绘制太快浪费资源。</p>
<p>这里可以看到我创建了一个Java的Object对象，主要是因为Kotlin本身对于一些并发原语支持的并不好。Kotlin中任何对象都是继承与Any，Any并没有wait、notify等方法，所以这里用了黑科技……创建了Java对象……</p>
<p>代码中关键代码绘制调用了WeatherShapePool的drawRain(canvas)方法，最后在看一下这个类：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.gank_kotlin.customview.weather</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas</span><br><span class="line"><span class="keyword">import</span> android.graphics.PointF</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.context</span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.extension.getScreenWidth</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/9/7.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherShapePool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> constantRain = ArrayList&lt;Rain&gt;()</span><br><span class="line">    <span class="keyword">val</span> randomRain = ArrayList&lt;Rain&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> constantSnow = ArrayList&lt;Snow&gt;()</span><br><span class="line">    <span class="keyword">val</span> randomSnow = ArrayList&lt;Snow&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        initData()</span><br><span class="line">        initSnow()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> space = context.getScreenWidth() / <span class="number">20</span></span><br><span class="line">        <span class="keyword">var</span> currentSpace = <span class="number">0f</span></span><br><span class="line">        <span class="comment">// 将其均匀的分布在屏幕x方向上</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.19</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> rain = Rain(PointF(currentSpace, <span class="number">0f</span>), PointF(currentSpace, <span class="number">0f</span>))</span><br><span class="line">            rain.originLength = <span class="number">20f</span></span><br><span class="line">            rain.originX = currentSpace</span><br><span class="line">            constantRain.add(rain)</span><br><span class="line">            currentSpace += space</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0.</span><span class="number">.9</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> rain = Rain(PointF(<span class="number">0f</span>, <span class="number">0f</span>), PointF(<span class="number">0f</span>, <span class="number">0f</span>))</span><br><span class="line">            rain.isRandom = <span class="literal">true</span></span><br><span class="line">            rain.originLength = <span class="number">20f</span></span><br><span class="line">            randomRain.add(rain)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">drawRain</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (r <span class="keyword">in</span> constantRain) &#123;</span><br><span class="line">            r.draw(canvas)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (r <span class="keyword">in</span> randomRain) &#123;</span><br><span class="line">            r.draw(canvas)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initSnow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> space = context.getScreenWidth() / <span class="number">20</span></span><br><span class="line">        <span class="keyword">var</span> currentSpace = <span class="number">0f</span></span><br><span class="line">        <span class="comment">// 将其均匀的分布在屏幕x方向上</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.19</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> snow = Snow(PointF(currentSpace, <span class="number">0f</span>), PointF(currentSpace, <span class="number">0f</span>))</span><br><span class="line">            snow.originX = currentSpace</span><br><span class="line">            snow.radius = <span class="number">20f</span></span><br><span class="line">            constantSnow.add(snow)</span><br><span class="line">            currentSpace += space</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0.</span><span class="number">.19</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> snow = Snow(PointF(<span class="number">0f</span>, <span class="number">0f</span>), PointF(<span class="number">0f</span>, <span class="number">0f</span>))</span><br><span class="line">            snow.isRandom = <span class="literal">true</span></span><br><span class="line">            snow.radius = <span class="number">20f</span></span><br><span class="line">            randomSnow.add(snow)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">drawSnow</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(r <span class="keyword">in</span> constantSnow)&#123;</span><br><span class="line">            r.draw(canvas)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (r <span class="keyword">in</span> randomSnow)&#123;</span><br><span class="line">            r.draw(canvas)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类还是比较简单的，只是一个单纯的容器，至于叫Pool……因为刚开始自己想的是自己管理回收复用之类的，所以起了个名叫Pool，后来感觉这玩意好像不用实现的这么复杂……</p>
<p>总之，这玩意，会者不难，我的代码也非尽善尽美，如果我有任何纰漏或者你有什么好的意见，都可以提出，邮件或者是在文章下评论最佳。</p>
<p>项目地址：<a href="https://github.com/ForgetAll/GankKotlin">https://github.com/ForgetAll/GankKotlin</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>后面我发现我的代码虽然实现了这个功能，但是setZOrderOnTop(true)这样的代码会有副作用，影响到了后续其他的Activity的交互。之后试了很多网上的方法，但是都不行。后来又想到了 PorterDuff.Mode.DST_OVER ，这种绘制虽然可以实现上面的效果，但是效率非常低，雨下的异常的卡顿，可能是计算量比较大？不管这个，后来看到了别人的实现，自己绘制surfaceview的背景，而之后的view作为surfaceview之上的遮盖物，不设置背景，这样也能实现之前的效果，并且不影响交互，关键是还不卡。放上解决代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> skyBackgroud = GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, RAIN_D)</span><br><span class="line"><span class="comment">// 感谢 mixiaoxiao 大神的实现思路</span></span><br><span class="line">skyBackgroud.setBounds(<span class="number">0</span>, <span class="number">0</span>, measuredWidth, measuredHeight)</span><br><span class="line">skyBackgroud.draw(canvas)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>理解JavaScript闭包</title>
    <url>/2018/06/09/%E7%90%86%E8%A7%A3JavaScript%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>最近把 JavaScript 的基本语法大致看了一下，JavaScript 中的闭包概念理解起来还是有一点难度的。在看了一些资料和结合 Java 的的一些经验，感觉对闭包的概念稍微有了一些概念，这里记录一下。</p>
<h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p>网上看了很多解释，觉得比较简明的一个解释放上：有权访问另一个函数作用域变量的函数都是闭包。</p>
<p>接下来剥丝抽茧，一步一步的分析 JavaScript 中的闭包。首先我们可能会碰到一个计数的需求，可能用来记录用户的某个操作次数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>很简单，但是有一个问题，这样声明的的变量 count 是属于 window 的，页面的其他脚本也可以改变 count 值，并不需要去调用 add() 函数。如果我们希望外部无法访问到 count ，只可以通过调用 add() 来增加 count 的计数该怎么办呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> add();</span><br><span class="line"><span class="built_in">console</span>.log(a());</span><br><span class="line"><span class="built_in">console</span>.log(a());</span><br><span class="line"><span class="built_in">console</span>.log(a());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>可以看到正确工作了，这种在匿名函数中访问外部函数的局部变量的操作，就是闭包。其实这种操作非常的像 Java 中的内部类，这里用 Java 代码来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> InnerClass counter = <span class="keyword">new</span> InnerClass();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        Count c = <span class="keyword">new</span> Count();</span><br><span class="line">        System.out.println(c.counter.add());</span><br><span class="line">        System.out.println(c.counter.add());</span><br><span class="line">        System.out.println(c.counter.add());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>在 Java 中，普通的内部类持有一个外部类的引用，所以天然的可以访问外部类的成员（即使是私有成员）。这里的 Count c = new Cout(); 在对象 c 初始化也初始化了变量 count 和 InnerClass counter。而在 JavaScript 中，其实也可以这么理解：var a =  add(); 实际上就是创建了一个函数对象，var count = 0;这里是在对象初始化的时候执行的，而内部定义的匿名函数则是后续被调用的。后续的 a() 调用的实际上调用的是函数对象中的匿名函数。</p>
]]></content>
      <categories>
        <category>前端学习</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>百度地图Key验证失败230错误</title>
    <url>/2016/07/21/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEKey%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5230%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>####写在文集前面:####<br>这个新增的文集用来记录一些犯过的错，希望各位可以避免。以后可能会把自己遇到的坑慢慢补上来。</p>
<p>####进入正题####<br>最近有需求要用到地图，同学和我说高德地图社区都关了，他都换百度了……所以我果断……直接用百度地图吧。按照官方文档的步骤，一路下来都很简单。但是在使用官方示例demo的时候却碰到了如下的错误：</p>
<blockquote>
<p>baidumapsdk.demo E/baidumapsdk: Authentication Error errorcode: 230 uid: -1 appid -1 msg: APP Scode码校验失败</p>
</blockquote>
<p>首先我可以确认我包名是没有错的，而且我还进了gradle里看了下，确认都是一致的。那么问题一定时候出在SHA1上的了，但是讲道理我用你的demo我又没打包发布，用的肯定是debug.keystore吧……</p>
<span id="more"></span>
<p>诶？等等……难不成他指定了debug.keystore所以导致我获取到的SHA1并不对？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-d602a63ec701c8ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="debug.png"></p>
<p>我看了一眼……哎哟卧槽还真是，难怪一直验证失败。那接下来的事情就好办了，要么获取这个debug.keystore的SHA1，要么把这个keystore路径换掉。我直接获取了这个debug.keystore的SHA1并且和我电脑上默认的作了一下对比</p>
<blockquote>
<p>keytool -list -v -keystore debug.keystore</p>
</blockquote>
<p>好了走你~！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-18be5a30e0d51f8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="真不一样.png"></p>
<p>可以很明显的看出来，这俩是不一样的，所以验证失败是可以理解的……我的问题就这么解决了，值得注意的是发布版的签名证书又不一样了，到时候还得重新获取SHA1信息，重新获取AK。（当然百度其实是给了发布版和开发板两个SHA1让你填的，我手上并没有打包的东西，所以不怎么了解这一块）</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>填坑</tag>
        <tag>入门学习</tag>
      </tags>
  </entry>
  <entry>
    <title>百度定位 &amp; 地理编码检索环境配置</title>
    <url>/2017/06/16/%E7%99%BE%E5%BA%A6%E5%AE%9A%E4%BD%8D%20&amp;%20%E5%9C%B0%E7%90%86%E7%BC%96%E7%A0%81%E6%A3%80%E7%B4%A2%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>第三方只要文档详细，基本的功能用起来是十分方便的（和硬件底层有关的就算了。。），但是环境配置可谓入门小白的一大噩梦，反正我刚开始学的时候，各种环境配置简直让我挠破了头。这里我会详细的记一下我集成的步骤。</p>
<h2 id="1-申请秘钥"><a href="#1-申请秘钥" class="headerlink" title="1.申请秘钥"></a>1.申请秘钥</h2><p>这里只列出两个关键步骤的操作：</p>
<ul>
<li>获取包名</li>
<li>获取SHA1</li>
</ul>
<span id="more"></span>
<p>获取包名非常的简单，只要在AndroidManifest中看一下package的值就可以了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-1f6ec70fdf34dd82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="包名"></p>
<p>接下来是获取SHA1，这里简单的介绍一下，我们每次打包都会使用签名文件生成apk。而我们debug的时候看似没有这一过程，实际上Android Studio用了一个debug.keystore签名文件来打debug包。当然，这个签名文件是可以自己指定的，比如用以下的代码指定debug的签名文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">signingConfigs&#123;</span><br><span class="line">    debug&#123;</span><br><span class="line">        storeFile file(&quot;xxx&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以如果无论你怎么获取SHA1，都鉴权失败，那么可能就是你获取的SHA1并非签名文件的的SHA1，这一点注意一下就行了。</p>
<p>我们需要一个叫做keytool的工具来获取SHA1，如果你在使用的时候显示“keytool不是内部或外部命令xxxx”之类的东西，那么是因为你Java的环境变量没有配置好。可能你的Java命令可以用，但是Javac不行。javac和keytool都是在java/jdk/bin目录下的exe文件，不配也可以用，只不过要写全目录，那还是配好环境变量吧。只要你javac可以用，那么keytool也可以。</p>
<p>准备工作和注意点说完了，开始获取SHA1吧，cmd中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .android</span><br><span class="line">keytool -list -v -keystore debug.keystore</span><br></pre></td></tr></table></figure>
<p>默认的密码是android，敲入回车即可看见SHA1<br><img src="http://upload-images.jianshu.io/upload_images/1976147-2bc13432ac2fd136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SHA1"><br>之后根据这个去申请秘钥就好了。</p>
<p>申请好秘钥，将AK写入清单文件的application标签里面，我这是定位，上面的name是lbsapi，如果是地图的话，可能要额外添加一个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">           android:name=&quot;com.baidu.lbsapi.API_KEY&quot;</span><br><span class="line">           android:value=&quot;your key&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h2><p>我这里是集成定位，不过配置环境的步骤都差不多。</p>
<p>首先是下载官方提供的开发包，注意选择能满足自己需求的包，没必要一股脑的全下下来。像我就是用了定位和检索两个功能，选择这两个的开发包下载就行了。下载好将几个架构的so和jar包都放入项目中的libs文件夹下，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-1c527141afc51fa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="libs.png"></p>
<p>鼠标右键点jar包add as library，或者自己在build.gradle中的dependencies写一行compile files(‘libs/BaiduLBS_Android.jar’)，将jar包引入项目。接着比较重要的一点来了，将jniLibs指向libs目录。在android中存放so文件的目录一般是jniLibs，但是在Android Studio中我们是可以通过groovy让jniLibs指向libs的，方法就是在app的build.gradle中的android{}中添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sourceSets&#123;</span><br><span class="line">    main&#123;</span><br><span class="line">        jniLibs.srcDirs = [&#x27;libs&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，百度定位所需要的jar包和so文件就全部引入了。这里还有一点需要注意，虽然百度不需要配置。就是libs中的这几个文件夹，arm64-v8a，armeabi等等，这些指的是设备cpu的架构。对应架构的cpu会去对应的文件夹下找相应的so文件，如果没找到就会报错。百度这里支持的很好，有五个架构CPU的so文件，那如果只有一个armeabi该怎么办呢？这在开发中是经常碰到的，这个时候就需要abiFilter了，这里只给个名字，各位请自行搜索。</p>
<p>权限还有service的配置以及具体的使用，跟着文档来就好了，文档还是很详细的。</p>
<p>最后碰到问题不要慌，慢慢搜索，总是能找到答案的。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>填坑</tag>
      </tags>
  </entry>
  <entry>
    <title>第一话--从头再来</title>
    <url>/2016/09/05/%E7%AC%AC%E4%B8%80%E8%AF%9D--%E4%BB%8E%E5%A4%B4%E5%86%8D%E6%9D%A5/</url>
    <content><![CDATA[<p>一直打算让自己的Java回炉重新锻造一下，那么，从现在开始吧。</p>
<p>本文是阅读《Thinking in Java》(以下简称TIJ)第七章之后的产物，会包含以下：</p>
<ul>
<li>一个问题</li>
<li>一些思考</li>
<li>重载与重写</li>
<li>final</li>
</ul>
<h3 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h3><span id="more"></span>
<p>如图代码，test明明是类A的私有成员变量，（1）为什么其子类B的实例能够正常使用set方法打印出test?（2）这又使我想起了前一段时间一个朋友问我的问题，new一个子类的时候，是不是会同时new出对应的父类？构造方法到底仅仅只是初始化成员变量，还是同时会申请内存空间？<br><img src="http://upload-images.jianshu.io/upload_images/1976147-bb49ffa7bdc02a97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p>
<ul>
<li>为什么子类B的实例能够正常使用set方法打印出test？</li>
<li>new一个子类的时候，是不是会同时new出对应的父类？</li>
</ul>
<p>首先我们需要明确的继承的一些特性，** 子类拥有父类的所有属性和方法 <strong>，这是一点。第二点，</strong> private修饰的变量、方法仅类内可访问 **，出了这个类，对不起你看不到。当然了，通过反射之类的技巧还是有办法的，但是这不在我的讨论范围之内。</p>
<p>TIJ对第一点有一些印证的描述：<br>子类对象的正确初始化至关重要，而且也仅有一种方法来保证这一点，在构造器中调用父类构造器来执行初始化，父类构造器具有执行父类初始化所需要的所有东西。</p>
<p>那么以上的问题应该可以迎刃而解了：private修饰的test仅在A类中是可以访问到的，虽然B类继承了A类，拥有这一属性，但是遗憾的是他并没有打开箱子的密码，并不能访问到。但是public修饰的set方法子类B是可以访问的，于是调用set方法打印了test的值。在new一个子类的时候并不会同时new出对应的父类，而是会调用父类的构造器。构造方法可以理解成一段比较特殊的代码，可以用来初始化实例的数据，但是只有在new 构造方法名 的时候才会申请内存空间。</p>
<h2 id="一些思考（1）"><a href="#一些思考（1）" class="headerlink" title="一些思考（1）"></a>一些思考（1）</h2><p>即使在子类中调用父类的构造器，有时也无法保证所有成员都被初始化。事实上在我们平时写代码的时候，有很多成员并非是在构造器中初始化的，而是在我们需要用之前初始化，所以当我们在考虑到继承的情况下，需要多考虑一些未在构造器中被初始化的成员。</p>
<h2 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h2><ul>
<li><p>重载<br>重载是指方法名都一样，但是参数不一样，返回值也可以一样。但是如果参数完全相同，只有返回值是不一样的，那是不可行的。<br><img src="http://upload-images.jianshu.io/upload_images/1976147-ead64610921b9516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p>
</li>
<li><p>重写<br>重写通常发生在子类，子类写一个父类中有的同名方法（方法参数，返回类型一致），那么在调用这个名字的方法时将会调用子类中的这个方法。当你确定要覆盖父类的方法时，建议使用注解@Override，这样可以防止你在不想重载时而以外地进行了重载。</p>
</li>
</ul>
<h2 id="一些思考（2）"><a href="#一些思考（2）" class="headerlink" title="一些思考（2）"></a>一些思考（2）</h2><p>看到Override这一块的时候，不经想起来了Android中的Handler，平时我们的写法都是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>关于以上写static修饰符将会在下文给出解释。</p>
<p>首先Handler是个抽象类，但是我点进去，搜了一下abstract这个关键字，没有!一个都没有！<br><img src="http://upload-images.jianshu.io/upload_images/1976147-abce9bf24ad7b7f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没有abstract.png"></p>
<p>关于abstract class 文档是这样描述的：抽象类是不完全的类，或者被认为是不完全的。那么这个就容易理解了，抽象类并未强制要求你一定要有abstract method，只要你自己认为这个类是abstract class就可以给他加上。那么”=”右边的写法是怎么回事呢？</p>
<p>右边的写法想要表达的意思是：创建一个继承自Handler的匿名类对象。可能你会和我有一样的疑惑，名字不是handler在左边挂着呢么？如果你有这个疑惑……恭喜，你该和我一起回去重造Java了……因为上面说的很清楚了是”=”右边的，右边通过new表达式返回的引用被自动转型为Handler，所以说这是一个Handler的子类，用一个通俗易懂的问结束这个话题：那么这个子类的名呢？</p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final关键字根据上下文和修饰对象的不同可能会有一些差别。</p>
<ul>
<li><p>变量<br>如果final修饰的是基本数据类型，那么此变量恒定不变。如果final修饰的是引用类型，那么一旦该引用类型被初始化指向一个对象，那么久无法将他改为指向另一个对象。但是需要注意的是对象本身的值是可以改变的。</p>
</li>
<li><p>方法<br>final修饰的方法不可以被复写。</p>
</li>
<li><p>类<br>final修饰的方法不可以被继承。</p>
</li>
</ul>
<h2 id="为什么匿名内部类中形参要是final的？"><a href="#为什么匿名内部类中形参要是final的？" class="headerlink" title="为什么匿名内部类中形参要是final的？"></a>为什么匿名内部类中形参要是final的？</h2><p>在写Android程序时，很多时候都会碰到需要向匿名内部类传参的情况。一般这种情况我们也就是改一下……那么为什么要传入final类型呢？</p>
<p>在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，然而这从程序员的角度来看这是不可行的，毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用 final 来避免形参的不改变。<br>** 简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用 final 来让该引用不可改变。 **<br>** 故如果定义了一个匿名内部类，并且希望它使用一个其外部定义的参数，那么编译器会要求该参数引用是 final 的。 **</p>
<p>最后揭晓一下以上为什么要用static修饰Handler，因为内部类会隐性的持有一个外部类的引用，这个外部类可能是个Activity，因为这可能会导致Activity无法被回收，从而导致内存泄漏。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>第三话--初探容器</title>
    <url>/2016/10/16/%E7%AC%AC%E4%B8%89%E8%AF%9D--%E5%88%9D%E6%8E%A2%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>想看的东西太多，时间总是太少~  好了，先甩个锅给时间不够，然后开始Java重造，抱歉的是可能有些东西我不会讲的太详细。对了，最近看了同学<a href="http://www.jianshu.com/users/86f25f8b198b/latest_articles">iamxiarui</a>的文章。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>在日常撸code的过程中，很多时候我们都需要在运行时去创建新的对象。在此之前，我们可能不知道所需对象的数量甚至连类型都不知道，所以我们需要一个能在运行时保存对象引用的玩意。事实上数组是保存一组对象的最有效的方式，但是很多时候我们也不知道我们需要保存的对象的数量是多少，所以数组长度固定这一限制会让我们在实际应用中受到非常多的限制。不过好在Java提供了容器来帮我们搞定这些问题。首先上一个经典的容器图谱来理解一下~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-110ef6cdb9eb0614.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="经典.jpg"></p>
<span id="more"></span>
<p>当然了关于数组有大小限制这个问题，也是可以解决的。我们先申请一个固定长度的数组，每当有元素向里面添加的时候就判断一下，当前数组是否已经满了，如果不满则直接添加进去，如果满了就按照** 一定策略 <strong>申请一个新大小的数组，将原来数组元素全部移至新数组。当数组空元素过多时，可以按照</strong> 一定策略 **缩小数组长度，这个策略取决于你的需求和应用场景。</p>
<h4 id="容器-amp-泛型"><a href="#容器-amp-泛型" class="headerlink" title="容器&amp;泛型"></a>容器&amp;泛型</h4><p>通常我们在使用容器的时候，需要的是一个类型统一的容器，即如果我插入了一个猫元素，那么我绝对不希望一只蟑螂被插入进去。我需要的是一个“猫”的容器而不是其他的，在Java SE5之前容器就存在着能向“猫”的容器中插入“蟑螂”的问题。但是说实话，《Thinking in java》作者也说了，在泛型没有出来之前，程序员会经常犯这种错误吗？不见得，在这种场景下泛型只是将错误提前在编译期就告知用户。但是在没有泛型之前，一个代码风格良好的写法应该是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List cat = <span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure>
<p>如此明显的一个cat集合你会插入什么其他奇奇怪怪的东西吗？所以说泛型之于容器是类型安全，但是泛型出现更重要的一个目的是 ** 让程序员编写更加通用的代码 **。</p>
<p>上面的话可能说的有些繁琐，请容我再整理一下：在很多实用容器的场景中，我们希望在未使用容器钱，容器容纳类型不确定，但是在放入一个类型后，我们只能使用该类型，泛型非常适合应用在这个场景。使用泛型可以让运行期的错误在编译器就被阻止。下面来个简单的例子来说明一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;&gt; 尖括号内的是类型参数</span></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">strList.add(<span class="number">1</span>);<span class="comment">//编译错误</span></span><br><span class="line"></span><br><span class="line">List anotherList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">anotherList.add(<span class="number">1</span>);</span><br><span class="line">anotherList.add(<span class="string">&quot;cat&quot;</span>);<span class="comment">//未检查警告，但是此操作不会报错</span></span><br></pre></td></tr></table></figure>

<p>让我们用更直观的形式看一下这样操作的的结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-33d38fc57e0411c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情况如何"></p>
<p>很明显使用泛型能够有效的避免将错误类型对象放置到容器中，但是关于泛型的使用不仅于此，更多的讨论放到文末。</p>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>在《Thiniking in Java》中说到，任何容器类，都必须有某种方式可以插入元素并将它们再次取回（当然在某些书中你可能听说过bag这种只放入的容器，但是现在无需纠结这些东西）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    integerList.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; i = integerList.iterator();</span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">    Integer j = i.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;i--&gt;&quot;</span> + j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是一个存放了0-9个值的集合，现在我们利用迭代器打印每个元素的值，先结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-cc376f67a2eee93f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>其实我还有很多没提到的东西，但是这是初探容器啊<del>肯定还会有再探容器啊</del></p>
<p>Java里的容器我用的比较多的大概就是HashMap、ArrayList和LinkedList，其中ArrayList用的最多。其实ArrayList和LinkedList都可以被理解为“链表”，只不过LinkedList更偏向于我们所熟知的“指针链表”，而ArrayList可以将之理解为内部是数组的链表。说实话，数组自带链子啊~</p>
<p>好了看上面的标题也该知道，我是不打算在这对其他的容器做更多的介绍的，大标题叫初探容器，说明我还会有再探容器的，那时再做更详细的介绍。最近看到一个有趣的东西，你输入一个”(1+(2-1))”这种格式的算是，可以用栈算出来，于是乎自己用jdk自带的LinkedList封装了一个stack，把那玩意做了出来，但是感觉不爽，因为链表用的是现成的，简单的封装也没什么难度。我不管我就要从Node开始搞一个Java的“指针链表”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thinking.Generator.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by luo-pc on 2016/9/30.</span></span><br><span class="line"><span class="comment"> * desc:一个双向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;T&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;T&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个空的链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        insertToLast(t);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在表尾插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 元素值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertToLast</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//表尾元素</span></span><br><span class="line">        Node&lt;T&gt; n = last;</span><br><span class="line">        <span class="comment">//新建一个指向表尾的元素</span></span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;T&gt;(n, t, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//让表尾指向新元素</span></span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="comment">//如果链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            n.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取表尾元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回表尾元素的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;T&gt; n = last;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> n.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取对应元素的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引查找元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;T&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;T&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.pre;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkNodeIndex(index);</span><br><span class="line">        <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkNodeIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isNodeIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Index:&quot;</span> + index + <span class="string">&quot;Size:&quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">unlink</span><span class="params">(Node&lt;T&gt; x)</span> </span>&#123;</span><br><span class="line">        T value = x.item;</span><br><span class="line">        Node&lt;T&gt; next = x.next;</span><br><span class="line">        Node&lt;T&gt; prev = x.pre;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            x.pre = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.pre = prev;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查该索引是否是该链表内的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是或者不是</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNodeIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历并打印链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travelList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node travelNode = first;</span><br><span class="line">        <span class="keyword">if</span> (travelNode == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span> (travelNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(travelNode.item);</span><br><span class="line">            travelNode = travelNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------------Node-------------------------------//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表单个元素的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        T item;</span><br><span class="line">        Node&lt;T&gt; next;</span><br><span class="line">        Node&lt;T&gt; pre;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;T&gt; prev, T element, Node&lt;T&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.pre = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkList&lt;String&gt; strList = <span class="keyword">new</span> LinkList&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">&quot;str1&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;str2&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;str3&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;str4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        strList.travelList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我这实现了一个双向链表，操作起来方便一点，实现的时候参考了一下Java的LinkedList。底下的main()函数仅仅作为测试之用。接下来简单的封装一下，将LinkedList封装为一个栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thinking.Generator.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by luo-pc on 2016/10/1.</span></span><br><span class="line"><span class="comment"> * desc:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkList&lt;T&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> LinkList&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹出栈顶元素并返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> stack.remove(stack.size() - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 入栈的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 操作结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回栈顶元素的值但是不弹出他</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>好了前期工作准备好了，那我们来看一下该怎么算。一般的算术表达式我们可以通过二叉树的遍历来将其改造成中缀表达式从而用栈来算出其结果，但是上面的算式不用那么麻烦，因为有左右括号，按照以下规则预算就成了：</p>
<ul>
<li>将操作数压入操作数栈</li>
<li>将运算符压入运算符栈</li>
<li>忽略左括号</li>
<li>在遇到右括号时，弹出一个运算符，弹出所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈</li>
</ul>
<p>好了算法也有了，搞起来！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关于表达式（由括号、运算符和操作数组成）处理的规则：</span></span><br><span class="line"><span class="comment">     * 1.将操作数压入栈</span></span><br><span class="line"><span class="comment">     * 2.将运算符压入运算符栈</span></span><br><span class="line"><span class="comment">     * 3.忽略左括号</span></span><br><span class="line"><span class="comment">     * 4.在遇到右括号时弹出一个运算符，弹出所需数量的操作数，并将</span></span><br><span class="line"><span class="comment">     * 运算符和操作数的运算结果压入操作数的栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//操作数栈</span></span><br><span class="line">    MyStack&lt;Double&gt; integerStack = <span class="keyword">new</span> MyStack&lt;&gt;();</span><br><span class="line">    <span class="comment">//运算符栈</span></span><br><span class="line">    MyStack&lt;Character&gt; opStack = <span class="keyword">new</span> MyStack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String integers = <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">    String a = <span class="string">&quot;(1+((2+3)*(4*5)))&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>[] b = <span class="keyword">new</span> <span class="keyword">char</span>[a.length()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">        b[i] = a.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : b) &#123;</span><br><span class="line">        <span class="comment">//1.将操作数压入栈</span></span><br><span class="line">        <span class="keyword">if</span> (contain(integers, i)) &#123;</span><br><span class="line">            integerStack.push(Double.parseDouble(<span class="string">&quot;&quot;</span> + i));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;+&#x27;</span> || i == <span class="string">&#x27;-&#x27;</span> || i == <span class="string">&#x27;*&#x27;</span> || i == <span class="string">&#x27;/&#x27;</span>) &#123;<span class="comment">//2.将操作符压入栈</span></span><br><span class="line">            opStack.push(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;(&#x27;</span>) &#123;<span class="comment">//3.忽略左括号</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;)&#x27;</span>) &#123;<span class="comment">//4.运算</span></span><br><span class="line">            <span class="keyword">double</span> opt1 = integerStack.pop();</span><br><span class="line">            <span class="keyword">double</span> opt2 = integerStack.pop();</span><br><span class="line">            <span class="keyword">double</span> opt3 = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">char</span> operator = opStack.pop();</span><br><span class="line">            <span class="keyword">if</span> (operator == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                opt3 = opt1 + opt2;</span><br><span class="line">                System.out.println(opt1 + <span class="string">&quot;+&quot;</span> + opt2 + <span class="string">&quot;=&quot;</span> + opt3);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (operator == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                opt3 = opt1 - opt2;</span><br><span class="line">                System.out.println(opt1 + <span class="string">&quot;-&quot;</span> + opt2 + <span class="string">&quot;=&quot;</span> + opt3);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (operator == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                opt3 = opt1 * opt2;</span><br><span class="line">                System.out.println(opt1 + <span class="string">&quot;*&quot;</span> + opt2 + <span class="string">&quot;=&quot;</span> + opt3);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (operator == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                opt3 = opt1 / opt2;</span><br><span class="line">                System.out.println(opt1 + <span class="string">&quot;/&quot;</span> + opt2 + <span class="string">&quot;=&quot;</span> + opt3);</span><br><span class="line">            &#125;</span><br><span class="line">            integerStack.push(opt3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;the result is:&quot;</span> + integerStack.peek());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(String s, <span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] str = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        str[i] = s.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> i : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == i)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 看下结果~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-807b8b0cd8c99248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看下结果"></p>
<p>结果是不是很有趣~好了这次的复习就先到这，等到下次再探容器的时候再好好的了解一下容器。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>第二话--再探多态</title>
    <url>/2016/09/16/%E7%AC%AC%E4%BA%8C%E8%AF%9D--%E5%86%8D%E6%8E%A2%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>Java回炉系列也有十多天没更了，虽然心里一直没怎么放下，但是奈何有心无力。项目成堆问题在那，还好中秋得空，出去逛了一下午心情大好~好了，正文开始</p>
<h3 id="多态是啥，能吃吗？"><a href="#多态是啥，能吃吗？" class="headerlink" title="多态是啥，能吃吗？"></a>多态是啥，能吃吗？</h3><p>学Java一般都会听说“面向对象三大特征”：封装、继承、多态。封装是将一个事物抽象成为一个类，这个类有自己的属性和方法，某些属性和功能的实现不会对外公开，只暴露一些可供获取数据的方法。继承很容易理解，就是一个类继承另一类，这个类被称为子类，而另一个自然就是父类了。当然在有的书上也将父类称为基类，将子类称为导出类，看你个人喜好了，在我这统一称为父、子类。好了，前面说了封装和继承，现在自然是要说多态了。多态应当是一种设计的思想，然后才体现在语言的具体实现。多态的核心思想是消除类型之间的耦合关系，可能你和我一样，刚看到这句话的时候有点懵逼，没关系举个小例子：<br><img src="http://upload-images.jianshu.io/upload_images/1976147-b4b3923c4520c2bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="举个栗子"></p>
<p>现在我有个数据集，因为增删操作做的比较多，行吗，了解数据结构的你一定想到了链表。那好就用链表来搞起：</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;Bean&gt; list = <span class="keyword">new</span> LinkedList&lt;Bean&gt;();</span><br></pre></td></tr></table></figure>

<p>可是过了一段时间，你们老大给你说需求改了，现在是查询操作做的比较多。一向对于代码效率严格要求的你一定能想到链表查起来效率有点低，好啊，改成ArryList也算是能接受了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Bean&gt; list = <span class="keyword">new</span> ArrayList&lt;Bean&gt;();</span><br></pre></td></tr></table></figure>
<p>刚改完发现ide里一片红叉叉，好吧，原来是以前的方法也没用泛型参数，还得自己一个一个的去改掉。恩，改完没两天你们老大又来……</p>
<p>以上只是个带点玩笑性质的表述，在实际的操作中一般你都会这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Bean&gt; list = <span class="keyword">new</span> ArrayList&lt;Bean&gt;();</span><br></pre></td></tr></table></figure>
<p>恩，= 右边只要是个List接口的实现类就可以了，这就是解耦了。当你采用这种写法时好处也是显而易见的：涉及到这个数据集的方法，你只要传入一个List的形参就可以了，之后管你用啥实现（当然了，要符合多态的规则哦），这代码还是照常跑。</p>
<p>如果你是个上手Java没多久的新人，可能会有些惊讶于这种“接口实例化”的写法。但事实上只是Java多态的一种表现：** Java允许父类引用指向子类对象  ** 当然了，这句话里把父类换成接口，子类对象换成实现对象，也是可以的。</p>
<h3 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h3><p>写到这乐于思考的你一定能想到一些问题：上面说了在相应的方法里只要传入父类就行了，那也就是说那个方法并不知道他原来的类是啥，那么他在调用对象的方法时只会调用父类的方法了？直接上代码看看：<br>首先是父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;I am Parent&#x27;s method&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;I am Son&#x27;s method&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跑起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Parent p = <span class="keyword">new</span> Son();</span><br><span class="line">		Hello(p);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hello</span><span class="params">(Parent p)</span> </span>&#123;</span><br><span class="line">		p.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-dba4cfeddfa311ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<p>对于这个结果我只想问一声，凭啥啊？明明只有一个父类参数被传进去，他为毛能知道子类的方法啊？这是因为Java实现多态采用了一种被称作“动态绑定”或者“后期绑定”的牛x套路。编译器一直不知道对象的类型，但是方法调用机制能找到正确的方法体，并加以调用。关于这个机制，现在暂时没有必要太去深究。经过以上一番探查，现在终于对Java的多态放了心，那么请开开心心的使用多态编写你的代码吧！</p>
<p>关于多态还有方法重载和方法覆盖，我的上一篇文章<a href="http://www.jianshu.com/p/54779fc96b2f">第一话–从头再来</a>是有提到的，可以去看看。</p>
<h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>待更新…有点累了，先休息了，反正这文写给自己看的，任性点，明天再更完。<br>//开更干活！<br>首先是语法，接口是interface，抽象是abstract。</p>
<p>平时在抽取基类的时候少不了用一下抽象类，你可以指定几个抽象方法，让你子类去实现这些抽象方法。当然了你的子类也可以是一个抽象类，那么可以不实现这些抽象方法。当然了，包含抽象方法的一定是抽象类， 但是不包含抽象方法的你也可以指定他是抽象类，可以有效的阻止这个类生成对象。</p>
<p>那么接口又是啥呢？接口是一个包含一个或者多个方法的东西，有的时候实现了这个接口的类就拥有了这个接口的“特性”，而在Java中接口有的时候也被用于回调。一般的来说接口是优于抽象类的，因为接口比抽象类更抽象，完全解除了类之间的耦合。但是这东西还是看实际情况的，有的时候接口满天飞感觉也不是很好。再者抽象类要比接口的定制性要好，毕竟抽象类完全可以当成一个普通的类来写，只不过在合适的地方加上合适的抽象方法，然后让子类去实现它。所以究竟采用哪个区实现你的多态，还是看你的需求和实现的。</p>
<p>接口很多时候会被用于“回调”，比如在Android中的MVP模式就少不了回调。对于回调的理解我有写过一篇简单的文章，感兴趣可以自己去看一下。对于回调，我认为在实质上回调就是想要在对的地方调对的方法，然后把对的数据、状态传递出去，让实现的类知道这个数据、状态然后加以处理。以上是我认为的回调的实质，之后不同的语言用什么方案解决，是函数指针还是接口，那都不是我所关心的东西了。</p>
<p>这一期暂时就到这了，本来还想加个内部类上来的，后来想想还是先缓缓。这类复习类的文，代码贴的比较少，大多是自己的一些总结性的话语……如果有人看到了，觉得不爽……只能说见谅了……</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>复习巩固</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>记录三种实现图片模糊的方法</title>
    <url>/2017/10/18/%E8%AE%B0%E5%BD%95%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近给自己挖了几个坑，准备填一下。现在来填一下第一个坑：图片模糊。关于图片模糊的方法有很多，比如：Open CV 的各种图片处理、Android 支持的高性能密集型任务执行框架 RenderScript、Java 或者 C/C++ 的算法实现图片模糊处理。本篇文章将包含以下内容：</p>
<ul>
<li>RenderScript 简介与图片模糊的实现</li>
<li>Java / C++ 算法实现图片模糊处理</li>
<li>一个简单的动态模糊实现</li>
<li>总结</li>
</ul>
<p>至于 Open CV 我以前的一些文有些简单的介绍，如果只是想模糊图片就引入整个的 Open CV 个人感觉还是有点“杀鸡用牛刀”的感觉。对了，关于算法实现什么的……我只是个代码收集者，并非我自己实现的。</p>
<span id="more"></span>

<p>开始之前先放个图，做成什么样心里有点x数</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-811795afcd68bbca.gif?imageMogr2/auto-orient/strip" alt="动态模糊.gif"></p>
<p>如果你看过我同学的那篇<a href="http://www.jianshu.com/p/49c07c0627aa">Android：简单靠谱的动态高斯模糊效果
</a>你一定会发现我这个布局跟他的有那么一些相似，哇哈哈哈哈哈，你猜对了，我去他项目里复制的。当然了，实现方式不一样，他是用的 RecyclerView 实现的，我这里就自己复写了 Activity 的 onTouch 实现的动态模糊。</p>
<h2 id="RenderScript"><a href="#RenderScript" class="headerlink" title="RenderScript"></a>RenderScript</h2><p>首先简单的介绍一下 RenderScript 这里是我读文档的翻译……又到了展现真正的辣鸡英语水平的时候了……</p>
<p>RenderScript 是 Android 上的高性能计算密集型任务的框架。虽然串行工作也能受益，但是RenderScript 主要面向并行数据计算。RenderScript 运行时可以跨越设备上可用的处理器如多核CPU和GPU进行并行工作。这让你可以专注于算法，而不是调度工作。RenderScript 对于应用进行图像处理，计算摄影或者计算机视觉等方面特别有用。<br>要开始使用RenderScript，有两个主要概念应该要理解：</p>
<ul>
<li><p>语言本身是为了编写高性能计算代码产生的 C99 衍生语言。<a href="https://developer.android.com/guide/topics/renderscript/compute.html#writing-an-rs-kernel">这篇文章</a>描述了如何使用它去编写一个计算内核。</p>
</li>
<li><p>控制 API 是用来管理 RenderScript 资源的生命周期和控制内核运行的。这套API有三套语言实现：Java，Android NDK 的 C++ 和 C99 派生的内核语言本身。</p>
</li>
</ul>
<p>恩，BB这么多，我们只需要有个大致概念就行了，因为也不是专门去学习这套框架，我们只是需要使用这套框架的一丁点图片处理相关的东西而已。千言万语，最后就一句话：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RenderScript 是 Android 上的高性能计算密集型任务的框架</span><br></pre></td></tr></table></figure>
<p>行，对 RenderScript 有了大致的了解后，可以开始了，官方文档里其实有比较详细的流程，先创建什么 context 啦，然后分配内存巴拉巴拉的拉，不过我这又不是在学RenderScript，而是想实现一个功能，用完就可以把这框架扔一边了，如果你也是这样，不妨直接 copy 下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片缩放比例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> BITMAP_SCALE = <span class="number">0.4f</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大模糊度(在0.0到25.0之间)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> BLUR_RADIUS = <span class="number">25f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">blur</span><span class="params">(Context context, Bitmap image)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算图片缩小后的长宽</span></span><br><span class="line">    <span class="keyword">int</span> width = Math.round(image.getWidth() * BITMAP_SCALE);</span><br><span class="line">    <span class="keyword">int</span> height = Math.round(image.getHeight() * BITMAP_SCALE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缩小后的图片作为预渲染的图片</span></span><br><span class="line">    Bitmap inputBitmap = Bitmap.createScaledBitmap(image, width, height, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 创建一张渲染后的输出图片</span></span><br><span class="line">    Bitmap outputBitmap = Bitmap.createBitmap(inputBitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 RenderScript 上下文</span></span><br><span class="line">    RenderScript rs = RenderScript.create(context);</span><br><span class="line">    <span class="comment">// 创建一个模糊效果的 RenderScript 的工具对象</span></span><br><span class="line">    ScriptIntrinsicBlur blur = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于RenderScript并没有使用VM来分配内存,所以需要使用Allocation类来创建和分配内存空间。</span></span><br><span class="line">    <span class="comment">// 创建Allocation对象的时候其实内存是空的,需要使用copyTo()将数据填充进去。</span></span><br><span class="line">    Allocation tmpIn = Allocation.createFromBitmap(rs, inputBitmap);</span><br><span class="line">    Allocation tmpOut = Allocation.createFromBitmap(rs, outputBitmap);</span><br><span class="line">    <span class="comment">// 设置渲染的模糊程度, 25f是最大模糊度</span></span><br><span class="line">    blur.setRadius(BLUR_RADIUS);</span><br><span class="line">    <span class="comment">// 设置blurScript对象的输入内存</span></span><br><span class="line">    blur.setInput(tmpIn);</span><br><span class="line">    <span class="comment">// 将输出数据保存到输出内存中</span></span><br><span class="line">    blur.forEach(tmpOut);</span><br><span class="line">    <span class="comment">// 将数据填充到Allocation中</span></span><br><span class="line">    tmpOut.copyTo(outputBitmap);</span><br><span class="line">    <span class="keyword">return</span> outputBitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-9bfb94c39bde175a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="renderscript.png"></p>
<h2 id="Java-amp-C"><a href="#Java-amp-C" class="headerlink" title="Java &amp; C++"></a>Java &amp; C++</h2><p>这两种都是采用同一种算法实现的，本质上都是对像素数组进行处理运算。本来我以为C++的方式会快一些，没想到在我的mix2上运行反而是Java实现的算法会快一些。唉，真是辣鸡C++还不如Java。 当然了……讲道理，代码我看了，就是一样的，可能是jni的开销吧。这里为什么要介绍Javah和C++的算法实现呢，因为RenderScript虽然文档上说可以运行在2.3及以上的平台，但是这个图片处理的api最低版本是17。所以说，如果你有需要兼容低版本，还是得采用下别的实现。</p>
<p>这里只放一下Java的实现代码，因为反而比较快的关系……至于JNI，我这里偷了个懒，因为以前用CMake项目编译生成了so，所以这里直接引用了so。当然了cpp源码也放在了项目里，感兴趣的可以自己去编译一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StackBlur By Java Bitmap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bmp    bmp Image</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> radius Blur radius</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Image Bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">blurInJava</span><span class="params">(Bitmap bmp, <span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Stack Blur v1.0 from</span></span><br><span class="line">        <span class="comment">// http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Java Author: Mario Klingemann &lt;mario at quasimondo.com&gt;</span></span><br><span class="line">        <span class="comment">// http://incubator.quasimondo.com</span></span><br><span class="line">        <span class="comment">// created Feburary 29, 2004</span></span><br><span class="line">        <span class="comment">// Android port : Yahel Bouaziz &lt;yahel at kayenko.com&gt;</span></span><br><span class="line">        <span class="comment">// http://www.kayenko.com</span></span><br><span class="line">        <span class="comment">// ported april 5th, 2012</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is a compromise between Gaussian Blur and Box blur</span></span><br><span class="line">        <span class="comment">// It creates much better looking blurs than Box Blur, but is</span></span><br><span class="line">        <span class="comment">// 7x faster than my Gaussian Blur implementation.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// I called it Stack Blur because this describes best how this</span></span><br><span class="line">        <span class="comment">// filter works internally: it creates a kind of moving stack</span></span><br><span class="line">        <span class="comment">// of colors whilst scanning through the image. Thereby it</span></span><br><span class="line">        <span class="comment">// just has to add one new block of color to the right side</span></span><br><span class="line">        <span class="comment">// of the stack and remove the leftmost color. The remaining</span></span><br><span class="line">        <span class="comment">// colors on the topmost layer of the stack are either added on</span></span><br><span class="line">        <span class="comment">// or reduced by one, depending on if they are on the right or</span></span><br><span class="line">        <span class="comment">// on the left side of the stack.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If you are using this algorithm in your code please add</span></span><br><span class="line">        <span class="comment">// the following line:</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Stack Blur Algorithm by Mario Klingemann &lt;mario@quasimondo.com&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (radius &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = ratio(bmp, bmp.getWidth() * BITMAP_SCALE, bmp.getHeight() * BITMAP_SCALE);</span><br><span class="line"><span class="comment">//        Bitmap bitmap = bmp.copy(Bitmap.Config.ARGB_8888, true);</span></span><br><span class="line">        <span class="comment">// Return this none blur</span></span><br><span class="line">        <span class="keyword">if</span> (radius == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bitmap;</span><br><span class="line">        &#125;</span><br><span class="line">        bmp.recycle();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> w = bitmap.getWidth();</span><br><span class="line">        <span class="keyword">int</span> h = bitmap.getHeight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] pix = <span class="keyword">new</span> <span class="keyword">int</span>[w * h];</span><br><span class="line">        <span class="comment">// get array</span></span><br><span class="line">        bitmap.getPixels(pix, <span class="number">0</span>, w, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// run Blur</span></span><br><span class="line">        <span class="keyword">int</span> wm = w - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> hm = h - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> wh = w * h;</span><br><span class="line">        <span class="keyword">int</span> div = radius + radius + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">short</span> r[] = <span class="keyword">new</span> <span class="keyword">short</span>[wh];</span><br><span class="line">        <span class="keyword">short</span> g[] = <span class="keyword">new</span> <span class="keyword">short</span>[wh];</span><br><span class="line">        <span class="keyword">short</span> b[] = <span class="keyword">new</span> <span class="keyword">short</span>[wh];</span><br><span class="line">        <span class="keyword">int</span> rSum, gSum, bSum, x, y, i, p, yp, yi, yw;</span><br><span class="line">        <span class="keyword">int</span> vMin[] = <span class="keyword">new</span> <span class="keyword">int</span>[Math.max(w, h)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> divSum = (div + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        divSum *= divSum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">short</span> dv[] = <span class="keyword">new</span> <span class="keyword">short</span>[<span class="number">256</span> * divSum];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span> * divSum; i++) &#123;</span><br><span class="line">            dv[i] = (<span class="keyword">short</span>) (i / divSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        yw = yi = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] stack = <span class="keyword">new</span> <span class="keyword">int</span>[div][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> stackPointer;</span><br><span class="line">        <span class="keyword">int</span> stackStart;</span><br><span class="line">        <span class="keyword">int</span>[] sir;</span><br><span class="line">        <span class="keyword">int</span> rbs;</span><br><span class="line">        <span class="keyword">int</span> r1 = radius + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> routSum, goutSum, boutSum;</span><br><span class="line">        <span class="keyword">int</span> rinSum, ginSum, binSum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">            rinSum = ginSum = binSum = routSum = goutSum = boutSum = rSum = gSum = bSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = -radius; i &lt;= radius; i++) &#123;</span><br><span class="line">                p = pix[yi + Math.min(wm, Math.max(i, <span class="number">0</span>))];</span><br><span class="line">                sir = stack[i + radius];</span><br><span class="line">                sir[<span class="number">0</span>] = (p &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                sir[<span class="number">1</span>] = (p &amp; <span class="number">0x00ff00</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                sir[<span class="number">2</span>] = (p &amp; <span class="number">0x0000ff</span>);</span><br><span class="line"></span><br><span class="line">                rbs = r1 - Math.abs(i);</span><br><span class="line">                rSum += sir[<span class="number">0</span>] * rbs;</span><br><span class="line">                gSum += sir[<span class="number">1</span>] * rbs;</span><br><span class="line">                bSum += sir[<span class="number">2</span>] * rbs;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    rinSum += sir[<span class="number">0</span>];</span><br><span class="line">                    ginSum += sir[<span class="number">1</span>];</span><br><span class="line">                    binSum += sir[<span class="number">2</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    routSum += sir[<span class="number">0</span>];</span><br><span class="line">                    goutSum += sir[<span class="number">1</span>];</span><br><span class="line">                    boutSum += sir[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stackPointer = radius;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line"></span><br><span class="line">                r[yi] = dv[rSum];</span><br><span class="line">                g[yi] = dv[gSum];</span><br><span class="line">                b[yi] = dv[bSum];</span><br><span class="line"></span><br><span class="line">                rSum -= routSum;</span><br><span class="line">                gSum -= goutSum;</span><br><span class="line">                bSum -= boutSum;</span><br><span class="line"></span><br><span class="line">                stackStart = stackPointer - radius + div;</span><br><span class="line">                sir = stack[stackStart % div];</span><br><span class="line"></span><br><span class="line">                routSum -= sir[<span class="number">0</span>];</span><br><span class="line">                goutSum -= sir[<span class="number">1</span>];</span><br><span class="line">                boutSum -= sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">                    vMin[x] = Math.min(x + radius + <span class="number">1</span>, wm);</span><br><span class="line">                &#125;</span><br><span class="line">                p = pix[yw + vMin[x]];</span><br><span class="line"></span><br><span class="line">                sir[<span class="number">0</span>] = (p &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                sir[<span class="number">1</span>] = (p &amp; <span class="number">0x00ff00</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">                sir[<span class="number">2</span>] = (p &amp; <span class="number">0x0000ff</span>);</span><br><span class="line"></span><br><span class="line">                rinSum += sir[<span class="number">0</span>];</span><br><span class="line">                ginSum += sir[<span class="number">1</span>];</span><br><span class="line">                binSum += sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                rSum += rinSum;</span><br><span class="line">                gSum += ginSum;</span><br><span class="line">                bSum += binSum;</span><br><span class="line"></span><br><span class="line">                stackPointer = (stackPointer + <span class="number">1</span>) % div;</span><br><span class="line">                sir = stack[(stackPointer) % div];</span><br><span class="line"></span><br><span class="line">                routSum += sir[<span class="number">0</span>];</span><br><span class="line">                goutSum += sir[<span class="number">1</span>];</span><br><span class="line">                boutSum += sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                rinSum -= sir[<span class="number">0</span>];</span><br><span class="line">                ginSum -= sir[<span class="number">1</span>];</span><br><span class="line">                binSum -= sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                yi++;</span><br><span class="line">            &#125;</span><br><span class="line">            yw += w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">            rinSum = ginSum = binSum = routSum = goutSum = boutSum = rSum = gSum = bSum = <span class="number">0</span>;</span><br><span class="line">            yp = -radius * w;</span><br><span class="line">            <span class="keyword">for</span> (i = -radius; i &lt;= radius; i++) &#123;</span><br><span class="line">                yi = Math.max(<span class="number">0</span>, yp) + x;</span><br><span class="line"></span><br><span class="line">                sir = stack[i + radius];</span><br><span class="line"></span><br><span class="line">                sir[<span class="number">0</span>] = r[yi];</span><br><span class="line">                sir[<span class="number">1</span>] = g[yi];</span><br><span class="line">                sir[<span class="number">2</span>] = b[yi];</span><br><span class="line"></span><br><span class="line">                rbs = r1 - Math.abs(i);</span><br><span class="line"></span><br><span class="line">                rSum += r[yi] * rbs;</span><br><span class="line">                gSum += g[yi] * rbs;</span><br><span class="line">                bSum += b[yi] * rbs;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    rinSum += sir[<span class="number">0</span>];</span><br><span class="line">                    ginSum += sir[<span class="number">1</span>];</span><br><span class="line">                    binSum += sir[<span class="number">2</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    routSum += sir[<span class="number">0</span>];</span><br><span class="line">                    goutSum += sir[<span class="number">1</span>];</span><br><span class="line">                    boutSum += sir[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i &lt; hm) &#123;</span><br><span class="line">                    yp += w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            yi = x;</span><br><span class="line">            stackPointer = radius;</span><br><span class="line">            <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; h; y++) &#123;</span><br><span class="line">                <span class="comment">// Preserve alpha channel: ( 0xff000000 &amp; pix[yi] )</span></span><br><span class="line">                pix[yi] = (<span class="number">0xff000000</span> &amp; pix[yi]) | (dv[rSum] &lt;&lt; <span class="number">16</span>) | (dv[gSum] &lt;&lt; <span class="number">8</span>) | dv[bSum];</span><br><span class="line"></span><br><span class="line">                rSum -= routSum;</span><br><span class="line">                gSum -= goutSum;</span><br><span class="line">                bSum -= boutSum;</span><br><span class="line"></span><br><span class="line">                stackStart = stackPointer - radius + div;</span><br><span class="line">                sir = stack[stackStart % div];</span><br><span class="line"></span><br><span class="line">                routSum -= sir[<span class="number">0</span>];</span><br><span class="line">                goutSum -= sir[<span class="number">1</span>];</span><br><span class="line">                boutSum -= sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">                    vMin[y] = Math.min(y + r1, hm) * w;</span><br><span class="line">                &#125;</span><br><span class="line">                p = x + vMin[y];</span><br><span class="line"></span><br><span class="line">                sir[<span class="number">0</span>] = r[p];</span><br><span class="line">                sir[<span class="number">1</span>] = g[p];</span><br><span class="line">                sir[<span class="number">2</span>] = b[p];</span><br><span class="line"></span><br><span class="line">                rinSum += sir[<span class="number">0</span>];</span><br><span class="line">                ginSum += sir[<span class="number">1</span>];</span><br><span class="line">                binSum += sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                rSum += rinSum;</span><br><span class="line">                gSum += ginSum;</span><br><span class="line">                bSum += binSum;</span><br><span class="line"></span><br><span class="line">                stackPointer = (stackPointer + <span class="number">1</span>) % div;</span><br><span class="line">                sir = stack[stackPointer];</span><br><span class="line"></span><br><span class="line">                routSum += sir[<span class="number">0</span>];</span><br><span class="line">                goutSum += sir[<span class="number">1</span>];</span><br><span class="line">                boutSum += sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                rinSum -= sir[<span class="number">0</span>];</span><br><span class="line">                ginSum -= sir[<span class="number">1</span>];</span><br><span class="line">                binSum -= sir[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                yi += w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set Bitmap</span></span><br><span class="line">        bitmap.setPixels(pix, <span class="number">0</span>, w, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (bitmap);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-22975722f452a427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="动态模糊"><a href="#动态模糊" class="headerlink" title="动态模糊"></a>动态模糊</h2><p>这里实现的效果图就是开头的那张gif了，首先要明白一点，动态模糊，不可能每一帧都去调用方法生成一张模糊图，那样效率太低了。这里看了别人的思路，先生成一张模糊图片，之后在原来的布局上放上两个ImageView，一张原图，上面的一张是模糊图，动态改变上面模糊图的透明值就能实现动态透明效果。这想法阔以，只生成了一次模糊图片。</p>
<p>这里底部布局我本来是想放一个布局在屏幕外，后来发现这样无论怎么滑动都不能把布局滑入。可能是代码有问题，也可能是父容器的问题。于是之后就写了个全屏的布局，但是在界面启动后将之移动到屏幕外。设置了上下两块可点击将布局滑出的区域，在滑动的时候动态设置模糊图片控件的alpha值，这样就实现了动态模糊，话不多说，上关键代码：<br>布局代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_img&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/test&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;fitXY&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_blur_img&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;fitXY&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:alpha</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/rl_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_tem&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fontFamily</span>=<span class="string">&quot;sans-serif-thin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;37°&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;90sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;36dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#44000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;20dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;WeatherInfo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;Show more info&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;36dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#44000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;20dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;WeatherInfo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;Show more info&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;36dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;#44000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">&quot;20dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;WeatherInfo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;Show more info&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@android:color/white&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Activity代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.blur;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.Window;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.gank_kotlin.ImageProcess;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/10/15.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicBlurActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView blurImg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> View container;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        <span class="keyword">int</span> flag = WindowManager.LayoutParams.FLAG_FULLSCREEN;</span><br><span class="line">        <span class="comment">//获得当前窗体对象</span></span><br><span class="line">        Window window = <span class="keyword">this</span>.getWindow();</span><br><span class="line">        <span class="comment">//设置当前窗体为全屏显示</span></span><br><span class="line">        window.setFlags(flag, flag);</span><br><span class="line">        setContentView(R.layout.activity_dynamic_blur);</span><br><span class="line">        initView();</span><br><span class="line">        WindowManager wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        height = wm.getDefaultDisplay().getHeight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        blurImg = (ImageView) findViewById(R.id.iv_blur_img);</span><br><span class="line">        blurImg.setImageBitmap(ImageProcess.blur(<span class="keyword">this</span>,</span><br><span class="line">                BitmapFactory.decodeResource(getResources(), R.drawable.test)));</span><br><span class="line">        container = findViewById(R.id.rl_container);</span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                container.setTranslationY(height + <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> y;</span><br><span class="line">    <span class="keyword">boolean</span> scrollFlag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">float</span> sumY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isShow = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                y = event.getY();</span><br><span class="line">                <span class="keyword">if</span> (y &gt; height * <span class="number">0.9</span>) &#123;</span><br><span class="line">                    scrollFlag = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; height * <span class="number">0.1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isShow) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    scrollFlag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                sumY = event.getY() - y;</span><br><span class="line">                <span class="keyword">if</span> (scrollFlag) &#123;</span><br><span class="line">                    container.setTranslationY(event.getY());</span><br><span class="line">                    <span class="keyword">if</span> (!isShow) blur(sumY);</span><br><span class="line">                    <span class="keyword">else</span> reverseBlur(sumY);</span><br><span class="line">                &#125;</span><br><span class="line">                Log.e(<span class="string">&quot;DynamicBlurActivity&quot;</span>, <span class="string">&quot;滚动sumY值：&quot;</span> + sumY + <span class="string">&quot; scrollFlag：&quot;</span> + scrollFlag);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">if</span>(scrollFlag) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Math.abs(sumY) &gt; height * <span class="number">0.5</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isShow) hide();</span><br><span class="line">                        <span class="keyword">else</span> show();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isShow) show();</span><br><span class="line">                        <span class="keyword">else</span> hide();</span><br><span class="line">                    &#125;</span><br><span class="line">                    sumY = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                scrollFlag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hide</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        container.setTranslationY(height + <span class="number">100</span>);</span><br><span class="line">        blur(<span class="number">0</span>);</span><br><span class="line">        isShow = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        container.setTranslationY(<span class="number">0</span>);</span><br><span class="line">        blur(<span class="number">1000</span>);</span><br><span class="line">        isShow = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">blur</span><span class="params">(<span class="keyword">float</span> sumY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> absSum = Math.abs(sumY);</span><br><span class="line">        <span class="keyword">float</span> alpha = absSum / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span> (alpha &gt; <span class="number">1</span>) alpha = <span class="number">1</span>;</span><br><span class="line">        blurImg.setAlpha(alpha);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverseBlur</span><span class="params">(<span class="keyword">float</span> sumY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> absSum = Math.abs(sumY);</span><br><span class="line">        <span class="keyword">float</span> alpha = absSum / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span> (alpha &gt; <span class="number">1</span>) alpha = <span class="number">1</span>;</span><br><span class="line">        blurImg.setAlpha(<span class="number">1</span> - alpha);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在刚开始的时候我非常的作死，选用的图片是1080 * 1920 的，在处理的时候一看内存，我 * 飙到了200多M，而且处理这张图片花费了6.6秒左右的时间。我打印了一下这图片转化成Bitmap的width和height 分别是</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1976147-02ea7e2396c60508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="长宽"></p>
<p>这如果是 ARGB_8888 那么一张图就是61M，加上处理需要一个像素数组，得，另一个61M。剩下在处理像素的时候各种申请的内存飙到200M也不是不可以理解。本来我想是不是可以使用同一张 Bitmap，在最后setPixels的时候就不用再申请一次内存了，但是发现这样不行，直接报错了。因为从资源文件拿到的 Bitmap 的 isMutable属性是false，不可以直接在原来的 Bitmap 上 setPixels 。所以原来还需要拷贝一份Bitmap，不过拷贝之后可以将调用 bitmap.recycle() 方法，将之赶紧回收了。</p>
<p>当然，像我这样头铁硬怼并不好，飙到200M市面上很多手机都会OOM……更好的方式是对缩略图进行模糊处理。Android里有个缩略图工具，就几个方法，还挺好用的，我这里就用的缩略图工具获取缩略图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">ratio</span><span class="params">(Bitmap bmp, <span class="keyword">float</span> pixelW, <span class="keyword">float</span> pixelH)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ThumbnailUtils.extractThumbnail(bmp, (<span class="keyword">int</span>) pixelW, (<span class="keyword">int</span>) pixelH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在进行处理前先获取缩略图，然后再去处理效率无疑会高非常多。</p>
<p>最后，放上项目地址：<a href="https://github.com/ForgetAll/Blur">https://github.com/ForgetAll/Blur</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>JNI</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习笔记——状态模式</title>
    <url>/2018/04/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>许久没有写博客了，最近有一点做咸鱼的倾向，Android方面也碰上瓶颈挺久了。主要是目前可能没有碰上特别有挑战的需求吧，以之前的知识储备就足够了。最近游戏进度倒是喜人，黑魂3快通关了，但也不能老做一条咸鱼，还是得进步啊~看书还是得做做笔记的，不然看了没多久可能就忘了，书携带也不带方便，所以还是做一下笔记发在自己的博客上比较稳妥。</p>
<p>本文以及后续所有的设模式博文均为《Android源码设计模式》一书的笔记。</p>
<h2 id="状态模式介绍与定义"><a href="#状态模式介绍与定义" class="headerlink" title="状态模式介绍与定义"></a>状态模式介绍与定义</h2><p>以下为书中原文：状态模式中的行为是由状态来决定的，不同的状态下有不同的行为。状态模式把对象的行为包装在不同的状态对象里，每一个状态对象都有一个共同的抽象状态基类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。</p>
<ul>
<li>定义：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</li>
</ul>
<p>介绍与定义都看了，该怎么理解呢？结合实际的例子来说，在用户登录与不登录时，一个按钮触发的点击事件是不一样的，这里登录与不登录是两种状态。那么不使用状态模式的实现是怎样的呢？</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">btn.setOnClickListener(v -&gt; &#123;</span><br><span class="line">	<span class="keyword">if</span>(User.getInstance().isLogin) &#123;</span><br><span class="line">		shareToQQ();</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		login();	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里一般来说会在一个用户对象里维护一个是否登录的标志位，这里就是通过这个标志位来判断用户是否登录。但是如果有非常多的状态需要判断，代码就会显得非常的杂乱，那么该通过怎样的方式才能避免使用大量的if-else（或者switch-case）呢？答案就是使用状态模式。</p>
<p>这里依旧使用登录来作为例子，应用场景：当用户登录时，点击分享按钮，会将内容分享到QQ，如果用户未登录，则会跳转至登录界面，让用户去登录。这里首先定义一个用户操作的接口，这个接口是所有状态下的状态类的基类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserOperation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shareToQQ</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在定义了这个接口之后，需要两种状态下的实现类，首先编写登录状态下的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperationLoginImpl</span> <span class="keyword">implements</span> <span class="title">UserOperation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shareToQQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已登录，直接分享到QQ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里代码实现比较简单，只是 Java 中的模拟实现，再编写未登录状态下的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperationLogoutImpl</span> <span class="keyword">implements</span> <span class="title">UserOperation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shareToQQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;未登录&quot;</span>);</span><br><span class="line">        toLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;去登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后编写用户类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 登录状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_LOGIN = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 未登录状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_LOGOUT = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state = STATE_LOGOUT;</span><br><span class="line">    <span class="keyword">private</span> UserOperation userOperation = <span class="keyword">new</span> UserOperationLogoutImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserOperation</span><span class="params">(UserOperation userOperation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userOperation = userOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state = STATE_LOGIN;</span><br><span class="line">        setUserOperation(<span class="keyword">new</span> UserOperationLoginImpl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state = STATE_LOGOUT;</span><br><span class="line">        setUserOperation(<span class="keyword">new</span> UserOperationLogoutImpl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shareToQQ</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userOperation.shareToQQ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就编写完毕了，再来编写一个测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        User.getInstance().login();</span><br><span class="line">        User.getInstance().shareToQQ();</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">        User.getInstance().logout();</span><br><span class="line">        User.getInstance().shareToQQ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>输出结果：<br><img src="http://xiasuhuei321.com/images/blog/zhuangtaimoshi.png" alt="输出结果"></p>
<p>这里从新手的角度来理解一下状态模式，状态模式其实就是使用多态来避免大量的使用 if-else 语句。在 User 类中持有一个用户操作接口 UserOperation 的引用，之后的用户调用都通过这个引用来去调用。而这个接口的实现类可以由用户设置，也可以通过调用登录或者登出自动去赋值的。这样就做到了在运行时根据状态改变自身的行为，而又避免了大量使用 if-else 语句。</p>
<p>在实际的情况下，一个事件的触发可能会由不止一种的标志决定，所以在实际的使用时可能还需要结合自身的情况去合理使用状态模式。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>详记Android打开相机拍照流程</title>
    <url>/2017/08/23/%E8%AF%A6%E8%AE%B0Android%E6%89%93%E5%BC%80%E7%9B%B8%E6%9C%BA%E6%8B%8D%E7%85%A7%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文并不是基于Camera2的，所以想要了解Camera2的同学可以先散了。文题加了详记二字，因为相机整个打开的流程的确是比较复杂的，稍有疏忽可能就会引发一系列问题。我也是看了一下Android的文档才整理了这篇文章，想看原文的<a href="https://developer.android.com/guide/topics/media/camera.html?hl=zh-cn#custom-camera">戳这</a>。不得不说，文档还是详细啊~</p>
<p>本文主要会涉及以下内容：</p>
<ul>
<li>相机的使用流程</li>
<li>拍照及拍照期间的聚焦</li>
<li>保存图片</li>
</ul>
<p>先放一下最终效果图吧，做的比较简单，各位不用担心：</p>
<span id="more"></span>

<p><img src="http://upload-images.jianshu.io/upload_images/1976147-03939693c81fd112.gif?imageMogr2/auto-orient/strip" alt="最终也就这样~"></p>
<p>主要功能就是拍照保存，多的也没啥了，项目地址在文末有。</p>
<h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>在详细的研究相机之前，首先熟悉一下使用相机的整个流程：</p>
<ul>
<li>检测和访问相机：创建代码检测相机的存在和请求访问</li>
<li>创建预览类：创建继承自SurfaceView和实现SurfaceHolder接口的预览类。这个类展示来自相机的实时图片</li>
<li>创建一个预览布局：如果你有相机预览类，你就需要创建一个和用户交互的界面布局</li>
<li>为拍照或者录像设置监听：对用户的行为作出响应，你要为你的控件设置监听去开始拍照或者录像，比如你设置了一个拍照的按钮，用户点击之后就要开始拍照。监听用户行为只是其一，还有就是拍照的监听，这个放到后文讨论</li>
<li>捕获和保存文件：无论是拍照还是录像，都需要有保存的功能</li>
<li>释放相机：在不使用相机时候，你的应用一定要释放相机。</li>
</ul>
<p>那么为什么一定要释放相机资源呢？因为相机硬件是一个共享临界资源，不仅你的应用会使用，其他的应用也会使用相机。所以在不用相机的时候，一定要释放相机，不然你自己的应用和后续其他要使用相机的应用都无法使用相机。</p>
<p>流程大致就是这样，接下来一步一步的跟进，看看这个相机到底特么的是怎么用的。</p>
<h2 id="申请权限"><a href="#申请权限" class="headerlink" title="申请权限"></a>申请权限</h2><p>Android 6.0之前 &amp; targetSdkVersion &lt; 23 只需要在清单文件中声明一下权限就行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面那个uses-feature，文档中说如果声明了这个，在Google Play中会阻止没有相机的设备下载你的应用。国内的应用商店就不知道了= =。在Android 6.0之后且targetSdkVersion &gt;= 23就需要申请相机权限了。我们可以在Activity的onResume中检测是否拥有相机权限，如果拥有权限就进行下一步的操作，如果没有就申请权限，并在回调中检测是否申请成功，成功的话就进行下一步操作。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="comment">// 检查权限</span></span><br><span class="line">    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.CAMERA) !=</span><br><span class="line">            PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">// 申请权限</span></span><br><span class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 已有权限</span></span><br><span class="line">        startCameraPre();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    <span class="keyword">if</span> (requestCode == <span class="number">1</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">// 如果权限申请成功</span></span><br><span class="line">        startCameraPre();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;您已拒绝打开相机，想要使用此功能请手动打开相机权限&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="检测相机是否存在"><a href="#检测相机是否存在" class="headerlink" title="检测相机是否存在"></a>检测相机是否存在</h2><p>在使用之前需要先检测一下设备是否有相机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查是否拥有相机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果有返回true，没有返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkCameraHardware</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) &#123;</span><br><span class="line">        <span class="comment">// 有相机</span></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;有相机&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有相机</span></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;没有相机&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码比较简单，比较坑爹的是什么呢？有一些嵌入式设备的Android系统通过这个方法是无法获取到到底特么的是有没有相机的。获取的可能是错误的信息，我在我们的设备上用这个代码检测，明明没有相机也判断成有相机了。如果一定要判断……还是有办法的，直接Camera.open试一试，成功就说明有，失败就……就失败了呗。</p>
<h2 id="访问相机"><a href="#访问相机" class="headerlink" title="访问相机"></a>访问相机</h2><p>访问相机的代码比较简单，就是通过Camera.open方法拿到一个Camera的实例，需要注意的是这个open方法可能会引发异常，最好还是要try catch一下的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取前置相机实例，注意6.0以上的系统需要动态申请权限（如果</span></span><br><span class="line"><span class="comment"> * target &gt;= 23）则必须动态申请，否则无法打开相机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 打开成功则返回相机实例，失败则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Camera <span class="title">getCameraInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Camera c;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        c = Camera.open(Camera.CameraInfo.CAMERA_FACING_BACK);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// 相机正在使用或者不存在</span></span><br><span class="line">        Log.e(TAG, <span class="string">&quot;相机打开失败，正在使用或者不存在，或者，没有权限？&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Android 2.3版本以后可以通过Camera.open(int)来打开指定的相机，我这里打开了后置摄像头。</p>
<h2 id="创建预览类"><a href="#创建预览类" class="headerlink" title="创建预览类"></a>创建预览类</h2><p>预览类就是用来播放相机画面的类，预览类是继承自SurfaceView的。普通的View以及其子类都是共享同一个surface的，所有的绘制都必须在UI线程进行。而SurfaceView是一种比较特殊的view，他并不与其他view共享surface，而是在内部持有了一个独立的surface，SurfaceView负责管理这个surface的格式、尺寸以及显示位置。由于UI线程还要同事处理其他交互逻辑，因此对View的更新速度和帧率无法保证，而surfaceview由于持有一个独立的surface，因而可以在独立的线程中进行绘制，因此可以提供更高的帧率。自定义相机的预览图像由于对更新速度和帧率要求比较高，所以比较适合用surfaceview来显示。(关于surfaceview的介绍摘自<a href="http://blog.csdn.net/sinat_29384657/article/details/52188723">Android自定义相机详细讲解</a>）</p>
<p>介绍了这么多，对SurfaceView大概有个了解就可以了，这个类和相机的声明周期息息相关，需要实现SurfaceHolder.Callback接口来接收View创建和销毁的事件。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.cameradieorme.camera;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/8/22.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.hardware.Camera;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> android.text.format.DateFormat;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceHolder;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraPreview</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span> <span class="title">SurfaceHolder</span>.<span class="title">Callback</span>, <span class="title">Camera</span>.<span class="title">AutoFocusCallback</span>, <span class="title">Camera</span>.<span class="title">PictureCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;CameraPreview&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRNAME = <span class="string">&quot;MyCamera&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder mHolder;</span><br><span class="line">    <span class="keyword">private</span> Camera mCamera;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> canTake = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraPreview</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="comment">// Install a SurfaceHolder.Callback so we get notified when the</span></span><br><span class="line">        <span class="comment">// underlying surface is created and destroyed.</span></span><br><span class="line">        mHolder = getHolder();</span><br><span class="line">        <span class="comment">// deprecated setting, but required on Android versions prior to 3.0</span></span><br><span class="line">        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;CameraPreview被创建 &quot;</span> + <span class="keyword">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * surface在很多情况下都会被销毁，这个时候相机也会被释放。</span></span><br><span class="line"><span class="comment">     * 而这个类的camera就无法再使用了，所以需要外部再传入一个</span></span><br><span class="line"><span class="comment">     * 正确的Camera实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mCamera Camera实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCamera</span><span class="params">(Camera mCamera)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCamera = mCamera;</span><br><span class="line">        mHolder.addCallback(<span class="keyword">this</span>);</span><br><span class="line">        surfaceCreated(getHolder());</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;serCamera&quot;</span> + <span class="string">&quot; release = &quot;</span> + CameraUtil.getInstance().isRelease());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// surface创建完毕，camera设置预览</span></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;surface view被创建&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (CameraUtil.getInstance().isRelease()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCamera.setPreviewDisplay(holder);</span><br><span class="line">            mCamera.startPreview();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Error setting camera preview: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在这里可以释放相机资源</span></span><br><span class="line">        <span class="comment">// 也可以在Activity中释放</span></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;surface 被销毁 &quot;</span>);</span><br><span class="line">        holder.removeCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 停止回调，以防释放的相机再被使用导致异常</span></span><br><span class="line">        mCamera.setPreviewCallback(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 停止预览</span></span><br><span class="line">        mCamera.stopPreview();</span><br><span class="line">        mCamera.lock();</span><br><span class="line">        <span class="comment">// 释放相机资源</span></span><br><span class="line">        CameraUtil.getInstance().releaseCamera();</span><br><span class="line">        mCamera = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder, <span class="keyword">int</span> format, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If your preview can change or rotate, take care of those events here.</span></span><br><span class="line">        <span class="comment">// Make sure to stop the preview before resizing or reformatting it.</span></span><br><span class="line">        <span class="keyword">if</span> (mHolder.getSurface() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// preview surface does not exist</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// stop preview before making changes</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCamera.stopPreview();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// ignore: tried to stop a non-existent preview</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set preview size and make any resize, rotate or</span></span><br><span class="line">        <span class="comment">// reformatting changes here</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// start preview with new settings</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCamera.setPreviewDisplay(mHolder);</span><br><span class="line">            mCamera.startPreview();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Error starting camera preview: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给外部调用，用来拍照的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因为设置了聚焦，这里又设置了回调对象，所以重新开始预览之后</span></span><br><span class="line">        <span class="comment">// 需要一个标志判断是否是拍照的聚焦回调</span></span><br><span class="line">        canTake = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 首先聚焦</span></span><br><span class="line">        mCamera.autoFocus(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//        mCamera.takePicture(null, null, this);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAutoFocus</span><span class="params">(<span class="keyword">boolean</span> success, <span class="keyword">final</span> Camera camera)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;聚焦： &quot;</span> + canTake);</span><br><span class="line">        <span class="comment">// 不管聚焦成功与否，都开始拍照</span></span><br><span class="line">        <span class="keyword">if</span> (canTake) &#123;</span><br><span class="line">            camera.takePicture(<span class="keyword">null</span>, <span class="keyword">null</span>, CameraPreview.<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        canTake = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 延时一秒，重新开始预览</span></span><br><span class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mCamera.startPreview();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPictureTaken</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] data, Camera camera)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;onPictureTaken&quot;</span>);</span><br><span class="line">        <span class="comment">// 在子线程中进行io操作</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                saveToSd(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将照片保存至sd卡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveToSd</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建位图，这一步在图片比较大的时候可能会抛oom异常，所以跳过这一步，直接将byte[]</span></span><br><span class="line">        <span class="comment">// 数据写入文件，而且如果有进行图片处理的需求，尽量不要另外再申请内存，不然很容易</span></span><br><span class="line">        <span class="comment">// oom。所以尽量避免在这里处理图片</span></span><br><span class="line"><span class="comment">//        Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);</span></span><br><span class="line">        <span class="comment">// 系统时间</span></span><br><span class="line">        <span class="keyword">long</span> dateTaken = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 图像名称</span></span><br><span class="line">        String fileName = DateFormat.format(<span class="string">&quot;yyyy-MM-dd kk.mm.ss&quot;</span>, dateTaken).toString() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">            String filePath = Environment.getExternalStorageDirectory() + File.separator +</span><br><span class="line">                    DIRNAME + File.separator + fileName;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;文件路径：&quot;</span> + filePath);</span><br><span class="line">            File imgFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            <span class="keyword">if</span> (!imgFile.getParentFile().exists()) &#123;</span><br><span class="line">                imgFile.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!imgFile.exists()) &#123;</span><br><span class="line">                    imgFile.createNewFile();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos = <span class="keyword">new</span> FileOutputStream(imgFile);</span><br><span class="line"><span class="comment">//                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);</span></span><br><span class="line">                fos.write(data);</span><br><span class="line">                fos.flush();</span><br><span class="line">                insertIntoMediaPic();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        fos.close();<span class="comment">//关闭</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// sd卡状态异常，直接插入系统相册</span></span><br><span class="line">            <span class="comment">// 暂时是空实现</span></span><br><span class="line">            insertIntoMediaPic();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertIntoMediaPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个类可以说是字字血泪，各位看的时候可以结合注释看……每一个我被坑过的地方我都详细的注释了出来。真的是都在代码里了。关于图片处理那一块我是没什么比较好的办法，内存所限，在拿到byte[] data  这个图片数据数组，我直接在转成Bitmap那一步就OOM了，后来看了一下我这里选取的是4160 * 2340的分辨率，直接写入文件一张图也有4~5M，这个时候的问题就是生成一个Bitmap需要申请很大的内存，而原来的data数组因为这个方法还没结束也无法释放（Java参数传递是引用拷贝传递，所以这时候依然有引用指向内存中的data对象，GC无法回收这块内存），所以就算后续你不额外申请内存，有方法在原有的Bitmap对象上进行操作，也是不行的，因为在生成的时候就OOM了。</p>
<h2 id="创建预览布局"><a href="#创建预览布局" class="headerlink" title="创建预览布局"></a>创建预览布局</h2><p>这里Android文档中的建议是在布局中放置一个FrameLayout作为相机预览类的父容器，我采用了这种做法，布局如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/camera_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_take&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;80dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;80dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/takephoto&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>布局比较简单，就一个FrameLayout和一个ImageView，点击ImageView开始拍照。</p>
<p>接下来看一下Activity的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.cameradieorme.camera;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.hardware.Camera;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.ContextCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.Window;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> android.widget.FrameLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiasuhuei321.cameradieorme.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/8/22.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Camera camera;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout preview;</span><br><span class="line">    <span class="keyword">private</span> CameraPreview mPreview;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        setContentView(R.layout.activity_camera);</span><br><span class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</span><br><span class="line">                WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">        View iv_take = findViewById(R.id.iv_take);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ObjectAnimator scaleX = ObjectAnimator.ofFloat(iv_take, <span class="string">&quot;scaleX&quot;</span>, <span class="number">1f</span>, <span class="number">0.8f</span>);</span><br><span class="line">        <span class="keyword">final</span> ObjectAnimator scaleY = ObjectAnimator.ofFloat(iv_take, <span class="string">&quot;scaleY&quot;</span>, <span class="number">1f</span>, <span class="number">0.8f</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        iv_take.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                        v.setScaleX(<span class="number">0.9f</span>);</span><br><span class="line">                        v.setScaleY(<span class="number">0.9f</span>);</span><br><span class="line">                        scaleX.start();</span><br><span class="line">                        scaleY.start();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                        v.setScaleX(<span class="number">1f</span>);</span><br><span class="line">                        v.setScaleY(<span class="number">1f</span>);</span><br><span class="line">                        scaleX.reverse();</span><br><span class="line">                        scaleY.reverse();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        iv_take.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                mPreview.takePhoto();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        mPreview = <span class="keyword">new</span> CameraPreview(<span class="keyword">this</span>);</span><br><span class="line">        CameraUtil.getInstance().init(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="comment">// 检查权限</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.CAMERA) !=</span><br><span class="line">                PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">// 申请权限</span></span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 已有权限</span></span><br><span class="line">            startCameraPre();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="number">1</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="comment">// 如果权限申请成功</span></span><br><span class="line">            startCameraPre();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;您已拒绝打开相机，想要使用此功能请手动打开相机权限&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCameraPre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CameraUtil.checkCameraHardware(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            camera = CameraUtil.getInstance().getCameraInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        mPreview.setCamera(camera);</span><br><span class="line">        preview = (FrameLayout) findViewById(R.id.camera_preview);</span><br><span class="line">        <span class="keyword">if</span> (preview.getChildCount() == <span class="number">0</span>)</span><br><span class="line">            preview.addView(mPreview);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在开始的时候写了两个属性动画，用户在点击的时候有点交互的感觉（貌似并没有什么luan用）。在onResume中检查是否拥有权限打开相机，因为6.0以上需要动态申请啊，蛋疼。拥有权限或者用户给了权限就执行startCameraPre方法，这个方法通过我自己写的CameraUtil获取并初始化了一个Camera实例。并且最后判断FrameLayout中是否有子View，如果没有就将我们自己的相机预览类添加进去。这样打开相机和拍照的整个流程就完成了，当然了，最后还得贴一下CameraUtil代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiasuhuei321.cameradieorme.camera;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Point;</span><br><span class="line"><span class="keyword">import</span> android.hardware.Camera;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by xiasuhuei321 on 2017/8/21.</span></span><br><span class="line"><span class="comment"> * author:luo</span></span><br><span class="line"><span class="comment"> * e-mail:xiasuhuei321@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;CameraUtil&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Camera camera;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cameraId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScreenWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScreenHeight;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    private Callback callback;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> release = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Camera.Parameters params;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CameraUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraUtilHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> CameraUtil instance = <span class="keyword">new</span> CameraUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CameraUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CameraUtilHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        Point p = <span class="keyword">new</span> Point();</span><br><span class="line">        wm.getDefaultDisplay().getSize(p);</span><br><span class="line">        mScreenWidth = p.x;</span><br><span class="line">        mScreenHeight = p.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否拥有相机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果有返回true，没有返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkCameraHardware</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) &#123;</span><br><span class="line">            <span class="comment">// 有相机</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有相机</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取前置相机实例，注意6.0以上的系统需要动态申请权限（如果</span></span><br><span class="line"><span class="comment">     * target &gt;= 23）则必须动态申请，否则无法打开相机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 打开成功则返回相机实例，失败则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Camera <span class="title">getCameraInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (camera != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;camera已经打开过，返回前一个值&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> camera;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            camera = Camera.open(Camera.CameraInfo.CAMERA_FACING_BACK);</span><br><span class="line">            cameraId = Camera.CameraInfo.CAMERA_FACING_BACK;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 相机正在使用或者不存在</span></span><br><span class="line">            Log.i(TAG, <span class="string">&quot;相机打开失败，正在使用或者不存在，或者，没有权限？&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        initParam();</span><br><span class="line">        release = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> camera;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (camera == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">            camera.setParameters(params);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            camera.setParameters(generateDefaultParams(camera));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许从外部设置相机参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 相机参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParams</span><span class="params">(Camera.Parameters params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成默认的相机参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> camera 使用该参数的相机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Camera.<span class="function">Parameters <span class="title">generateDefaultParams</span><span class="params">(Camera camera)</span> </span>&#123;</span><br><span class="line">        Camera.Parameters parameters = camera.getParameters();</span><br><span class="line">        <span class="comment">// 设置聚焦</span></span><br><span class="line">        <span class="keyword">if</span> (parameters.getSupportedFocusModes().contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) &#123;</span><br><span class="line">            parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);<span class="comment">// 连续对焦模式</span></span><br><span class="line">        &#125;</span><br><span class="line">        camera.cancelAutoFocus();<span class="comment">//自动对焦。</span></span><br><span class="line">        <span class="comment">// 设置图片格式</span></span><br><span class="line">        parameters.setPictureFormat(PixelFormat.JPEG);</span><br><span class="line">        <span class="comment">// 设置照片质量</span></span><br><span class="line">        parameters.setJpegQuality(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) &#123;</span><br><span class="line">            <span class="comment">// 默认打开前置摄像头，旋转90度即可</span></span><br><span class="line">            camera.setDisplayOrientation(<span class="number">90</span>);</span><br><span class="line">            parameters.setRotation(<span class="number">90</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cameraId == Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</span><br><span class="line">            <span class="comment">// 打开后置摄像头，旋转270，这个待验证</span></span><br><span class="line">            camera.setDisplayOrientation(<span class="number">270</span>);</span><br><span class="line">            parameters.setRotation(<span class="number">180</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取摄像头支持的PictureSize列表</span></span><br><span class="line">        List&lt;Camera.Size&gt; picSizeList = parameters.getSupportedPictureSizes();</span><br><span class="line">        <span class="keyword">for</span> (Camera.Size size : picSizeList) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;pictureSizeList size.width=&quot;</span> + size.width + <span class="string">&quot;  size.height=&quot;</span> + size.height);</span><br><span class="line">        &#125;</span><br><span class="line">        Camera.Size picSize = getProperSize(picSizeList, ((<span class="keyword">float</span>) mScreenHeight / mScreenWidth));</span><br><span class="line">        parameters.setPictureSize(picSize.width, picSize.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取摄像头支持的PreviewSize列表</span></span><br><span class="line">        List&lt;Camera.Size&gt; previewSizeList = parameters.getSupportedPreviewSizes();</span><br><span class="line">        <span class="keyword">for</span> (Camera.Size size : previewSizeList) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;previewSizeList size.width=&quot;</span> + size.width + <span class="string">&quot;  size.height=&quot;</span> + size.height);</span><br><span class="line">        &#125;</span><br><span class="line">        Camera.Size preSize = getProperSize(previewSizeList, ((<span class="keyword">float</span>) mScreenHeight) / mScreenWidth);</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;final size is: &quot;</span> + picSize.width + <span class="string">&quot; &quot;</span> + picSize.height);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != preSize) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;preSize.width=&quot;</span> + preSize.width + <span class="string">&quot;  preSize.height=&quot;</span> + preSize.height);</span><br><span class="line">            parameters.setPreviewSize(preSize.width, preSize.height);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parameters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Camera.<span class="function">Size <span class="title">getProperSize</span><span class="params">(List&lt;Camera.Size&gt; pictureSizeList, <span class="keyword">float</span> screenRatio)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;screenRatio=&quot;</span> + screenRatio);</span><br><span class="line">        Camera.Size result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Camera.Size size : pictureSizeList) &#123;</span><br><span class="line">            <span class="keyword">float</span> currentRatio = ((<span class="keyword">float</span>) size.width) / size.height;</span><br><span class="line">            <span class="keyword">if</span> (currentRatio - screenRatio == <span class="number">0</span>) &#123;</span><br><span class="line">                result = size;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == result) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Camera.Size size : pictureSizeList) &#123;</span><br><span class="line">                <span class="keyword">float</span> curRatio = ((<span class="keyword">float</span>) size.width) / size.height;</span><br><span class="line">                <span class="keyword">if</span> (curRatio == <span class="number">4f</span> / <span class="number">3</span>) &#123;<span class="comment">// 默认w:h = 4:3</span></span><br><span class="line">                    result = size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放相机资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (camera != <span class="keyword">null</span>) &#123;</span><br><span class="line">            camera.release();</span><br><span class="line">        &#125;</span><br><span class="line">        camera = <span class="keyword">null</span>;</span><br><span class="line">        release = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 现在是否处于释放状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true释放，false没释放</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRelease</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> release;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里需要注意的就是生成相机参数那一块了，Android中的相机默认是横向的，我们平时用的时候肯定不是那么用的，所以通过 <code>camera.setDisplayOrientation(90)</code>旋转90度调整一下。不过设置了这个之后，如果不设置<code>parameters.setRotation(90)</code>那么保存的图片方向也不对，设置了这个之后就可以了。不过我看网上很多都是采用自己生成Bitmap然后自己旋转……如果<code>parameters.setRotation(90)</code>这种方式可以完成的话，最好不要采用自己处理的方式了，内存开销太大了。关于资源的释放啊什么的，都在预览类里面注释写好了= = ，这里就不再赘述了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最开始研究相机是因为项目里一个用到相机三方总是报错，在有空研究了一下相机之后，添了一行代码，测试到现在还算比较稳定，没有出现崩溃了，有的时候真的是，一行代码能改变的东西却是非常多的。跑题了跑题了，现在突然感觉相机可以玩的东西很多……以后这个demo<del>可能会继续完善</del></p>
<p>代码地址：<a href="https://github.com/ForgetAll/CameraDieOrMe">https://github.com/ForgetAll/CameraDieOrMe</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.android.com/guide/topics/media/camera.html?hl=zh-cn#custom-camera">官方文档</a></li>
<li><a href="http://blog.csdn.net/sinat_29384657/article/details/52188723">Android自定义相机详解</a></li>
<li><a href="https://yq.aliyun.com/articles/26706">Android手把手带你玩转自定义相机</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>实际需求</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>近期计划</title>
    <url>/2018/06/08/%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="近期学习计划"><a href="#近期学习计划" class="headerlink" title="近期学习计划"></a>近期学习计划</h2><p>最近好不容易进入了学习状态，可能要进入一个高产的状态了。目前比较想要折腾 hexo，所以近期可能会集中的看一下 html + css + js。以前折腾过一些东西，前端的一些东西一直算是我的拦路虎吧。之前由于 Android 本身水平也有限，所以只能先搞定自己的本职。近期 Android 遇到的需求用之前的积累也够了，所以打算扫掉一些我前进路上的拦路虎。python 用来写一些方便的工具还是非常棒的，在扫掉前端的这些拦路虎之后，可能会再去看一下 python。当然了，一切都是在本职能很好的完成的前提下。这里也大体的制定一个目标吧：</p>
<ul>
<li>html + css 入门，对于常用的标签有一些了解</li>
<li>js 入门</li>
<li>node.js 和 vue.js 入门</li>
</ul>
]]></content>
      <categories>
        <category>近期计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的启动Vim的方式</title>
    <url>/2021/11/01/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%90%AF%E5%8A%A8Vim%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>同事用的是 emacs 开发，每次使用 ec 命令时都会弹出一首唐诗，觉得挺有意思的。于是咨询了一下，使用的是 fortune 和<a href="https://www.ruanyifeng.com/blog/2015/04/fortune.html">阮一峰</a>大神整理的两个 tang300 的数据文件。</p>
<p>于是在 .zshrc 中编写了一个 vim 代码，让 vim 在启动时也会弹出一首唐诗：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias v=av</span><br><span class="line">alias nv=av</span><br><span class="line">alias vim=av</span><br><span class="line"></span><br><span class="line">function av() &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">  res=`curl --connect-timeout 2 https://v1.jinrishici.com/rensheng.txt`</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">echo</span> -e <span class="string">&quot;\033[31m <span class="variable">$res</span>&quot;</span></span></span><br><span class="line">  fortune -e tang300</span><br><span class="line">  sleep 0.7</span><br><span class="line">  if [[ $1 == *.java ]]</span><br><span class="line">  then /opt/homebrew/bin/vim $1</span><br><span class="line">  else nvim $1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<span id="more"></span>

<p>这里 sleep 0.7s 是因为不用 gui 的话，在终端中启动 vim 是十分快的，连唐诗没弹出来就已经打开 vim 了。这里判断 java 文件是个人需要，vim 配置支持了很多语言，很多插件在不同的 vim 上有不同的问题，brew 安装的 neovim 无法使用 java auto complete2 插件（应该有编译选项，这里是直接安装编好的二进制包），提示 python3 错误，这里就用 brew 安装的 vim 启动 java 文件。</p>
<p>安装 fortune</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install fortune</span><br></pre></td></tr></table></figure>

<p>阮一峰大神整理的 fortune 数据，将对应的数据放到你的 brew 安装目录/share/games/fortunes，比如我的就是：/opt/homebrew/Cellar/fortune/9708/share/games/fortunes</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>上文提到因为 brew 安装的 neovim 不带 python3 模块导致 javacomplete 模块无法使用，特意写了一个函数区分文件后缀用不同的 vim 打开，上 github neovim 的 wiki 看了一下，通过 <code>:checkhealth</code> 查看缺失 python3 provider，提示是 python3 中没有 neovim 模块，通过 <code>:help provider-python3</code> 知运行以下命令可以解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --user --upgrade pynvim</span><br></pre></td></tr></table></figure>

<p>再通过 neovim 打开 java 文件果然正常了。所以启动 Vim 的函数也就用了原来的，毕竟还有启动 Vim 跳转到指定行数的方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function av() &#123;</span><br><span class="line">  fortune -e tang300</span><br><span class="line">  sleep 0.7</span><br><span class="line">  nvim $1 $2 $3 $4 $5 $6 $7 $8 $9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>有趣</tag>
      </tags>
  </entry>
  <entry>
    <title>用到的命令，防忘</title>
    <url>/2021/11/04/%E7%94%A8%E5%88%B0%E7%9A%84%E5%91%BD%E4%BB%A4%EF%BC%8C%E9%98%B2%E5%BF%98/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不全的记录，只是有一些命令还不是很熟，记录下来备查</p>
<h3 id="k8s-快捷键"><a href="#k8s-快捷键" class="headerlink" title="k8s 快捷键"></a>k8s 快捷键</h3><ul>
<li><p>将本地端口映射到 k8s 对应 pod：kubectl -n jspp port-forward authsv-7cfc56d85d-v24pb 9999:9090，-n  命名空间，9999 本地端口，9090 远程端口</p>
</li>
<li><p>实时打印 pod 日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl -n jspp logs authsv-6f5f544d75-qgw6g authsv --tail 10 -f</span><br></pre></td></tr></table></figure></li>
<li><p>获取定时任务列表：kubectl -n jspp get cronjob</p>
</li>
<li><p>删除节点：kubectl -n jspp delete xxx</p>
</li>
<li><p>进入容器执行 shell 命令：kubectl -n jspp exec pod -it sh</p>
</li>
<li><p>k8s 定时任务，没有秒</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ┌───────────── 分钟 (0 - 59)</span><br><span class="line"># │ ┌───────────── 小时 (0 - 23)</span><br><span class="line"># │ │ ┌───────────── 月的某天 (1 - 31)</span><br><span class="line"># │ │ │ ┌───────────── 月份 (1 - 12)</span><br><span class="line"># │ │ │ │ ┌───────────── 周的某天 (0 - 6) （周日到周一；在某些系统上，7 也是星期日）</span><br><span class="line"># │ │ │ │ │                                   </span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># * * * * *</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<h3 id="Vim-快捷键"><a href="#Vim-快捷键" class="headerlink" title="Vim 快捷键"></a>Vim 快捷键</h3><ul>
<li>vim 替换：%s/被替换字符/替换字符/g（不加 g 只替换每行第一个）</li>
<li>从当前行向上移动 n 行：n k</li>
<li>从当前行向下移动 n 行：n j</li>
<li>代替光标下的字母：r + 字母</li>
<li>代替多个字母：R + 输入 + ESC</li>
<li>选中删除并进入插入模式：c+e，到单词结尾，cw，cb 到单词开头，ciw 删掉单词并进入插入模式</li>
<li>ctrl + D 提示命令</li>
<li>:e          打开别的文件</li>
<li>查找：/，或者将光标移动到想要查找的单词上：*</li>
<li>跳转到匹配的括号：%</li>
<li>当前窗水平分割成两个窗口：:sp</li>
<li>当前窗垂直分割成两个窗口：:vsp</li>
<li>重命名当前 Vim 中打开的文件：<ul>
<li>:w newname，将文件写入新文件中做备份</li>
<li>:e#，在当前 vim 中打开新文件</li>
<li>:!rm oldname，利用全局 rm 命令删除老文件</li>
</ul>
</li>
<li>vim 打开文件并跳到指定行数：<ul>
<li>vim +lineNumber filename</li>
<li>配合 ag、grep 搜索结果很好使！</li>
</ul>
</li>
</ul>
<h3 id="Space-Vim-快捷键"><a href="#Space-Vim-快捷键" class="headerlink" title="Space-Vim 快捷键"></a>Space-Vim 快捷键</h3><ul>
<li>space t n：显示/隐藏行号</li>
<li>s g：垂直分屏</li>
<li>s o：关闭其他窗口</li>
<li>s Q：关闭当前窗口</li>
<li>F2 打开语法树</li>
<li>F3 打开文件树</li>
<li>space 1：跳转到窗口1</li>
<li>space s a d：使用 ag 进行搜索（基于打开文件时的位置）</li>
<li>space s a p：使用 ag 进行搜索（整个项目目录）</li>
<li>space ‘：打开 shell 窗口</li>
</ul>
<h3 id="Go-相关"><a href="#Go-相关" class="headerlink" title="Go 相关"></a>Go 相关</h3><ul>
<li>查看生成的汇编代码：go tool compile -S file.go</li>
<li>检测是否有并发问题：go run -race file.go</li>
<li>编译期检查锁问题：go vet xx.go</li>
</ul>
<p>pprof 工具：<a href="https://golang2.eddycjy.com/posts/ch6/01-pprof-1/">相关使用教程</a></p>
<ul>
<li><p>分析应用程序的内存临时分配情况:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go tool pprof -alloc_objects http://localhost:9876/debug/pprof/heap</span><br></pre></td></tr></table></figure></li>
<li><p>生成文字报告：pprof -top [main_binary] profile.pb.gz</p>
</li>
<li><p>生成 svg，在浏览器中打开：pprof -web [main_binary] profile.pb.gz</p>
</li>
</ul>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li>构建 docker image：docker build -t alpinevim/latest -f AlpineWithVim ./<ul>
<li>-t 指定 repository 和 tag -f 指定 build 的 DockerFile</li>
</ul>
</li>
<li>查看 docker image 列表：docker images</li>
<li>删除 image：docker rmi imageId</li>
<li>查看容器是否运行：docker ps -a</li>
<li>本机所有正在运行的容器：docker container ls</li>
<li>终止容器运行：docker container kill [containerID]</li>
</ul>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul>
<li>查看某次 commit 提交内容：git show commit id</li>
<li>查看某次 commit 提交内容中某个文件的变更：git show commit id filename</li>
<li>rebase：git rebase start end</li>
<li>查看某个文件的提交记录： git log filename</li>
<li>查看某个文件的变更内容：git difftool cmid1 cmid2 filename</li>
<li>查看两个分支文件内容差异：git diff branch1 branch2 filepath</li>
<li>查看别的分支文件：git show branch:file</li>
<li>将某个文件回滚到某次提交：git checkout commit id filepath</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset -mixed：此为默认方式，不带任何参数的git reset，这种方式，它回退到某个版本，只保留源码，回退commit和index信息</span><br><span class="line"></span><br><span class="line">git reset -soft:回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可</span><br><span class="line"></span><br><span class="line">git reset -hard 彻底回退到某个版本，本地的源码也会变成为上一个版本的内容</span><br></pre></td></tr></table></figure>



<h3 id="Mongo"><a href="#Mongo" class="headerlink" title="Mongo"></a>Mongo</h3><ul>
<li>排序：sort() 1 升序，-1 降序</li>
<li>创建索引：createIndex 1：升序 ，-1：降序</li>
<li>删除索引：dropIndex(“name”)</li>
<li>查询指定字段：find({查询条件},{field: 1})，1 表示查询此字段，0 表示不查询该字段</li>
</ul>
<h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><ul>
<li>获取值和额外信息：etcdctl get key -wjson</li>
</ul>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><h3 id="一些好用的命令行工具"><a href="#一些好用的命令行工具" class="headerlink" title="一些好用的命令行工具"></a>一些好用的命令行工具</h3><ul>
<li>pip3 install mycli：比 mysql 命令好用一些，有语法提示，更加友好的表名提示，语法高亮</li>
</ul>
]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 内存模型（翻译）</title>
    <url>/2021/11/14/Go%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
    <content><![CDATA[<p>原文：<a href="https://golang.org/ref/mem">The Go Memory Model</a></p>
<p>约定：</p>
<ul>
<li>普通的小括号是我认为原文应该要加入括号中翻译的，属于原文的一部分，也有部分我觉得可能翻译的不够准确会放入英文原文</li>
<li>小括号中带 ta（translator add） 的表示译者认为应该添加可以帮助更好的理解的</li>
<li>某些单词可能不翻译更有原来的味道，比如 channel，也没必要一定要翻译成中文通道</li>
</ul>
<h3 id="The-Go-Memory-Model"><a href="#The-Go-Memory-Model" class="headerlink" title="The Go Memory Model"></a>The Go Memory Model</h3><h4 id="2014年3月的版本"><a href="#2014年3月的版本" class="headerlink" title="2014年3月的版本"></a>2014年3月的版本</h4><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Go 内存模型指定了以下情形可以被保证：在一个协程中读取一个变量可以观察到由不同协程写入同一个变量所产生的值。</p>
<h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>由多个协程同时修改数据的程序必须串行（ta：serialize，个人理解应该是串行而不是序列化）这种访问。</p>
<p>为了串行访问，使用 channel 操作或者其他同步原语（例如在 sync 和 sync/atomic 包中的）保护数据。</p>
<p>如果您为了理解您的程序行为（ta: 协程并发行为）一定要阅读此文档的剩余部分，那您真的是太明智了。</p>
<p>不要耍小聪明（Don’t be clever）。</p>
<span id="more"></span>

<h4 id="Happens-Before"><a href="#Happens-Before" class="headerlink" title="Happens Before"></a>Happens Before</h4><p>在单个协程中，读和写必须表现得和由程序指定的执行顺序一样。也就是说，编译器和处理器只会在重新排序不会改变在语言规范中定义的协程行为时才会重排单个协程中执行的读写。由于这种重排，一个协程观察到的执行顺序可能和另一个感知到的顺序不同。例如：一个协程执行了 <code>a = 1; b = 2;</code> 另一个协程可能观测到的是 b 在 a 之前先更新了值。</p>
<p>为了指定读和写的要求，我们定义了 happens before，一个在 Go 程序中内存操作执行的偏序（partial order）。如果事件 e1 在事件 e2 之前发生(e1 happens before e2)，那我们就说 e2 发生在 e1 之后（e2 happens after e1）。同样的，e1 既没有发生在 e2 之前也没有发生在 e2 之后，那么我们就说 e1 和 e2 是同时发生的（happen concurrently） 。</p>
<p>在单个协程中，happens-before 顺序就是程序表达的顺序。</p>
<p>如果以下两项都成立，那么对变量 v 的读取 r 允许观察到对 v 的写入 w：</p>
<ul>
<li>r 没有在 w 之前发生</li>
<li>没有其他对 v 的写 w’ 发生在 w 之后但是在 r 之前</li>
</ul>
<p>为了保证对变量 v 的读取 r 可以观察到对 v 的特定写入 w，确保 w 是唯一的被 r 允许观测的写。也就是说，如果以下两项都成立，则保证 r 可以观测到 w：</p>
<ul>
<li>w 在 r 之前发生</li>
<li>任何其他对共享变量 v 的写入要么发生在 w 之前要么在 r 之后</li>
</ul>
<p>这对条件要比上面那对条件要强。他要求没有其他写入与 w 或 r 同时发生。</p>
<p>在单个协程中，没有并发，所以两个定义是等价的：读（ta: 操作）r 观察到最近一次对于 v 的写（ta: 操作）w 的写入值。当多个协程访问一个共享变量 v 时，必须使用同步事件来建立 happens-before 条件来确保读能观察到想要的写。</p>
<p>使用 v 类型的零值初始化变量 v 表现为在内存模型中的写入。</p>
<p>读取和写入值大于一个机器字长表现为多个未指定顺序的机器字长操作。</p>
<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>程序在单个协程中初始化运行，但是协程可能创建其他并发运行的协程。</p>
<p>如果 a 包 p 导入了包 q，q 的 init 函数（ta: 调用）完成发生（happens before）在 p 的任何启动之前。</p>
<p>main.main 函数的启动发生在所有 init 函数完成之后。</p>
<h5 id="协程创建"><a href="#协程创建" class="headerlink" title="协程创建"></a>协程创建</h5><p>启动新协程的语句 happens before 协程开始执行。</p>
<p>例如，在这个栗子中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	<span class="keyword">go</span> f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 hello 会在未来的某个时刻（也许在 hello 函数已经返回之后）打印 “hello, world”</p>
<h5 id="协程销毁"><a href="#协程销毁" class="headerlink" title="协程销毁"></a>协程销毁</h5><p>协程的退出不保证 happen before 任何在这个程序中的事件。例如，在这段程序中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; a = <span class="string">&quot;hello&quot;</span> &#125;()</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 a 的赋值之后没有任何同步事件，所以不保证可以被任何其他协程观察到。事实上，激进的编译器可能删除整个 go 声明。</p>
<p>如果一个协程的影响必须被另一个协程观测到，使用同步机制如 lock 或 channel communication 去建立相对顺序。</p>
<h5 id="Channel-通讯（Channel-communication）"><a href="#Channel-通讯（Channel-communication）" class="headerlink" title="Channel 通讯（Channel communication）"></a>Channel 通讯（Channel communication）</h5><p>Channel communication 是两个协程间同步的主要方法。通常在不同的协程中，每一个特定 channel 上的发送都与该 channel 上相应的接收匹配。</p>
<p>channel 上的发送 happens before channel 上相应的接收完成。</p>
<p>如下程序：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	c &lt;- <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> f()</span><br><span class="line">	&lt;-c</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保证会打印 “hello, world”。对 a 的写入 happens before 在 c 上发送，（ta: 前面俩）happens before 在 c 上相应的接收完成，（ta: 前面仨）happens before print （ta: 调用）。</p>
<p>关闭 channel happens before 收到返回 0 值，因为 channel 已经关闭了。</p>
<p>在前一个列子中，将 c&lt;- 代替为 close(c) 产生具有相同保证行为的程序（ta: 是指 print(a) 无法观测到 a 被赋值了，因为 channel 已经被关闭了）。</p>
<p>来自无缓冲 channel 上的接收 happens before 在该 channel 上的发送完成。</p>
<p>该程序（如上，但是交换了发送和接收的语句并使用了无缓冲 channel）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	&lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> f()</span><br><span class="line">	c &lt;- <span class="number">0</span></span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也被保证会打印 “hello, world”。对 a 的写入 happens before c 上的接收，（ta: 前面俩）happens before c上相应的发送完成，（ta: 前面仨）happens before print（ta: 函数调用）。</p>
<p>如果 channel 是有缓冲的（例如，c = make(chan int, 1)），那么程序不会保证打印 “hello, world” 。（也许会打印空字符串，崩溃，或者做其他事。）</p>
<p>容量为 C 的 channel 上第 k 个接收 happens before 在该 channel 上第 k+C 个发送完成。</p>
<p>此规则将之前的规则推广到带缓冲的 channel。它允许通过带缓冲的 channel 对计数信号量建模：该 channel 中的 item 数量对应活跃使用的数量，channel 的容量对应同时使用的最大数量，发送一个 item （ta: 需要）获取信号量，收到一个 item 需要释放信号量。这是限制并发的通常做法（This is a common idiom for limiting concurrency.）。</p>
<p>这段程序为 work list 中的每一个条目启动了一个协程，但是协程使用 limit channel 进行协调以确保一次最多运行三个 work 函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> limit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, w := <span class="keyword">range</span> work &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(w <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">			limit &lt;- <span class="number">1</span></span><br><span class="line">			w()</span><br><span class="line">			&lt;-limit</span><br><span class="line">		&#125;(w)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">select</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="锁（Locks）"><a href="#锁（Locks）" class="headerlink" title="锁（Locks）"></a>锁（Locks）</h5><p>sync 包实现了两种锁数据类型：sync.Mutex 和 sync.RWMutex。</p>
<p>对于任何 sync.Mutex 或 sync.RWMutex 变量 l 且 n &lt; m，对 l.Unlock() 的 n 次调用 happens before 对 l.Lock() 的 m 次调用返回。</p>
<p>如下程序：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> l sync.Mutex</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	l.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l.Lock()</span><br><span class="line">	<span class="keyword">go</span> f()</span><br><span class="line">	l.Lock()</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保证会打印 “hello, world” 。第一次调用 l.Unlock（在 f 中） happens before 第二次调用 l.Lock()（在 main 中）返回，（ta: 前面俩）happens before print（ta: 函数调用）。</p>
<p>对于任意调用 sync.RWMutex 变量 l 的 l.RLock，有 n，l.Rlock() happens (returns) after 调用 n 次 l。Unlock 和匹配的 l.RUnlock happens before 调用 n+1 次 l.Lock。</p>
<h5 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h5><p>sync 包提通过使用 Once 类型（ta: 为以下情况）提供一种安全的机制：存在多个协程时的初始化。多线程可以为特定的 f 执行 once.Do(f)，但是只有一个（ta: 线程）会执行 f()，其他的直到 f() 返回前调用都会阻塞。</p>
<p>once.Do(f) 的单次调用 happens (returns) before 任何调用 once.Do(f) 返回。</p>
<p>在如下程序中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doprint</span><span class="params">()</span></span> &#123;</span><br><span class="line">	once.Do(setup)</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoprint</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> doprint()</span><br><span class="line">	<span class="keyword">go</span> doprint()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 twoprint 只会调用 setup 一次。setup 函数将在任何一个 print 调用之前完成。结果是 “hello, world” 会被打印两次。</p>
<h5 id="不正确的同步（Incorrect-synchronization）"><a href="#不正确的同步（Incorrect-synchronization）" class="headerlink" title="不正确的同步（Incorrect synchronization）"></a>不正确的同步（Incorrect synchronization）</h5><p>请注意，读 r 可能会观察到与 r 并发发生的由写 w 写入的值。即使发生这种情况，也不意味着在 r 之后的读会观察到发生在 w 之前的写。</p>
<p>在如下程序中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="number">1</span></span><br><span class="line">	b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">print</span>(b)</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> f()</span><br><span class="line">	g()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能会发生 g 打印 2 然后打印 0。</p>
<p>这一事实使一些常见的惯用语无效。</p>
<p>双重检查锁（Double-checked locking）是尝试避免同步开销的一种尝试。举个栗子，twoprint 程序也许像下面这样写也不正确：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> done <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	done = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doprint</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> !done &#123;</span><br><span class="line">		once.Do(setup)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoprint</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> doprint()</span><br><span class="line">	<span class="keyword">go</span> doprint()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是无法保证，在 doprint 中，观察对 done 的写入意味着观察对 a 的写入。这个版本会（不正确的）打印一个空字符串而不是 “hello, world”。</p>
<p>另一个不正确的惯用语是忙于等待（is busy waiting for）一个值，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> done <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	done = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> setup()</span><br><span class="line">	<span class="keyword">for</span> !done &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像以前一样，没有保证的是，在 main 中观察对 done 的写入意味着观察对 a 的写入，所以这个程序也会打印空字符串。更糟糕的是，不能保证 main 会观察到对 done 的写入，因为两个线程之间没有同步事件。main 中的循环不保证会结束（ta: 死循环）。</p>
<p>这个主题有更微妙的变种，比如这个程序。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">	msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g *T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">	t := <span class="built_in">new</span>(T)</span><br><span class="line">	t.msg = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">	g = t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> setup()</span><br><span class="line">	<span class="keyword">for</span> g == <span class="literal">nil</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(g.msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即使 main 观测到 g != nil 并退出循环， 也不保证他能观测到 g.msg 的初始化值。</p>
<p>在所有这些栗子中，解决方式是一样的：明确的使用同步（use explicit synchronization）</p>
]]></content>
      <categories>
        <category>go</category>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要自己翻译文章？</title>
    <url>/2021/11/19/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%B7%B1%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0%EF%BC%9F/</url>
    <content><![CDATA[<p>如今一般的编程资料都会有中文版本，特别是出了一段时间且普及程度比较广泛的资料，几乎一定会有中文版本，那么我们为什么要自己去读英文原文，自己翻译呢？我自己思考如下：</p>
<ul>
<li>翻译质量参差不齐，无法保证全篇都是高质量的翻译，难免会有错漏之处，阅读原文可以更好的理解作者的意思</li>
<li>第一时间没有中文资料的时候，一定是会去读英文原文的文档的</li>
<li>日积月累，提升自己的阅读能力</li>
</ul>
<p>即使译者可以保证通篇都是高质量的译文，但是在实际工作中还是难免需要阅读英文文档，需要一定的阅读能力，在平时自己翻译一些文档刚好可以提升一下自己的阅读能力。</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Raft（翻译）</title>
    <url>/2021/11/20/Raft%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Raft-可理解的分布式共识"><a href="#Raft-可理解的分布式共识" class="headerlink" title="Raft(可理解的分布式共识)"></a>Raft(可理解的分布式共识)</h2><p>所以，什么是分布式共识？</p>
<p>让我们以一个栗子开始…</p>
<p>假设我们有一个单节点系统，在这个栗子中，你可以认为我们的节点是一个存储单个值的数据库，我们还有一个可以向服务端发送值的客户端，在单节点上很容易就这个值达成一致或共识。</p>
<p>但是我们如何在多节点上达成共识？</p>
<p><strong>这就是分布式共识的问题</strong></p>
<span id="more"></span>

<p>Raft 是一个实现分布式共识的协议，让我们看一下他是如何工作的高级概述。</p>
<p>一个节点可能三个状态中的一种：</p>
<ul>
<li>Follower 状态</li>
<li>Candidate 状态（候选状态）</li>
<li>Leader 状态</li>
</ul>
<p>所有的节点都以 Follower 状态开始，如果 followers 没有收到 leader 的消息，那么他可以变成 candidate，然后 candidate 向其他节点请求投票，节点会投票回复。如果 candidate 获取了大多数节点的投票那么他会变成一个 leader。这个过程被称为 Leader 选举。所有对系统的更改都需要经过 leader，每次更改都作为一个条目添加到节点日志中。日志未提交不会更改节点的值，为了提交这个条目首先会复制这个值并发送给 follower 节点，然后 leader 等到大多数节点都已经写入条目才会更改这个值，接着 leader 会通知 followers 条目已经被提交了。</p>
<p><strong>集群已经就系统状态达成共识</strong>，这个过程被称为日志复制（Log Replication）。</p>
<h2 id="Leader-选举"><a href="#Leader-选举" class="headerlink" title="Leader 选举"></a>Leader 选举</h2><p>在 Raft 中有两种超时设置控制选举：</p>
<ul>
<li>首先是<em>election timeout</em>（选举超时）：选举超时是 follower 等待直到成为 candidate 的时间，选举超时随机随机设置在 150ms ~ 300ms 之间。在选举超时后，follower 成为 candidate 并开启新的选举期，然后自己为自己投票。向其他节点发起投票请求，如果接收节点在此期间还没有投过票，那么他会投票给此候选者并重置自己的选举超时。一旦 candidate 获取大部分投票就会成为 leader。</li>
<li>然后是心跳超时（hearbeat timeout）：Leader 开始向 followers 发送 <em>Append Entries</em> message，这些消息按心跳超时指定的时间间隔发送，followers 响应每一条 <em>Append Entries</em> message。此次选举任期将持续到 follower 停止接收心跳并成为候选人。要求多数票保证每届只能选举一个 leader，如果两个节点同时成为 candidate 则会发生投票分裂。</li>
</ul>
<h2 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h2><p>一旦选举出 leader，需要将系统所有更改复制到所有节点。这可以通过同样在心跳上使用的 <em>Append Entries</em> message 完成。通过栗子看一下这个过程：</p>
<ul>
<li>首先客户端向 leader 发送一个变更</li>
<li>变更追加到 leader 的日志</li>
<li>然后变更在下次心跳被发送到 follower 中</li>
<li>一旦大多数 follower 承认他，一个 entry 将会被提交</li>
<li>leader 发送响应到客户端</li>
</ul>
<p>Raft 甚至在面对网络分区（network partitions）保持一致。栗子：</p>
<p>有 A、B、C、D、E 五个节点，A、B 和 CDE 因故失恋，此时 B 和 C 分别为各自分区的 Leader</p>
<p>由于分区，现在有两个不同任期的的 leader，client 1 尝试将节点 B 的值置为 3，节点 B 不能（将日志）复制到大部分节点上，所以他的 entry 保持未提交（uncommitted)。</p>
<p>client 2 尝试将节点 C 的值置为 8，因为他可以复制到大多数节点上，所以可以成功。当网络分区修复时，节点 B 将看见更高的选举任期然后下台，A 和 B 都将回滚他们未提交的 entries 并匹配新 leader 的日志。现在集群中的日志是一致的了。</p>
<h2 id="可以进一步阅读的资料"><a href="#可以进一步阅读的资料" class="headerlink" title="可以进一步阅读的资料"></a>可以进一步阅读的资料</h2><ul>
<li><p><a href="http://thesecretlivesofdata.com/raft/#intro">原文</a>：有动态演示的说明，非常易懂，强烈推荐阅读</p>
</li>
<li><p><a href="https://raft.github.io/raft.pdf">Raft 论文</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>错误处理与 Go（翻译）</title>
    <url>/2021/11/21/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8E%20Go%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
    <content><![CDATA[<p>原文：<a href="https://go.dev/blog/error-handling-and-go">https://go.dev/blog/error-handling-and-go</a></p>
<h2 id="错误处理与-Go"><a href="#错误处理与-Go" class="headerlink" title="错误处理与 Go"></a>错误处理与 Go</h2><p><em>Andrew Gerrand</em></p>
<p><em>2011 年 7 月 12 日</em></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>如果你写过任何 Go 代码，你可能会遇到内置的 error 类型。Go 代码使用 error 值来表明不正常的状态。例如：os.Open 函数在他打开文件失败时会返回非空的 error。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(file *File, err error)</span></span></span><br></pre></td></tr></table></figure>

<p>以下代码使用 os.Open 去打开一个文件。如果发生了错误他会调用<code>log.Fatal</code>去打印错误消息和停止。（log.Fatal 会调用 os.Exit()）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">&quot;filename.ext&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// do something with the open *File f</span></span><br></pre></td></tr></table></figure>

<p>你可以在 Go 中用知道的关于这个 error 类型来完成很多工作，但是本文我们会仔细看看 error 和讨论在 Go 中错误处理的一些良好实践。</p>
<span id="more"></span>

<h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p><code>error</code>类型是一个接口类型。error 变量可以将自身描述为代表任何值的字符串。这是接口的声明：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>error 类型，和所有内置类型一样，在 universe block 中提前定义。（is <a href="https://golang.org/doc/go_spec.html#Predeclared_identifiers">predeclared</a> in the <a href="https://golang.org/doc/go_spec.html#Blocks">universe block</a>.）</p>
<p>最常用的 error 实现是 errors 包的未导出 errorString 类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// errorString is a trivial implementation of error.</span></span><br><span class="line"><span class="comment">// errorString 是 error 的一个简单实现</span></span><br><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123;</span><br><span class="line">    s <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以使用 errors.New 函数构造这些值中的一个，他接收一个字符串并将其转换为 errors.errorString 然后作为 error 值返回。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New returns an error that formats as the given text.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是你可以如何使用 errors.New：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(f <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;math: square root of negative number&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用者将负数传递给 Sqrt 会收到非空的 error 值（其具体表示为一个 errors.errorString 值）。调用者通过调用 error 的 Error 方法或者直接打印来访问 error zifuchuan(“math:square root…”)。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := Sqrt(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fmt 包通过调用他的 Error() 字符串方法格式化一个 error 值。</p>
<p>包含上下文是 error 实现的责任。os.Open 返回的错误格式是：open /etc/passwd: permission denied，而不仅仅是：permission denied。我们的 Sqrt 返回的错误缺少有关无效参数的信息。</p>
<p>为了添加该信息，一个有用的函数是 fmt 包的 Errorf。他通过 Printf 的规则格式化字符串并且通过 errors.New 创建一个 error 返回。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;math: square root of negative number %g&quot;</span>, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在许多情况下，fmt.Errorf 已经足够好了，但是既然 error 是一个 interface，那么你可以随意的使用 data structure作为 error 值，允许调用者去检查 error 的细节。</p>
<p>例如，我们假设调用者也许想要恢复传递给 Sqrt 的无效参数。我们可以通过定义新的 error 实现而不是使用 errors.errorString 来实现。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> NegativeSqrtError <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f NegativeSqrtError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;math: square root of negative number %g&quot;</span>, <span class="keyword">float64</span>(f))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后一个复杂的调用者可以使用类型断言（type assertion）去检查 NegativeSqrtError 并专门处理他，当调用者仅仅只是将 error 传递给 fmt.Println 或者 log.Fatal 不会有行为变化。</p>
<p>从另一个栗子来说，json 包制定了 json.Decode 函数在解析 JSON blob （binary large object）时遇到语法错误时返回 SyntaxError 类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SyntaxError <span class="keyword">struct</span> &#123;</span><br><span class="line">    msg    <span class="keyword">string</span> <span class="comment">// description of error</span></span><br><span class="line">    Offset <span class="keyword">int64</span>  <span class="comment">// error occurred after reading Offset bytes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *SyntaxError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> e.msg &#125;</span><br></pre></td></tr></table></figure>

<p>Offset 字段甚至没有在 error 的默认格式化中展示，但是调用者可以使用它将文件和行信息添加到他们的错误消息中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err := dec.Decode(&amp;val); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> serr, ok := err.(*json.SyntaxError); ok &#123;</span><br><span class="line">        line, col := findLine(f, serr.Offset)</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s:%d:%d: %v&quot;</span>, f.Name(), line, col, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（这是来自 <a href="https://perkeep.org/">Camlistore</a> 项目的一些<a href="https://github.com/go4org/go4/blob/03efcb870d84809319ea509714dd6d19a1498483/jsonconfig/eval.go#L123-L135">实际代码</a>的略微简化版本。）</p>
<p>error 接口只需要一个 Error 方法。额特定的 error 实现可能有额外的方法。例如，按照通常的约定，net 包返回 error 类型的错误，但是一些通过 net.Error 接口定义的 error 实现有一些额外方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">    error</span><br><span class="line">    Timeout() <span class="keyword">bool</span>   <span class="comment">// Is the error a timeout?</span></span><br><span class="line">    Temporary() <span class="keyword">bool</span> <span class="comment">// Is the error temporary?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端代码可以使用 type assertion 测试 net.Error，然后区分暂时性的网络问题和永久的。例如，网络爬虫在碰到暂时错误时也许会休眠然后重试，否则（发生永久错误）放弃。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> nerr, ok := err.(net.Error); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class="line">    time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简化重复的错误处理"><a href="#简化重复的错误处理" class="headerlink" title="简化重复的错误处理"></a>简化重复的错误处理</h3><p>在 Go 中，错误处理是很重要的。语言的设计和约定鼓励你在发生错误的地方检查（与其他语言中抛出异常有时捕获的约定不同）。在某些情况下这使得 Go 代码冗长，但幸运的是，你可以用一些技术来最小化重复的错误处理。</p>
<p>考虑一个带有 HTTP handler 的 App Engine 程序，从数据存储中检所记录并使用模板对他进行格式化。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/view&quot;</span>, viewRecord)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewRecord</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    c := appengine.NewContext(r)</span><br><span class="line">    key := datastore.NewKey(c, <span class="string">&quot;Record&quot;</span>, r.FormValue(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">    record := <span class="built_in">new</span>(Record)</span><br><span class="line">    <span class="keyword">if</span> err := datastore.Get(c, key, record); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := viewTemplate.Execute(w, record); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数处理由 datastore.Get 函数和 viewTemplate 的执行方法返回的 error 。在这两种情况下，他向用户展示一条简单的带有 HTTP 状态码 500 的消息（内部服务错误，Internal Server Error）。这看起来是可管理的代码量，但是添加更多的 HTTP handlers 很快你会得到完全相同的错误处理代码结果。</p>
<p>为了减少重复，我们可以定义自己的 HTTP appHandler 类型，包含一个 error 返回值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> appHandler <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span> <span class="title">error</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们可以改变 viewRecord 函数去返回错误：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewRecord</span><span class="params">(w http.ResponseWriter, r *http.Request)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c := appengine.NewContext(r)</span><br><span class="line">    key := datastore.NewKey(c, <span class="string">&quot;Record&quot;</span>, r.FormValue(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">    record := <span class="built_in">new</span>(Record)</span><br><span class="line">    <span class="keyword">if</span> err := datastore.Get(c, key, record); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> viewTemplate.Execute(w, record)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这比原始版本要简化（了一些），但是 http 包不理解返回错误的函数。我们可以在 appHandler 中实现 http.Handler 接口的 ServeHTTP 方法来修复：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fn appHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := fn(w, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServerHTTP 方法调用 appHandler 函数并且将返回的错误（如果有）展示给用户。注意方法的 receiver，fn，是一个函数。（Go 可以干这事！）方法通过调用接收者在表达式中的 fn(w, r) 调用函数。</p>
<p>现在，使用 http 包注册 viewRecord时，我们使用 Handler 函数（而不是 HandlerFunc），因为 appHandler 是一个 http.Handler（不是 http.HandlerFunc）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.Handle(<span class="string">&quot;/view&quot;</span>, appHandler(viewRecord))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个基本的错误处理设施，我们可以使他更加方便使用。而不仅仅是展示错误字符串，给用户一个简单的错误消息和一个合适的 HTTP 状态码会更好，同时将完整的 error 记录到 App Engine 的开发者控制台以进行调试。</p>
<p>为此，我们创建了一个 appError 结构体，包含了一个错误和一些其他字段：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> appError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Error   error</span><br><span class="line">    Message <span class="keyword">string</span></span><br><span class="line">    Code    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下一步我们更新 appHandler 返回类型，返回 *appError 值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> appHandler <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span> *<span class="title">appError</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（通常返回错误的具体类型而不是错误是错的，在 <a href="https://golang.org/doc/go_faq.html#nil_error">Go FAQ</a> 中讨论了理由，但是这里这么做是对的因为 ServeHTTP 是唯一能看到值和使用它内容的地方。）</p>
<p>然后使 appHandler 的 ServeHTTP 方法向用户展示 appError 的消息和 HTTP 状态码并且将完整 Error 记录到开发者控制台：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fn appHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> e := fn(w, r); e != <span class="literal">nil</span> &#123; <span class="comment">// e is *appError, not os.Error.</span></span><br><span class="line">        c := appengine.NewContext(r)</span><br><span class="line">        c.Errorf(<span class="string">&quot;%v&quot;</span>, e.Error)</span><br><span class="line">        http.Error(w, e.Message, e.Code)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们更新 viewRecord 到新的函数签名，当他遭遇错误是返回更多上下文。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewRecord</span><span class="params">(w http.ResponseWriter, r *http.Request)</span> *<span class="title">appError</span></span> &#123;</span><br><span class="line">    c := appengine.NewContext(r)</span><br><span class="line">    key := datastore.NewKey(c, <span class="string">&quot;Record&quot;</span>, r.FormValue(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">    record := <span class="built_in">new</span>(Record)</span><br><span class="line">    <span class="keyword">if</span> err := datastore.Get(c, key, record); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;appError&#123;err, <span class="string">&quot;Record not found&quot;</span>, <span class="number">404</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := viewTemplate.Execute(w, record); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;appError&#123;err, <span class="string">&quot;Can&#x27;t display record&quot;</span>, <span class="number">500</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个版本的 viewRecord 和原始的一样长，但是现在这些行都有特别的意义然后我们可以提供友好的用户体验。</p>
<p>这还没有结束，我们可以在我们的应用里更进一步的提升错误处理。一些想法：</p>
<ul>
<li>给错误处理一个漂亮的 HTML 模板</li>
<li>当用户是管理员时通过将堆栈信息写入 HTTP response 使得调试更加容易</li>
<li>为 appError 写一个为更容易调试记录堆栈信息的构造函数</li>
<li>在 appHandler 中从 painc 恢复，将之作为危急（Critical）记录到控制台，同时告诉用户严重的错误发生了。这是一个妙招去避免将由程序引发的高深莫测的错误暴露给用户。有关更多详细信息，请阅读 <a href="https://golang.org/doc/articles/defer_panic_recover.html">Defer, Panic, and Recover</a></li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>正确的错误处理是优秀软件的基本要求。通过使用本文中标书的技术，你应该可以写出更加可靠和简洁的 Go 代码。</p>
<h3 id="后记——读后感"><a href="#后记——读后感" class="headerlink" title="后记——读后感"></a>后记——读后感</h3><p>在 Go 中不应该忽视每一处可能发生错误的代码（其他的语言其实也一样），在生产环境中，凡是可能会发生 error 的地方，那么早晚都会产生 error，我们应该坚信这一点，面向 error 编程。</p>
<p>在确定了面向 error 编程之后，该如何编写出好的错误处理代码？通读本文（错误处理与Go），可以知道如下两点：</p>
<ul>
<li>将重复的错误处理代码抽出，作为统一的错误处理</li>
<li>将错误抛到更高层，直到最高层才开始统一处理错误</li>
</ul>
<p>第二点会让最上层的代码充满错误处理，该如何编写好最上层的处理代码呢？我认为好的处理代码应该是这样的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := doSomething1()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// error handle</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = doSomething2()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// error handler</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样写保证了阅读代码的连贯性，虽然有大量的错误处理，在梳理业务逻辑时直接忽略跳过就可以了，而且大量的错误也无法避免，每一个微服务都是不可靠的，会挂在每一个你意想不到的时候，此时需要我们正确的处理错误给用户正确的响应。</p>
<p>个人不是很喜欢 Java 中 try catch 会导致正常的处理逻辑有缩进。而可能因为一些历史遗留原因（早期 try catch 会有很高的性能损失），大家对异常的处理都是 try catch 而不是 throw 在上层统一处理，同时也难以在上层统一处理可能来自不同运行时的不同 exception，需要经过精心的设计才可以。同时因为 Java 中大量的异常，异常不再是异常，变得有些司空见惯了，从良性到灾难性都有，异常的严重性由调用者来区分。我觉得这也跟巨石后端时代程序不能挂掉有关，无论是怎样的 exception，都一定要捕获，即使没有正确的处理。</p>
<p>看到过一个说法：抛异常本身没有错，Java 抛异常也没有错，但是对于程序猿来说很多时候这些异常是难以处理的。（可以参考<a href="https://devblogs.microsoft.com/oldnewthing/?p=36693">这篇</a>文章）</p>
<p>关于如何编写良好的错误处理代码先告一段落，接下来讨论如何编写良好的自定义错误。</p>
<p>TODO…<br>待补全</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>Errors are values（翻译）</title>
    <url>/2021/11/21/%E9%94%99%E8%AF%AF%E6%98%AF%E5%80%BC%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
    <content><![CDATA[<p>原文：<a href="https://go.dev/blog/errors-are-values">https://go.dev/blog/errors-are-values</a></p>
<h2 id="Errors-are-values"><a href="#Errors-are-values" class="headerlink" title="Errors are values"></a>Errors are values</h2><p><em>Rob Pike</em><br><em>12 January 2015</em></p>
<p>Go 程序猿之间经常讨论的点，特别是那些新进使用 Go 的人，就是如何处理 errors。对话经常会转变为对以下程序出现次数的哀叹：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>我们最近扫描了所有我们能找到的开源项目，发现这个（代码）片段仅仅在每页或每两页中出现一次，比某些人认为的次数要少。尽管如此，如果还是有人坚持认为他们一直要输入以下代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span></span><br></pre></td></tr></table></figure>

<p>那么一定是哪里出错了，（他们认为）显而易见的目标是 Go 本身。</p>
<p>这是不幸的，有误导性的，并且很容易纠正的。事情可能是这样的：一个 go 语言的新人提出问题“如何处理 errors？”，学会之后，就停在那了。（learn this pattern, and stop there）。在其他的语言里，也许使用 try-catch 块或者其他的机制处理 errors。所以，程序猿会认为在以前的语言里用 try-catch ，在 Go 里我只要输入 <code>if err != nil</code>。随着时间的推移，Go 代码收集了许多这样的片段，结果感觉很笨拙。</p>
<p>无论这个解释是否合适，很明显的一点是 Go 程序猿忽略了关于 errors 的一个基本的点：错误是值（Errors are values）</p>
<p>值可以被编程，既然 errors 是值，那么 errors 就可以被编程。当然一个常见的涉及错误值得语句就是测试它是否为 nil，但是还有无数其他的事可以用一个错误值来做，和其他的一些东西一起应用会让你的程序更好，并消灭大部分死板的错误检查代码。</p>
<p>这里有一个来自 bufio 包的 Scanner 类的简单栗子。他的 Scan 方法执行底层 I/O 会产生一个 error，然而 Scan 方法根本没有暴露一个 error，而是返回了一个 bool 值，和另一个在 scan 结束后调用的分离的方法，来报告是否有 error 产生，客户端代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scanner := bufio.NewScanner(input)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">    token := scanner.Text()</span><br><span class="line">    <span class="comment">// process token</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// process the error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，有一个对 error 是否为 nil 的检查，但是他只出现和执行一次。Scan 方法可以使用如下定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scanner)</span> <span class="title">Scan</span><span class="params">()</span> <span class="params">(token []<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure>

<p>那么上面的示例代码可能如下（依赖 token 如何获取）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scanner := bufio.NewScanner(input)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    token, err := scanner.Scan()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err <span class="comment">// or maybe break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// process token</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这没有很大的不同，但有一个很重要的区别。在这个代码里，客户端必须在每次迭代中检查 error，但是在真正的 Scanner API 中，error 处理被从关键的 API 元素中抽离，使用 token 迭代。使用真正的 API，客户端代码感觉更加自然：循环到结束才需要担心 errors。错误处理不会掩盖控制流。</p>
<p>在这幕后发生了什么？当然，如果 Scan 立刻遭遇 I/O error，他会记录错误并返回 false。另一个分离的方法 Err 会在客户端询问的时候报告这个 error 值。尽管这是微不足道的，但是与 <code>if err != nil</code>无处不在要求客户端在每次在获取 token 后都检查 error 不同。这是用 error 值编程。简单的编程，是的，但是是编程。</p>
<p>值得强调的是无论设计如何，如果有 error 无论他们是如何暴露的，都要检查。这里的讨论不是如何避免错误检查，他是关于如何使用语言优雅的处理错误。</p>
<p>当我参加 2014 年秋季在东京举行的 GoCon 时，出现了重复错误检查代码的话题。一位热情的 gopher，在 twitter 上叫 <a href="https://twitter.com/jxck_"><code>@jxck_</code></a> ，也有类似的关于错误检查的哀叹。他有一些代码看起来如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, err = fd.Write(p0[a:b])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">_, err = fd.Write(p1[c:d])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">_, err = fd.Write(p2[e:f])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// and so on</span></span><br></pre></td></tr></table></figure>

<p>代码重复性很高。在真实的代码中会更长，还有更多的事发生，所以使用辅助函数对此重构并不容易。但是在种理想情况中，使用一个函数关闭 error 变量会有帮助：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">write := <span class="function"><span class="keyword">func</span><span class="params">(buf []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    _, err = w.Write(buf)</span><br><span class="line">&#125;</span><br><span class="line">write(p0[a:b])</span><br><span class="line">write(p1[c:d])</span><br><span class="line">write(p2[e:f])</span><br><span class="line"><span class="comment">// and so on</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个模式看起来不错，但是需要在每个执行写入的函数中使用闭包函数。单独的辅助函数使用起来比较笨拙，因为 err 变量需要在调用之间维护（试试它）。</p>
<p>我们可以让他更加简洁、通用和可重复使用，通过上面提到的 Scan 方法带来的想法。在我们的讨论中我提到了这个技术，但是 jxck_ 没看到如何应用他。经过长时间的交流，有点受语言交流的障碍，我询问我是否可以用他的笔记本输入一些代码向他展示。</p>
<p>我定义了一个对象叫 errWriter，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> errWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">    w   io.Writer</span><br><span class="line">    err error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后给他一个方法，<code>write</code>。他不需要有标准的 Write 签名，他的小写是为了突出区别。<code>write</code>方法调用底层<code>Writer</code>的<code>Write</code>方法和记录未来引用的第一个错误：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ew *errWriter)</span> <span class="title">write</span><span class="params">(buf []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ew.err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    _, ew.err = ew.w.Write(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 error 发生时，<code>write</code>方法变成没有操作的方法，但是 error 的值已经被保存了。</p>
<p>给定 errWriter 类型和他的 write 方法，上面的代码可以重构为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ew := &amp;errWriter&#123;w: fd&#125;</span><br><span class="line">ew.write(p0[a:b])</span><br><span class="line">ew.write(p1[c:d])</span><br><span class="line">ew.write(p2[e:f])</span><br><span class="line"><span class="comment">// and so on</span></span><br><span class="line"><span class="keyword">if</span> ew.err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ew.err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是干净的代码，甚至比闭包的还要干净，并且还使得实际的写入（的代码）顺序更加易读。不再有杂乱了，使用 error 值（和接口）已经让代码更好了。</p>
<p>同一个包中的其他代码也可以基于这个想法，甚至直接使用 errWriter。</p>
<p>此外，一旦 errWriter 存在，它可以做更多的事，特别是在一些（代码）做作的例子中。他可以累计字节数，他可以将写入合并到一个缓冲区中然后可以自动传输。以及更多。</p>
<p>事实上，这种模式经常在标准库中出现。archive/zip 和 net/http 包使用它。本地讨论更加突出，bufio 包的 Writer 实际上就是 errWriter 想法的实现。尽管 bufio.Writer.Write 返回了一个 error，这主要是为了实现 io.Writer 接口。bufio.Writer 的 Write 方法表现的像上面的 errWriter.write 方法一样，Flush 报告错误，所以我们的例子可以像下面这么写：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">b := bufio.NewWriter(fd)</span><br><span class="line">b.Write(p0[a:b])</span><br><span class="line">b.Write(p1[c:d])</span><br><span class="line">b.Write(p2[e:f])</span><br><span class="line"><span class="comment">// and so on</span></span><br><span class="line"><span class="keyword">if</span> b.Flush() != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式有一个重大的缺点，至少对于一些应用来说：无法知道在错误发生之前完成了多少处理。如果那个（完成了多少处理）信息很重要，需要更细粒度的方式。不过很多时候，在最后全有或全无的检查就足够了。</p>
<p>我们仅仅看到了一种避免重复处理 error 的代码。记住使用 errWriter 或 bufio.Writer 不是简化 error 处理的唯一方式，这种方式也不适用与所有情况。然而，关键的教训是：errors are values，并且可以使用 Go 编程语言全部能力来处理他们。</p>
<p>使用语言去简化你的错误处理。</p>
<p>但是记住：无论你做什么，总是要检查你的 errors！</p>
<p>最后，jxck 和我互动的完整故事，包括一个他记录的录像，访问<a href="https://jxck.hatenablog.com/entry/golang-error-handling-lesson-by-rob-pike">他的博客</a>。</p>
]]></content>
      <categories>
        <category>翻译</category>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
</search>
